/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _ASSERT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
// pub const FP_NAN: u32 = 0;
// pub const FP_INFINITE: u32 = 1;
// pub const FP_ZERO: u32 = 2;
// pub const FP_SUBNORMAL: u32 = 3;
// pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const __GNUC_VA_LIST: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] = b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const _SYS_TIME_H: u32 = 1;
pub const PRIz: &[u8; 2] = b"z\0";
pub const BYTES_PER_PIXEL: u32 = 4;
pub const M_COLOR_RED: u32 = 255;
pub const M_COLOR_GREEN: u32 = 65280;
pub const M_COLOR_BLUE: u32 = 16711680;
pub const M_COLOR_ALPHA: u32 = 4278190080;
pub const M_COLOR_WHITE: u32 = 16777215;
pub const INSN_LENGTH_MAX: u32 = 4;
pub const _ARPA_INET_H: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_BUF_LOCK: u32 = 72;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_RECVERR_RFC4884: u32 = 26;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_RECVERR_RFC4884: u32 = 31;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const _NETDB_H: u32 = 1;
pub const _RPC_NETDB_H: u32 = 1;
pub const _PATH_HEQUIV: &[u8; 17] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &[u8; 11] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &[u8; 14] = b"/etc/networks\0";
pub const _PATH_NSSWITCH_CONF: &[u8; 19] = b"/etc/nsswitch.conf\0";
pub const _PATH_PROTOCOLS: &[u8; 15] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &[u8; 14] = b"/etc/services\0";
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const NO_ADDRESS: u32 = 4;
// pub const IPPORT_RESERVED: u32 = 1024;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_V4MAPPED: u32 = 8;
pub const AI_ALL: u32 = 16;
pub const AI_ADDRCONFIG: u32 = 32;
pub const AI_NUMERICSERV: u32 = 1024;
pub const EAI_BADFLAGS: i32 = -1;
pub const EAI_NONAME: i32 = -2;
pub const EAI_AGAIN: i32 = -3;
pub const EAI_FAIL: i32 = -4;
pub const EAI_FAMILY: i32 = -6;
pub const EAI_SOCKTYPE: i32 = -7;
pub const EAI_SERVICE: i32 = -8;
pub const EAI_MEMORY: i32 = -10;
pub const EAI_SYSTEM: i32 = -11;
pub const EAI_OVERFLOW: i32 = -12;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NUMERICHOST: u32 = 1;
pub const NI_NUMERICSERV: u32 = 2;
pub const NI_NOFQDN: u32 = 4;
pub const NI_NAMEREQD: u32 = 8;
pub const NI_DGRAM: u32 = 16;
pub const _NETINET_TCP_H: u32 = 1;
pub const TCP_NODELAY: u32 = 1;
pub const TCP_MAXSEG: u32 = 2;
pub const TCP_CORK: u32 = 3;
pub const TCP_KEEPIDLE: u32 = 4;
pub const TCP_KEEPINTVL: u32 = 5;
pub const TCP_KEEPCNT: u32 = 6;
pub const TCP_SYNCNT: u32 = 7;
pub const TCP_LINGER2: u32 = 8;
pub const TCP_DEFER_ACCEPT: u32 = 9;
pub const TCP_WINDOW_CLAMP: u32 = 10;
pub const TCP_INFO: u32 = 11;
pub const TCP_QUICKACK: u32 = 12;
pub const TCP_CONGESTION: u32 = 13;
pub const TCP_MD5SIG: u32 = 14;
pub const TCP_COOKIE_TRANSACTIONS: u32 = 15;
pub const TCP_THIN_LINEAR_TIMEOUTS: u32 = 16;
pub const TCP_THIN_DUPACK: u32 = 17;
pub const TCP_USER_TIMEOUT: u32 = 18;
pub const TCP_REPAIR: u32 = 19;
pub const TCP_REPAIR_QUEUE: u32 = 20;
pub const TCP_QUEUE_SEQ: u32 = 21;
pub const TCP_REPAIR_OPTIONS: u32 = 22;
pub const TCP_FASTOPEN: u32 = 23;
pub const TCP_TIMESTAMP: u32 = 24;
pub const TCP_NOTSENT_LOWAT: u32 = 25;
pub const TCP_CC_INFO: u32 = 26;
pub const TCP_SAVE_SYN: u32 = 27;
pub const TCP_SAVED_SYN: u32 = 28;
pub const TCP_REPAIR_WINDOW: u32 = 29;
pub const TCP_FASTOPEN_CONNECT: u32 = 30;
pub const TCP_ULP: u32 = 31;
pub const TCP_MD5SIG_EXT: u32 = 32;
pub const TCP_FASTOPEN_KEY: u32 = 33;
pub const TCP_FASTOPEN_NO_COOKIE: u32 = 34;
pub const TCP_ZEROCOPY_RECEIVE: u32 = 35;
pub const TCP_INQ: u32 = 36;
pub const TCP_CM_INQ: u32 = 36;
pub const TCP_TX_DELAY: u32 = 37;
pub const TCP_REPAIR_ON: u32 = 1;
pub const TCP_REPAIR_OFF: u32 = 0;
pub const TCP_REPAIR_OFF_NO_WP: i32 = -1;
pub const TH_FIN: u32 = 1;
pub const TH_SYN: u32 = 2;
pub const TH_RST: u32 = 4;
pub const TH_PUSH: u32 = 8;
pub const TH_ACK: u32 = 16;
pub const TH_URG: u32 = 32;
pub const TCPOPT_EOL: u32 = 0;
pub const TCPOPT_NOP: u32 = 1;
pub const TCPOPT_MAXSEG: u32 = 2;
pub const TCPOLEN_MAXSEG: u32 = 4;
pub const TCPOPT_WINDOW: u32 = 3;
pub const TCPOLEN_WINDOW: u32 = 3;
pub const TCPOPT_SACK_PERMITTED: u32 = 4;
pub const TCPOLEN_SACK_PERMITTED: u32 = 2;
pub const TCPOPT_SACK: u32 = 5;
pub const TCPOPT_TIMESTAMP: u32 = 8;
pub const TCPOLEN_TIMESTAMP: u32 = 10;
pub const TCPOLEN_TSTAMP_APPA: u32 = 12;
pub const TCPOPT_TSTAMP_HDR: u32 = 16844810;
pub const TCP_MSS: u32 = 512;
pub const TCP_MAXWIN: u32 = 65535;
pub const TCP_MAX_WINSHIFT: u32 = 14;
pub const SOL_TCP: u32 = 6;
pub const TCPI_OPT_TIMESTAMPS: u32 = 1;
pub const TCPI_OPT_SACK: u32 = 2;
pub const TCPI_OPT_WSCALE: u32 = 4;
pub const TCPI_OPT_ECN: u32 = 8;
pub const TCPI_OPT_ECN_SEEN: u32 = 16;
pub const TCPI_OPT_SYN_DATA: u32 = 32;
pub const TCP_MD5SIG_MAXKEYLEN: u32 = 80;
pub const TCP_MD5SIG_FLAG_PREFIX: u32 = 1;
pub const TCP_COOKIE_MIN: u32 = 8;
pub const TCP_COOKIE_MAX: u32 = 16;
pub const TCP_COOKIE_PAIR_SIZE: u32 = 32;
pub const TCP_COOKIE_IN_ALWAYS: u32 = 1;
pub const TCP_COOKIE_OUT_NEVER: u32 = 2;
pub const TCP_S_DATA_IN: u32 = 4;
pub const TCP_S_DATA_OUT: u32 = 8;
pub const TCP_MSS_DEFAULT: u32 = 536;
pub const TCP_MSS_DESIRED: u32 = 1220;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const INVALID_SOCKET: i32 = -1;
pub const PATH_SEP: &[u8; 2] = b"/\0";
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub const _ISupper: _bindgen_ty_1 = 256;
pub const _ISlower: _bindgen_ty_1 = 512;
pub const _ISalpha: _bindgen_ty_1 = 1024;
pub const _ISdigit: _bindgen_ty_1 = 2048;
pub const _ISxdigit: _bindgen_ty_1 = 4096;
pub const _ISspace: _bindgen_ty_1 = 8192;
pub const _ISprint: _bindgen_ty_1 = 16384;
pub const _ISgraph: _bindgen_ty_1 = 32768;
pub const _ISblank: _bindgen_ty_1 = 1;
pub const _IScntrl: _bindgen_ty_1 = 2;
pub const _ISpunct: _bindgen_ty_1 = 4;
pub const _ISalnum: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::std::mem::MaybeUninit<flock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
pub type mode_t = __mode_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_2 = 0;
pub const FP_INFINITE: _bindgen_ty_2 = 1;
pub const FP_ZERO: _bindgen_ty_2 = 2;
pub const FP_SUBNORMAL: _bindgen_ty_2 = 3;
pub const FP_NORMAL: _bindgen_ty_2 = 4;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::std::mem::MaybeUninit<itimerspec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
pub const _PC_LINK_MAX: _bindgen_ty_3 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_3 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_3 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_3 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_3 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_3 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_3 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_3 = 7;
pub const _PC_VDISABLE: _bindgen_ty_3 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_3 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_3 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_3 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_3 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_3 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_3 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_3 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_3 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_3 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_3 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_3 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_3 = 20;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_4 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_4 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_4 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_4 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_4 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_4 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_4 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_4 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_4 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_4 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_4 = 10;
pub const _SC_TIMERS: _bindgen_ty_4 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_4 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_4 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_4 = 14;
pub const _SC_FSYNC: _bindgen_ty_4 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_4 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_4 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_4 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_4 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_4 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_4 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_4 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_4 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_4 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_4 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_4 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_4 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_4 = 28;
pub const _SC_VERSION: _bindgen_ty_4 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_4 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_4 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_4 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_4 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_4 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_4 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_4 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_4 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_4 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_4 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_4 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_4 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_4 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_4 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_4 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_4 = 45;
pub const _SC_2_VERSION: _bindgen_ty_4 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_4 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_4 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_4 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_4 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_4 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_4 = 52;
pub const _SC_PII: _bindgen_ty_4 = 53;
pub const _SC_PII_XTI: _bindgen_ty_4 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_4 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_4 = 56;
pub const _SC_PII_OSI: _bindgen_ty_4 = 57;
pub const _SC_POLL: _bindgen_ty_4 = 58;
pub const _SC_SELECT: _bindgen_ty_4 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_4 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_4 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_4 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_4 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_4 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_4 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_4 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_4 = 66;
pub const _SC_THREADS: _bindgen_ty_4 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_4 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_4 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_4 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_4 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_4 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_4 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_4 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_4 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_4 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_4 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_4 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_4 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_4 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_4 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_4 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_4 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_4 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_4 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_4 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_4 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_4 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_4 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_4 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_4 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_4 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_4 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_4 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_4 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_4 = 96;
pub const _SC_2_UPE: _bindgen_ty_4 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_4 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_4 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_4 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_4 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_4 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_4 = 103;
pub const _SC_INT_MAX: _bindgen_ty_4 = 104;
pub const _SC_INT_MIN: _bindgen_ty_4 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_4 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_4 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_4 = 108;
pub const _SC_NZERO: _bindgen_ty_4 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_4 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_4 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_4 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_4 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_4 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_4 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_4 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_4 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_4 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_4 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_4 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_4 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_4 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_4 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_4 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_4 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_4 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_4 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_4 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_4 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_4 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_4 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_4 = 132;
pub const _SC_BARRIERS: _bindgen_ty_4 = 133;
pub const _SC_BASE: _bindgen_ty_4 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_4 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_4 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_4 = 137;
pub const _SC_CPUTIME: _bindgen_ty_4 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_4 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_4 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_4 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_4 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_4 = 143;
pub const _SC_FIFO: _bindgen_ty_4 = 144;
pub const _SC_PIPE: _bindgen_ty_4 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_4 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_4 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_4 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_4 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_4 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_4 = 151;
pub const _SC_NETWORKING: _bindgen_ty_4 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_4 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_4 = 154;
pub const _SC_REGEXP: _bindgen_ty_4 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_4 = 156;
pub const _SC_SHELL: _bindgen_ty_4 = 157;
pub const _SC_SIGNALS: _bindgen_ty_4 = 158;
pub const _SC_SPAWN: _bindgen_ty_4 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_4 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_4 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_4 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_4 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_4 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_4 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_4 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_4 = 167;
pub const _SC_2_PBS: _bindgen_ty_4 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_4 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_4 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_4 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_4 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_4 = 173;
pub const _SC_STREAMS: _bindgen_ty_4 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_4 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_4 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_4 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_4 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_4 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_4 = 180;
pub const _SC_TRACE: _bindgen_ty_4 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_4 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_4 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_4 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_4 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_4 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_4 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_4 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_4 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_4 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_4 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_4 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_4 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_4 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_4 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_4 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_4 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_4 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_4 = 199;
pub const _SC_IPV6: _bindgen_ty_4 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_4 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_4 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_4 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_4 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_4 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_4 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_4 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_4 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_4 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_4 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_4 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_4 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_4 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_4 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_4 = 250;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_5 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_5 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_5 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_5 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_5 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_5 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_5 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_5 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_5 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_5 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_5 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_5 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_5 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_5 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_5 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_5 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_5 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_5 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_5 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_5 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_5 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_5 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_5 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_5 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_5 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_5 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_5 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_5 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_5 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_5 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_5 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_5 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_5 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_5 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_5 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_5 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_5 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_5 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_5 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_5 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_5 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_5 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_5 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_5 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_5 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_5 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_5 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_5 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_5 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_5 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_5 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_5 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_5 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_5 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_5 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_5 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_5 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_5 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_5 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_5 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_5 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_5 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_5 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_5 = 1149;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    const UNINIT: ::std::mem::MaybeUninit<timezone> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_minuteswest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_dsttime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    const UNINIT: ::std::mem::MaybeUninit<itimerval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TableList {
    _unused: [u8; 0],
}
pub type HashFunction = ::std::option::Option<
    unsafe extern "C" fn(key: *const ::std::os::raw::c_void, len: usize, seed: u32) -> u32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TableFunctions {
    pub deinitializer:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub hash: HashFunction,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub ref_: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub deref: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_TableFunctions() {
    const UNINIT: ::std::mem::MaybeUninit<TableFunctions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TableFunctions>(),
        40usize,
        concat!("Size of: ", stringify!(TableFunctions))
    );
    assert_eq!(
        ::std::mem::align_of::<TableFunctions>(),
        8usize,
        concat!("Alignment of ", stringify!(TableFunctions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deinitializer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunctions),
            "::",
            stringify!(deinitializer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunctions),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).equal) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunctions),
            "::",
            stringify!(equal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunctions),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deref) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TableFunctions),
            "::",
            stringify!(deref)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Table {
    pub table: *mut TableList,
    pub tableSize: usize,
    pub size: usize,
    pub seed: u32,
    pub fn_: TableFunctions,
}
#[test]
fn bindgen_test_layout_Table() {
    const UNINIT: ::std::mem::MaybeUninit<Table> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Table>(),
        72usize,
        concat!("Size of: ", stringify!(Table))
    );
    assert_eq!(
        ::std::mem::align_of::<Table>(),
        8usize,
        concat!("Alignment of ", stringify!(Table))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Table),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tableSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Table),
            "::",
            stringify!(tableSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Table),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seed) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Table),
            "::",
            stringify!(seed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fn_) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Table),
            "::",
            stringify!(fn_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TableIterator {
    pub bucket: usize,
    pub entry: usize,
}
#[test]
fn bindgen_test_layout_TableIterator() {
    const UNINIT: ::std::mem::MaybeUninit<TableIterator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TableIterator>(),
        16usize,
        concat!("Size of: ", stringify!(TableIterator))
    );
    assert_eq!(
        ::std::mem::align_of::<TableIterator>(),
        8usize,
        concat!("Alignment of ", stringify!(TableIterator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bucket) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TableIterator),
            "::",
            stringify!(bucket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TableIterator),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Configuration {
    pub sections: Table,
    pub root: Table,
}
#[test]
fn bindgen_test_layout_Configuration() {
    const UNINIT: ::std::mem::MaybeUninit<Configuration> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Configuration>(),
        144usize,
        concat!("Size of: ", stringify!(Configuration))
    );
    assert_eq!(
        ::std::mem::align_of::<Configuration>(),
        8usize,
        concat!("Alignment of ", stringify!(Configuration))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sections) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Configuration),
            "::",
            stringify!(sections)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Configuration),
            "::",
            stringify!(root)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mCoreConfig {
    pub configTable: Configuration,
    pub defaultsTable: Configuration,
    pub overridesTable: Configuration,
    pub port: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mCoreConfig() {
    const UNINIT: ::std::mem::MaybeUninit<mCoreConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mCoreConfig>(),
        440usize,
        concat!("Size of: ", stringify!(mCoreConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<mCoreConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(mCoreConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configTable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreConfig),
            "::",
            stringify!(configTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultsTable) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreConfig),
            "::",
            stringify!(defaultsTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overridesTable) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreConfig),
            "::",
            stringify!(overridesTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreConfig),
            "::",
            stringify!(port)
        )
    );
}
pub const mCoreConfigLevel_mCONFIG_LEVEL_DEFAULT: mCoreConfigLevel = 0;
pub const mCoreConfigLevel_mCONFIG_LEVEL_CUSTOM: mCoreConfigLevel = 1;
pub const mCoreConfigLevel_mCONFIG_LEVEL_OVERRIDE: mCoreConfigLevel = 2;
pub type mCoreConfigLevel = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mCoreOptions {
    pub bios: *mut ::std::os::raw::c_char,
    pub skipBios: bool,
    pub useBios: bool,
    pub logLevel: ::std::os::raw::c_int,
    pub frameskip: ::std::os::raw::c_int,
    pub rewindEnable: bool,
    pub rewindBufferCapacity: ::std::os::raw::c_int,
    pub rewindBufferInterval: ::std::os::raw::c_int,
    pub fpsTarget: f32,
    pub audioBuffers: usize,
    pub sampleRate: ::std::os::raw::c_uint,
    pub fullscreen: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub lockAspectRatio: bool,
    pub lockIntegerScaling: bool,
    pub interframeBlending: bool,
    pub resampleVideo: bool,
    pub suspendScreensaver: bool,
    pub shader: *mut ::std::os::raw::c_char,
    pub savegamePath: *mut ::std::os::raw::c_char,
    pub savestatePath: *mut ::std::os::raw::c_char,
    pub screenshotPath: *mut ::std::os::raw::c_char,
    pub patchPath: *mut ::std::os::raw::c_char,
    pub cheatsPath: *mut ::std::os::raw::c_char,
    pub volume: ::std::os::raw::c_int,
    pub mute: bool,
    pub videoSync: bool,
    pub audioSync: bool,
}
#[test]
fn bindgen_test_layout_mCoreOptions() {
    const UNINIT: ::std::mem::MaybeUninit<mCoreOptions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mCoreOptions>(),
        128usize,
        concat!("Size of: ", stringify!(mCoreOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<mCoreOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(mCoreOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bios) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(bios)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skipBios) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(skipBios)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useBios) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(useBios)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logLevel) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(logLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameskip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(frameskip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rewindEnable) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(rewindEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rewindBufferCapacity) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(rewindBufferCapacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rewindBufferInterval) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(rewindBufferInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpsTarget) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(fpsTarget)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audioBuffers) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(audioBuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fullscreen) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(fullscreen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lockAspectRatio) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(lockAspectRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lockIntegerScaling) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(lockIntegerScaling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interframeBlending) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(interframeBlending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resampleVideo) as usize - ptr as usize },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(resampleVideo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suspendScreensaver) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(suspendScreensaver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shader) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(shader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).savegamePath) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(savegamePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).savestatePath) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(savestatePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).screenshotPath) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(screenshotPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).patchPath) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(patchPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cheatsPath) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(cheatsPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).volume) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(volume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mute) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(mute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).videoSync) as usize - ptr as usize },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(videoSync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audioSync) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreOptions),
            "::",
            stringify!(audioSync)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mDirectorySet {
    pub baseName: [::std::os::raw::c_char; 4096usize],
    pub base: *mut VDir,
    pub archive: *mut VDir,
    pub save: *mut VDir,
    pub patch: *mut VDir,
    pub state: *mut VDir,
    pub screenshot: *mut VDir,
    pub cheats: *mut VDir,
}
#[test]
fn bindgen_test_layout_mDirectorySet() {
    const UNINIT: ::std::mem::MaybeUninit<mDirectorySet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mDirectorySet>(),
        4152usize,
        concat!("Size of: ", stringify!(mDirectorySet))
    );
    assert_eq!(
        ::std::mem::align_of::<mDirectorySet>(),
        8usize,
        concat!("Alignment of ", stringify!(mDirectorySet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mDirectorySet),
            "::",
            stringify!(baseName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(mDirectorySet),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).archive) as usize - ptr as usize },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(mDirectorySet),
            "::",
            stringify!(archive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save) as usize - ptr as usize },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(mDirectorySet),
            "::",
            stringify!(save)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).patch) as usize - ptr as usize },
        4120usize,
        concat!(
            "Offset of field: ",
            stringify!(mDirectorySet),
            "::",
            stringify!(patch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        4128usize,
        concat!(
            "Offset of field: ",
            stringify!(mDirectorySet),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).screenshot) as usize - ptr as usize },
        4136usize,
        concat!(
            "Offset of field: ",
            stringify!(mDirectorySet),
            "::",
            stringify!(screenshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cheats) as usize - ptr as usize },
        4144usize,
        concat!(
            "Offset of field: ",
            stringify!(mDirectorySet),
            "::",
            stringify!(cheats)
        )
    );
}
pub const mInputHat_M_INPUT_HAT_NEUTRAL: mInputHat = 0;
pub const mInputHat_M_INPUT_HAT_UP: mInputHat = 1;
pub const mInputHat_M_INPUT_HAT_RIGHT: mInputHat = 2;
pub const mInputHat_M_INPUT_HAT_DOWN: mInputHat = 4;
pub const mInputHat_M_INPUT_HAT_LEFT: mInputHat = 8;
pub type mInputHat = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mInputHatBindings {
    pub up: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
    pub down: ::std::os::raw::c_int,
    pub left: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mInputHatBindings() {
    const UNINIT: ::std::mem::MaybeUninit<mInputHatBindings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mInputHatBindings>(),
        16usize,
        concat!("Size of: ", stringify!(mInputHatBindings))
    );
    assert_eq!(
        ::std::mem::align_of::<mInputHatBindings>(),
        4usize,
        concat!("Alignment of ", stringify!(mInputHatBindings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).up) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputHatBindings),
            "::",
            stringify!(up)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputHatBindings),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).down) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputHatBindings),
            "::",
            stringify!(down)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputHatBindings),
            "::",
            stringify!(left)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mInputPlatformInfo {
    pub platformName: *const ::std::os::raw::c_char,
    pub keyId: *mut *const ::std::os::raw::c_char,
    pub nKeys: usize,
    pub hat: mInputHatBindings,
}
#[test]
fn bindgen_test_layout_mInputPlatformInfo() {
    const UNINIT: ::std::mem::MaybeUninit<mInputPlatformInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mInputPlatformInfo>(),
        40usize,
        concat!("Size of: ", stringify!(mInputPlatformInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<mInputPlatformInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(mInputPlatformInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).platformName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputPlatformInfo),
            "::",
            stringify!(platformName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputPlatformInfo),
            "::",
            stringify!(keyId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nKeys) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputPlatformInfo),
            "::",
            stringify!(nKeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hat) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputPlatformInfo),
            "::",
            stringify!(hat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mInputMap {
    pub maps: *mut mInputMapImpl,
    pub numMaps: usize,
    pub info: *const mInputPlatformInfo,
}
#[test]
fn bindgen_test_layout_mInputMap() {
    const UNINIT: ::std::mem::MaybeUninit<mInputMap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mInputMap>(),
        24usize,
        concat!("Size of: ", stringify!(mInputMap))
    );
    assert_eq!(
        ::std::mem::align_of::<mInputMap>(),
        8usize,
        concat!("Alignment of ", stringify!(mInputMap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maps) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputMap),
            "::",
            stringify!(maps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numMaps) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputMap),
            "::",
            stringify!(numMaps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputMap),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mInputAxis {
    pub highDirection: ::std::os::raw::c_int,
    pub lowDirection: ::std::os::raw::c_int,
    pub deadHigh: i32,
    pub deadLow: i32,
}
#[test]
fn bindgen_test_layout_mInputAxis() {
    const UNINIT: ::std::mem::MaybeUninit<mInputAxis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mInputAxis>(),
        16usize,
        concat!("Size of: ", stringify!(mInputAxis))
    );
    assert_eq!(
        ::std::mem::align_of::<mInputAxis>(),
        4usize,
        concat!("Alignment of ", stringify!(mInputAxis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).highDirection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputAxis),
            "::",
            stringify!(highDirection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lowDirection) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputAxis),
            "::",
            stringify!(lowDirection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deadHigh) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputAxis),
            "::",
            stringify!(deadHigh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deadLow) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mInputAxis),
            "::",
            stringify!(deadLow)
        )
    );
}
pub type color_t = u32;
pub const mColorFormat_mCOLOR_XBGR8: mColorFormat = 1;
pub const mColorFormat_mCOLOR_XRGB8: mColorFormat = 2;
pub const mColorFormat_mCOLOR_BGRX8: mColorFormat = 4;
pub const mColorFormat_mCOLOR_RGBX8: mColorFormat = 8;
pub const mColorFormat_mCOLOR_ABGR8: mColorFormat = 16;
pub const mColorFormat_mCOLOR_ARGB8: mColorFormat = 32;
pub const mColorFormat_mCOLOR_BGRA8: mColorFormat = 64;
pub const mColorFormat_mCOLOR_RGBA8: mColorFormat = 128;
pub const mColorFormat_mCOLOR_RGB5: mColorFormat = 256;
pub const mColorFormat_mCOLOR_BGR5: mColorFormat = 512;
pub const mColorFormat_mCOLOR_RGB565: mColorFormat = 1024;
pub const mColorFormat_mCOLOR_BGR565: mColorFormat = 2048;
pub const mColorFormat_mCOLOR_ARGB5: mColorFormat = 4096;
pub const mColorFormat_mCOLOR_ABGR5: mColorFormat = 8192;
pub const mColorFormat_mCOLOR_RGBA5: mColorFormat = 16384;
pub const mColorFormat_mCOLOR_BGRA5: mColorFormat = 32768;
pub const mColorFormat_mCOLOR_RGB8: mColorFormat = 65536;
pub const mColorFormat_mCOLOR_BGR8: mColorFormat = 131072;
pub const mColorFormat_mCOLOR_L8: mColorFormat = 262144;
pub const mColorFormat_mCOLOR_PAL8: mColorFormat = 524288;
pub const mColorFormat_mCOLOR_ANY: mColorFormat = -1;
pub type mColorFormat = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mImage {
    pub data: *mut ::std::os::raw::c_void,
    pub palette: *mut u32,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub stride: ::std::os::raw::c_uint,
    pub depth: ::std::os::raw::c_uint,
    pub palSize: ::std::os::raw::c_uint,
    pub format: mColorFormat,
}
#[test]
fn bindgen_test_layout_mImage() {
    const UNINIT: ::std::mem::MaybeUninit<mImage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mImage>(),
        40usize,
        concat!("Size of: ", stringify!(mImage))
    );
    assert_eq!(
        ::std::mem::align_of::<mImage>(),
        8usize,
        concat!("Alignment of ", stringify!(mImage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mImage),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).palette) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mImage),
            "::",
            stringify!(palette)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mImage),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mImage),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mImage),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mImage),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).palSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mImage),
            "::",
            stringify!(palSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mImage),
            "::",
            stringify!(format)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mPainter {
    pub backing: *mut mImage,
    pub blend: bool,
    pub fill: bool,
    pub strokeWidth: ::std::os::raw::c_uint,
    pub strokeColor: u32,
    pub fillColor: u32,
}
#[test]
fn bindgen_test_layout_mPainter() {
    const UNINIT: ::std::mem::MaybeUninit<mPainter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mPainter>(),
        24usize,
        concat!("Size of: ", stringify!(mPainter))
    );
    assert_eq!(
        ::std::mem::align_of::<mPainter>(),
        8usize,
        concat!("Alignment of ", stringify!(mPainter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backing) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mPainter),
            "::",
            stringify!(backing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blend) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mPainter),
            "::",
            stringify!(blend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fill) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(mPainter),
            "::",
            stringify!(fill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strokeWidth) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mPainter),
            "::",
            stringify!(strokeWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strokeColor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mPainter),
            "::",
            stringify!(strokeColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fillColor) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mPainter),
            "::",
            stringify!(fillColor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IntList {
    pub vector: *mut ::std::os::raw::c_int,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_IntList() {
    const UNINIT: ::std::mem::MaybeUninit<IntList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IntList>(),
        24usize,
        concat!("Size of: ", stringify!(IntList))
    );
    assert_eq!(
        ::std::mem::align_of::<IntList>(),
        8usize,
        concat!("Alignment of ", stringify!(IntList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IntList),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IntList),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IntList),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SInt8List {
    pub vector: *mut i8,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_SInt8List() {
    const UNINIT: ::std::mem::MaybeUninit<SInt8List> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SInt8List>(),
        24usize,
        concat!("Size of: ", stringify!(SInt8List))
    );
    assert_eq!(
        ::std::mem::align_of::<SInt8List>(),
        8usize,
        concat!("Alignment of ", stringify!(SInt8List))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SInt8List),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SInt8List),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SInt8List),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SInt16List {
    pub vector: *mut i16,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_SInt16List() {
    const UNINIT: ::std::mem::MaybeUninit<SInt16List> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SInt16List>(),
        24usize,
        concat!("Size of: ", stringify!(SInt16List))
    );
    assert_eq!(
        ::std::mem::align_of::<SInt16List>(),
        8usize,
        concat!("Alignment of ", stringify!(SInt16List))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SInt16List),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SInt16List),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SInt16List),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SInt32List {
    pub vector: *mut i32,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_SInt32List() {
    const UNINIT: ::std::mem::MaybeUninit<SInt32List> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SInt32List>(),
        24usize,
        concat!("Size of: ", stringify!(SInt32List))
    );
    assert_eq!(
        ::std::mem::align_of::<SInt32List>(),
        8usize,
        concat!("Alignment of ", stringify!(SInt32List))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SInt32List),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SInt32List),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SInt32List),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIntPtrList {
    pub vector: *mut isize,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_SIntPtrList() {
    const UNINIT: ::std::mem::MaybeUninit<SIntPtrList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SIntPtrList>(),
        24usize,
        concat!("Size of: ", stringify!(SIntPtrList))
    );
    assert_eq!(
        ::std::mem::align_of::<SIntPtrList>(),
        8usize,
        concat!("Alignment of ", stringify!(SIntPtrList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SIntPtrList),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SIntPtrList),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIntPtrList),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UInt8List {
    pub vector: *mut u8,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_UInt8List() {
    const UNINIT: ::std::mem::MaybeUninit<UInt8List> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UInt8List>(),
        24usize,
        concat!("Size of: ", stringify!(UInt8List))
    );
    assert_eq!(
        ::std::mem::align_of::<UInt8List>(),
        8usize,
        concat!("Alignment of ", stringify!(UInt8List))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt8List),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt8List),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt8List),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UInt16List {
    pub vector: *mut u16,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_UInt16List() {
    const UNINIT: ::std::mem::MaybeUninit<UInt16List> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UInt16List>(),
        24usize,
        concat!("Size of: ", stringify!(UInt16List))
    );
    assert_eq!(
        ::std::mem::align_of::<UInt16List>(),
        8usize,
        concat!("Alignment of ", stringify!(UInt16List))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt16List),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt16List),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt16List),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UInt32List {
    pub vector: *mut u32,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_UInt32List() {
    const UNINIT: ::std::mem::MaybeUninit<UInt32List> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UInt32List>(),
        24usize,
        concat!("Size of: ", stringify!(UInt32List))
    );
    assert_eq!(
        ::std::mem::align_of::<UInt32List>(),
        8usize,
        concat!("Alignment of ", stringify!(UInt32List))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt32List),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt32List),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UInt32List),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UIntPtrList {
    pub vector: *mut usize,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_UIntPtrList() {
    const UNINIT: ::std::mem::MaybeUninit<UIntPtrList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UIntPtrList>(),
        24usize,
        concat!("Size of: ", stringify!(UIntPtrList))
    );
    assert_eq!(
        ::std::mem::align_of::<UIntPtrList>(),
        8usize,
        concat!("Alignment of ", stringify!(UIntPtrList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UIntPtrList),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UIntPtrList),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UIntPtrList),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StringList {
    pub vector: *mut *mut ::std::os::raw::c_char,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_StringList() {
    const UNINIT: ::std::mem::MaybeUninit<StringList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StringList>(),
        24usize,
        concat!("Size of: ", stringify!(StringList))
    );
    assert_eq!(
        ::std::mem::align_of::<StringList>(),
        8usize,
        concat!("Alignment of ", stringify!(StringList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StringList),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StringList),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StringList),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mStateExtdataItem {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blip_t {
    _unused: [u8; 0],
}
pub const mCoreFeature_mCORE_FEATURE_OPENGL: mCoreFeature = 1;
pub type mCoreFeature = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mCoreCallbacks {
    pub context: *mut ::std::os::raw::c_void,
    pub videoFrameStarted:
        ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>,
    pub videoFrameEnded:
        ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>,
    pub coreCrashed:
        ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>,
    pub sleep: ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>,
    pub shutdown: ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>,
    pub keysRead: ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>,
    pub savedataUpdated:
        ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>,
    pub alarm: ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_mCoreCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<mCoreCallbacks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mCoreCallbacks>(),
        72usize,
        concat!("Size of: ", stringify!(mCoreCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<mCoreCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(mCoreCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreCallbacks),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).videoFrameStarted) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreCallbacks),
            "::",
            stringify!(videoFrameStarted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).videoFrameEnded) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreCallbacks),
            "::",
            stringify!(videoFrameEnded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coreCrashed) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreCallbacks),
            "::",
            stringify!(coreCrashed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sleep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreCallbacks),
            "::",
            stringify!(sleep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shutdown) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreCallbacks),
            "::",
            stringify!(shutdown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keysRead) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreCallbacks),
            "::",
            stringify!(keysRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).savedataUpdated) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreCallbacks),
            "::",
            stringify!(savedataUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alarm) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreCallbacks),
            "::",
            stringify!(alarm)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mCoreCallbacksList {
    pub vector: *mut mCoreCallbacks,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_mCoreCallbacksList() {
    const UNINIT: ::std::mem::MaybeUninit<mCoreCallbacksList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mCoreCallbacksList>(),
        24usize,
        concat!("Size of: ", stringify!(mCoreCallbacksList))
    );
    assert_eq!(
        ::std::mem::align_of::<mCoreCallbacksList>(),
        8usize,
        concat!("Alignment of ", stringify!(mCoreCallbacksList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreCallbacksList),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreCallbacksList),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreCallbacksList),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mAVStream {
    pub videoDimensionsChanged: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mAVStream,
            width: ::std::os::raw::c_uint,
            height: ::std::os::raw::c_uint,
        ),
    >,
    pub audioRateChanged: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mAVStream, rate: ::std::os::raw::c_uint),
    >,
    pub postVideoFrame: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mAVStream, buffer: *const color_t, stride: usize),
    >,
    pub postAudioFrame:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mAVStream, left: i16, right: i16)>,
    pub postAudioBuffer: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mAVStream, left: *mut blip_t, right: *mut blip_t),
    >,
}
#[test]
fn bindgen_test_layout_mAVStream() {
    const UNINIT: ::std::mem::MaybeUninit<mAVStream> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mAVStream>(),
        40usize,
        concat!("Size of: ", stringify!(mAVStream))
    );
    assert_eq!(
        ::std::mem::align_of::<mAVStream>(),
        8usize,
        concat!("Alignment of ", stringify!(mAVStream))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).videoDimensionsChanged) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mAVStream),
            "::",
            stringify!(videoDimensionsChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).audioRateChanged) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mAVStream),
            "::",
            stringify!(audioRateChanged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).postVideoFrame) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mAVStream),
            "::",
            stringify!(postVideoFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).postAudioFrame) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mAVStream),
            "::",
            stringify!(postAudioFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).postAudioBuffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mAVStream),
            "::",
            stringify!(postAudioBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mStereoSample {
    pub left: i16,
    pub right: i16,
}
#[test]
fn bindgen_test_layout_mStereoSample() {
    const UNINIT: ::std::mem::MaybeUninit<mStereoSample> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mStereoSample>(),
        4usize,
        concat!("Size of: ", stringify!(mStereoSample))
    );
    assert_eq!(
        ::std::mem::align_of::<mStereoSample>(),
        2usize,
        concat!("Alignment of ", stringify!(mStereoSample))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mStereoSample),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mStereoSample),
            "::",
            stringify!(right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mKeyCallback {
    pub readKeys: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mKeyCallback) -> u16>,
    pub requireOpposingDirections: bool,
}
#[test]
fn bindgen_test_layout_mKeyCallback() {
    const UNINIT: ::std::mem::MaybeUninit<mKeyCallback> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mKeyCallback>(),
        16usize,
        concat!("Size of: ", stringify!(mKeyCallback))
    );
    assert_eq!(
        ::std::mem::align_of::<mKeyCallback>(),
        8usize,
        concat!("Alignment of ", stringify!(mKeyCallback))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readKeys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mKeyCallback),
            "::",
            stringify!(readKeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requireOpposingDirections) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mKeyCallback),
            "::",
            stringify!(requireOpposingDirections)
        )
    );
}
pub const mPeripheral_mPERIPH_ROTATION: mPeripheral = 1;
pub const mPeripheral_mPERIPH_RUMBLE: mPeripheral = 2;
pub const mPeripheral_mPERIPH_IMAGE_SOURCE: mPeripheral = 3;
pub const mPeripheral_mPERIPH_CUSTOM: mPeripheral = 4096;
pub type mPeripheral = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mRotationSource {
    pub sample: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mRotationSource)>,
    pub readTiltX: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mRotationSource) -> i32>,
    pub readTiltY: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mRotationSource) -> i32>,
    pub readGyroZ: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mRotationSource) -> i32>,
}
#[test]
fn bindgen_test_layout_mRotationSource() {
    const UNINIT: ::std::mem::MaybeUninit<mRotationSource> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mRotationSource>(),
        32usize,
        concat!("Size of: ", stringify!(mRotationSource))
    );
    assert_eq!(
        ::std::mem::align_of::<mRotationSource>(),
        8usize,
        concat!("Alignment of ", stringify!(mRotationSource))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sample) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mRotationSource),
            "::",
            stringify!(sample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readTiltX) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mRotationSource),
            "::",
            stringify!(readTiltX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readTiltY) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mRotationSource),
            "::",
            stringify!(readTiltY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readGyroZ) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mRotationSource),
            "::",
            stringify!(readGyroZ)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mRTCSource {
    pub sample: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mRTCSource)>,
    pub unixTime: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mRTCSource) -> time_t>,
    pub serialize: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mRTCSource, arg2: *mut mStateExtdataItem),
    >,
    pub deserialize: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mRTCSource, arg2: *const mStateExtdataItem) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_mRTCSource() {
    const UNINIT: ::std::mem::MaybeUninit<mRTCSource> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mRTCSource>(),
        32usize,
        concat!("Size of: ", stringify!(mRTCSource))
    );
    assert_eq!(
        ::std::mem::align_of::<mRTCSource>(),
        8usize,
        concat!("Alignment of ", stringify!(mRTCSource))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sample) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mRTCSource),
            "::",
            stringify!(sample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unixTime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mRTCSource),
            "::",
            stringify!(unixTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serialize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mRTCSource),
            "::",
            stringify!(serialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deserialize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mRTCSource),
            "::",
            stringify!(deserialize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mImageSource {
    pub startRequestImage: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mImageSource,
            w: ::std::os::raw::c_uint,
            h: ::std::os::raw::c_uint,
            colorFormats: ::std::os::raw::c_int,
        ),
    >,
    pub stopRequestImage: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mImageSource)>,
    pub requestImage: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mImageSource,
            buffer: *mut *const ::std::os::raw::c_void,
            stride: *mut usize,
            colorFormat: *mut mColorFormat,
        ),
    >,
}
#[test]
fn bindgen_test_layout_mImageSource() {
    const UNINIT: ::std::mem::MaybeUninit<mImageSource> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mImageSource>(),
        24usize,
        concat!("Size of: ", stringify!(mImageSource))
    );
    assert_eq!(
        ::std::mem::align_of::<mImageSource>(),
        8usize,
        concat!("Alignment of ", stringify!(mImageSource))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startRequestImage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mImageSource),
            "::",
            stringify!(startRequestImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stopRequestImage) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mImageSource),
            "::",
            stringify!(stopRequestImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requestImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mImageSource),
            "::",
            stringify!(requestImage)
        )
    );
}
pub const mRTCGenericType_RTC_NO_OVERRIDE: mRTCGenericType = 0;
pub const mRTCGenericType_RTC_FIXED: mRTCGenericType = 1;
pub const mRTCGenericType_RTC_FAKE_EPOCH: mRTCGenericType = 2;
pub const mRTCGenericType_RTC_WALLCLOCK_OFFSET: mRTCGenericType = 3;
pub const mRTCGenericType_RTC_CUSTOM_START: mRTCGenericType = 4096;
pub type mRTCGenericType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mRTCGenericSource {
    pub d: mRTCSource,
    pub p: *mut mCore,
    pub override_: mRTCGenericType,
    pub value: i64,
    pub custom: *mut mRTCSource,
}
#[test]
fn bindgen_test_layout_mRTCGenericSource() {
    const UNINIT: ::std::mem::MaybeUninit<mRTCGenericSource> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mRTCGenericSource>(),
        64usize,
        concat!("Size of: ", stringify!(mRTCGenericSource))
    );
    assert_eq!(
        ::std::mem::align_of::<mRTCGenericSource>(),
        8usize,
        concat!("Alignment of ", stringify!(mRTCGenericSource))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mRTCGenericSource),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mRTCGenericSource),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).override_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mRTCGenericSource),
            "::",
            stringify!(override_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mRTCGenericSource),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mRTCGenericSource),
            "::",
            stringify!(custom)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mRTCGenericState {
    pub type_: i32,
    pub padding: i32,
    pub value: i64,
}
#[test]
fn bindgen_test_layout_mRTCGenericState() {
    const UNINIT: ::std::mem::MaybeUninit<mRTCGenericState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mRTCGenericState>(),
        16usize,
        concat!("Size of: ", stringify!(mRTCGenericState))
    );
    assert_eq!(
        ::std::mem::align_of::<mRTCGenericState>(),
        8usize,
        concat!("Alignment of ", stringify!(mRTCGenericState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mRTCGenericState),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mRTCGenericState),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mRTCGenericState),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mRumble {
    pub setRumble: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mRumble, enable: ::std::os::raw::c_int),
    >,
}
#[test]
fn bindgen_test_layout_mRumble() {
    const UNINIT: ::std::mem::MaybeUninit<mRumble> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mRumble>(),
        8usize,
        concat!("Size of: ", stringify!(mRumble))
    );
    assert_eq!(
        ::std::mem::align_of::<mRumble>(),
        8usize,
        concat!("Alignment of ", stringify!(mRumble))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setRumble) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mRumble),
            "::",
            stringify!(setRumble)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mCoreChannelInfo {
    pub id: usize,
    pub internalName: *const ::std::os::raw::c_char,
    pub visibleName: *const ::std::os::raw::c_char,
    pub visibleType: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mCoreChannelInfo() {
    const UNINIT: ::std::mem::MaybeUninit<mCoreChannelInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mCoreChannelInfo>(),
        32usize,
        concat!("Size of: ", stringify!(mCoreChannelInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<mCoreChannelInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(mCoreChannelInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreChannelInfo),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreChannelInfo),
            "::",
            stringify!(internalName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visibleName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreChannelInfo),
            "::",
            stringify!(visibleName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visibleType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreChannelInfo),
            "::",
            stringify!(visibleType)
        )
    );
}
pub const mCoreMemoryBlockFlags_mCORE_MEMORY_READ: mCoreMemoryBlockFlags = 1;
pub const mCoreMemoryBlockFlags_mCORE_MEMORY_WRITE: mCoreMemoryBlockFlags = 2;
pub const mCoreMemoryBlockFlags_mCORE_MEMORY_RW: mCoreMemoryBlockFlags = 3;
pub const mCoreMemoryBlockFlags_mCORE_MEMORY_WORM: mCoreMemoryBlockFlags = 4;
pub const mCoreMemoryBlockFlags_mCORE_MEMORY_MAPPED: mCoreMemoryBlockFlags = 16;
pub const mCoreMemoryBlockFlags_mCORE_MEMORY_VIRTUAL: mCoreMemoryBlockFlags = 32;
pub type mCoreMemoryBlockFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mCoreMemoryBlock {
    pub id: usize,
    pub internalName: *const ::std::os::raw::c_char,
    pub shortName: *const ::std::os::raw::c_char,
    pub longName: *const ::std::os::raw::c_char,
    pub start: u32,
    pub end: u32,
    pub size: u32,
    pub flags: u32,
    pub maxSegment: u16,
    pub segmentStart: u32,
}
#[test]
fn bindgen_test_layout_mCoreMemoryBlock() {
    const UNINIT: ::std::mem::MaybeUninit<mCoreMemoryBlock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mCoreMemoryBlock>(),
        56usize,
        concat!("Size of: ", stringify!(mCoreMemoryBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<mCoreMemoryBlock>(),
        8usize,
        concat!("Alignment of ", stringify!(mCoreMemoryBlock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreMemoryBlock),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreMemoryBlock),
            "::",
            stringify!(internalName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreMemoryBlock),
            "::",
            stringify!(shortName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).longName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreMemoryBlock),
            "::",
            stringify!(longName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreMemoryBlock),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreMemoryBlock),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreMemoryBlock),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreMemoryBlock),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSegment) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreMemoryBlock),
            "::",
            stringify!(maxSegment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segmentStart) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreMemoryBlock),
            "::",
            stringify!(segmentStart)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mCoreScreenRegion {
    pub id: usize,
    pub description: *const ::std::os::raw::c_char,
    pub x: i16,
    pub y: i16,
    pub w: i16,
    pub h: i16,
}
#[test]
fn bindgen_test_layout_mCoreScreenRegion() {
    const UNINIT: ::std::mem::MaybeUninit<mCoreScreenRegion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mCoreScreenRegion>(),
        24usize,
        concat!("Size of: ", stringify!(mCoreScreenRegion))
    );
    assert_eq!(
        ::std::mem::align_of::<mCoreScreenRegion>(),
        8usize,
        concat!("Alignment of ", stringify!(mCoreScreenRegion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreScreenRegion),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreScreenRegion),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreScreenRegion),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreScreenRegion),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreScreenRegion),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreScreenRegion),
            "::",
            stringify!(h)
        )
    );
}
pub const mCoreRegisterType_mCORE_REGISTER_GPR: mCoreRegisterType = 0;
pub const mCoreRegisterType_mCORE_REGISTER_FPR: mCoreRegisterType = 1;
pub const mCoreRegisterType_mCORE_REGISTER_FLAGS: mCoreRegisterType = 2;
pub const mCoreRegisterType_mCORE_REGISTER_SIMD: mCoreRegisterType = 3;
pub type mCoreRegisterType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mCoreRegisterInfo {
    pub name: *const ::std::os::raw::c_char,
    pub aliases: *mut *const ::std::os::raw::c_char,
    pub width: ::std::os::raw::c_uint,
    pub mask: u32,
    pub type_: mCoreRegisterType,
}
#[test]
fn bindgen_test_layout_mCoreRegisterInfo() {
    const UNINIT: ::std::mem::MaybeUninit<mCoreRegisterInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mCoreRegisterInfo>(),
        32usize,
        concat!("Size of: ", stringify!(mCoreRegisterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<mCoreRegisterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(mCoreRegisterInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreRegisterInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aliases) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreRegisterInfo),
            "::",
            stringify!(aliases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreRegisterInfo),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreRegisterInfo),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mCoreRegisterInfo),
            "::",
            stringify!(type_)
        )
    );
}
pub const mPlatform_mPLATFORM_NONE: mPlatform = -1;
pub const mPlatform_mPLATFORM_GBA: mPlatform = 0;
pub const mPlatform_mPLATFORM_GB: mPlatform = 1;
pub type mPlatform = ::std::os::raw::c_int;
pub const mCoreChecksumType_mCHECKSUM_CRC32: mCoreChecksumType = 0;
pub type mCoreChecksumType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mCoreSync {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mDebuggerSymbols {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mStateExtdata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mVideoLogContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mCore {
    pub cpu: *mut ::std::os::raw::c_void,
    pub board: *mut ::std::os::raw::c_void,
    pub timing: *mut mTiming,
    pub debugger: *mut mDebugger,
    pub symbolTable: *mut mDebuggerSymbols,
    pub videoLogger: *mut mVideoLogger,
    pub dirs: mDirectorySet,
    pub inputMap: mInputMap,
    pub config: mCoreConfig,
    pub opts: mCoreOptions,
    pub rtc: mRTCGenericSource,
    pub init: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore) -> bool>,
    pub deinit: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore)>,
    pub platform: ::std::option::Option<unsafe extern "C" fn(arg1: *const mCore) -> mPlatform>,
    pub supportsFeature:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const mCore, arg2: mCoreFeature) -> bool>,
    pub setSync:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, arg2: *mut mCoreSync)>,
    pub loadConfig:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, arg2: *const mCoreConfig)>,
    pub reloadConfigOption: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mCore,
            option: *const ::std::os::raw::c_char,
            arg2: *const mCoreConfig,
        ),
    >,
    pub setOverride: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mCore, override_: *const ::std::os::raw::c_void),
    >,
    pub baseVideoSize: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const mCore,
            width: *mut ::std::os::raw::c_uint,
            height: *mut ::std::os::raw::c_uint,
        ),
    >,
    pub currentVideoSize: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const mCore,
            width: *mut ::std::os::raw::c_uint,
            height: *mut ::std::os::raw::c_uint,
        ),
    >,
    pub videoScale:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const mCore) -> ::std::os::raw::c_uint>,
    pub screenRegions: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const mCore, arg2: *mut *const mCoreScreenRegion) -> usize,
    >,
    pub setVideoBuffer: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mCore, buffer: *mut color_t, stride: usize),
    >,
    pub setVideoGLTex: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mCore, texid: ::std::os::raw::c_uint),
    >,
    pub getPixels: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mCore,
            buffer: *mut *const ::std::os::raw::c_void,
            stride: *mut usize,
        ),
    >,
    pub putPixels: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mCore,
            buffer: *const ::std::os::raw::c_void,
            stride: usize,
        ),
    >,
    pub getAudioChannel: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mCore, ch: ::std::os::raw::c_int) -> *mut blip_t,
    >,
    pub setAudioBufferSize:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, samples: usize)>,
    pub getAudioBufferSize: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore) -> usize>,
    pub addCoreCallbacks:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, arg2: *mut mCoreCallbacks)>,
    pub clearCoreCallbacks: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore)>,
    pub setAVStream:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, arg2: *mut mAVStream)>,
    pub isROM: ::std::option::Option<unsafe extern "C" fn(vf: *mut VFile) -> bool>,
    pub loadROM:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, vf: *mut VFile) -> bool>,
    pub loadSave:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, vf: *mut VFile) -> bool>,
    pub loadTemporarySave:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, vf: *mut VFile) -> bool>,
    pub unloadROM: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore)>,
    pub romSize: ::std::option::Option<unsafe extern "C" fn(arg1: *const mCore) -> usize>,
    pub checksum: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const mCore,
            data: *mut ::std::os::raw::c_void,
            type_: mCoreChecksumType,
        ),
    >,
    pub loadBIOS: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mCore,
            vf: *mut VFile,
            biosID: ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub selectBIOS: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mCore, biosID: ::std::os::raw::c_int) -> bool,
    >,
    pub loadPatch:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, vf: *mut VFile) -> bool>,
    pub reset: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore)>,
    pub runFrame: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore)>,
    pub runLoop: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore)>,
    pub step: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore)>,
    pub stateSize: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore) -> usize>,
    pub loadState: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mCore, state: *const ::std::os::raw::c_void) -> bool,
    >,
    pub saveState: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mCore, state: *mut ::std::os::raw::c_void) -> bool,
    >,
    pub setKeys: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, keys: u32)>,
    pub addKeys: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, keys: u32)>,
    pub clearKeys: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, keys: u32)>,
    pub getKeys: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore) -> u32>,
    pub frameCounter: ::std::option::Option<unsafe extern "C" fn(arg1: *const mCore) -> u32>,
    pub frameCycles: ::std::option::Option<unsafe extern "C" fn(arg1: *const mCore) -> i32>,
    pub frequency: ::std::option::Option<unsafe extern "C" fn(arg1: *const mCore) -> i32>,
    pub getGameTitle: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const mCore, title: *mut ::std::os::raw::c_char),
    >,
    pub getGameCode: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const mCore, title: *mut ::std::os::raw::c_char),
    >,
    pub setPeripheral: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mCore,
            type_: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_void,
        ),
    >,
    pub getPeripheral: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mCore,
            type_: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub busRead8:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, address: u32) -> u32>,
    pub busRead16:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, address: u32) -> u32>,
    pub busRead32:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, address: u32) -> u32>,
    pub busWrite8:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, address: u32, arg2: u8)>,
    pub busWrite16:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, address: u32, arg2: u16)>,
    pub busWrite32:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, address: u32, arg2: u32)>,
    pub rawRead8: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mCore, address: u32, segment: ::std::os::raw::c_int) -> u32,
    >,
    pub rawRead16: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mCore, address: u32, segment: ::std::os::raw::c_int) -> u32,
    >,
    pub rawRead32: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mCore, address: u32, segment: ::std::os::raw::c_int) -> u32,
    >,
    pub rawWrite8: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mCore,
            address: u32,
            segment: ::std::os::raw::c_int,
            arg2: u8,
        ),
    >,
    pub rawWrite16: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mCore,
            address: u32,
            segment: ::std::os::raw::c_int,
            arg2: u16,
        ),
    >,
    pub rawWrite32: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mCore,
            address: u32,
            segment: ::std::os::raw::c_int,
            arg2: u32,
        ),
    >,
    pub listMemoryBlocks: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const mCore, arg2: *mut *const mCoreMemoryBlock) -> usize,
    >,
    pub getMemoryBlock: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mCore,
            id: usize,
            sizeOut: *mut usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub listRegisters: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const mCore, arg2: *mut *const mCoreRegisterInfo) -> usize,
    >,
    pub readRegister: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const mCore,
            name: *const ::std::os::raw::c_char,
            out: *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub writeRegister: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mCore,
            name: *const ::std::os::raw::c_char,
            in_: *const ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub cheatDevice:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore) -> *mut mCheatDevice>,
    pub savedataClone: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mCore, sram: *mut *mut ::std::os::raw::c_void) -> usize,
    >,
    pub savedataRestore: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mCore,
            sram: *const ::std::os::raw::c_void,
            size: usize,
            writeback: bool,
        ) -> bool,
    >,
    pub listVideoLayers: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const mCore, arg2: *mut *const mCoreChannelInfo) -> usize,
    >,
    pub listAudioChannels: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const mCore, arg2: *mut *const mCoreChannelInfo) -> usize,
    >,
    pub enableVideoLayer:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, id: usize, enable: bool)>,
    pub enableAudioChannel:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, id: usize, enable: bool)>,
    pub adjustVideoLayer:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, id: usize, x: i32, y: i32)>,
    pub startVideoLog:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore, arg2: *mut mVideoLogContext)>,
    pub endVideoLog: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mCore)>,
}
#[test]
fn bindgen_test_layout_mCore() {
    const UNINIT: ::std::mem::MaybeUninit<mCore> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mCore>(),
        5472usize,
        concat!("Size of: ", stringify!(mCore))
    );
    assert_eq!(
        ::std::mem::align_of::<mCore>(),
        8usize,
        concat!("Alignment of ", stringify!(mCore))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).board) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(board)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timing) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(timing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debugger) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(debugger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symbolTable) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(symbolTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).videoLogger) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(videoLogger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirs) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(dirs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputMap) as usize - ptr as usize },
        4200usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(inputMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        4224usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opts) as usize - ptr as usize },
        4664usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(opts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtc) as usize - ptr as usize },
        4792usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(rtc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        4856usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deinit) as usize - ptr as usize },
        4864usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(deinit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).platform) as usize - ptr as usize },
        4872usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(platform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsFeature) as usize - ptr as usize },
        4880usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(supportsFeature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setSync) as usize - ptr as usize },
        4888usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(setSync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadConfig) as usize - ptr as usize },
        4896usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(loadConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reloadConfigOption) as usize - ptr as usize },
        4904usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(reloadConfigOption)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setOverride) as usize - ptr as usize },
        4912usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(setOverride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseVideoSize) as usize - ptr as usize },
        4920usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(baseVideoSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentVideoSize) as usize - ptr as usize },
        4928usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(currentVideoSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).videoScale) as usize - ptr as usize },
        4936usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(videoScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).screenRegions) as usize - ptr as usize },
        4944usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(screenRegions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setVideoBuffer) as usize - ptr as usize },
        4952usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(setVideoBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setVideoGLTex) as usize - ptr as usize },
        4960usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(setVideoGLTex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getPixels) as usize - ptr as usize },
        4968usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(getPixels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putPixels) as usize - ptr as usize },
        4976usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(putPixels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getAudioChannel) as usize - ptr as usize },
        4984usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(getAudioChannel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setAudioBufferSize) as usize - ptr as usize },
        4992usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(setAudioBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getAudioBufferSize) as usize - ptr as usize },
        5000usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(getAudioBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addCoreCallbacks) as usize - ptr as usize },
        5008usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(addCoreCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clearCoreCallbacks) as usize - ptr as usize },
        5016usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(clearCoreCallbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setAVStream) as usize - ptr as usize },
        5024usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(setAVStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isROM) as usize - ptr as usize },
        5032usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(isROM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadROM) as usize - ptr as usize },
        5040usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(loadROM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadSave) as usize - ptr as usize },
        5048usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(loadSave)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadTemporarySave) as usize - ptr as usize },
        5056usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(loadTemporarySave)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unloadROM) as usize - ptr as usize },
        5064usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(unloadROM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).romSize) as usize - ptr as usize },
        5072usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(romSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        5080usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadBIOS) as usize - ptr as usize },
        5088usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(loadBIOS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).selectBIOS) as usize - ptr as usize },
        5096usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(selectBIOS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadPatch) as usize - ptr as usize },
        5104usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(loadPatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        5112usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runFrame) as usize - ptr as usize },
        5120usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(runFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runLoop) as usize - ptr as usize },
        5128usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(runLoop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        5136usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stateSize) as usize - ptr as usize },
        5144usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(stateSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadState) as usize - ptr as usize },
        5152usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(loadState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saveState) as usize - ptr as usize },
        5160usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(saveState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setKeys) as usize - ptr as usize },
        5168usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(setKeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addKeys) as usize - ptr as usize },
        5176usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(addKeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clearKeys) as usize - ptr as usize },
        5184usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(clearKeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getKeys) as usize - ptr as usize },
        5192usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(getKeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameCounter) as usize - ptr as usize },
        5200usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(frameCounter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameCycles) as usize - ptr as usize },
        5208usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(frameCycles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frequency) as usize - ptr as usize },
        5216usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(frequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getGameTitle) as usize - ptr as usize },
        5224usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(getGameTitle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getGameCode) as usize - ptr as usize },
        5232usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(getGameCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setPeripheral) as usize - ptr as usize },
        5240usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(setPeripheral)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getPeripheral) as usize - ptr as usize },
        5248usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(getPeripheral)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busRead8) as usize - ptr as usize },
        5256usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(busRead8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busRead16) as usize - ptr as usize },
        5264usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(busRead16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busRead32) as usize - ptr as usize },
        5272usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(busRead32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busWrite8) as usize - ptr as usize },
        5280usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(busWrite8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busWrite16) as usize - ptr as usize },
        5288usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(busWrite16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busWrite32) as usize - ptr as usize },
        5296usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(busWrite32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rawRead8) as usize - ptr as usize },
        5304usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(rawRead8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rawRead16) as usize - ptr as usize },
        5312usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(rawRead16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rawRead32) as usize - ptr as usize },
        5320usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(rawRead32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rawWrite8) as usize - ptr as usize },
        5328usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(rawWrite8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rawWrite16) as usize - ptr as usize },
        5336usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(rawWrite16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rawWrite32) as usize - ptr as usize },
        5344usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(rawWrite32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listMemoryBlocks) as usize - ptr as usize },
        5352usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(listMemoryBlocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getMemoryBlock) as usize - ptr as usize },
        5360usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(getMemoryBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listRegisters) as usize - ptr as usize },
        5368usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(listRegisters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readRegister) as usize - ptr as usize },
        5376usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(readRegister)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeRegister) as usize - ptr as usize },
        5384usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(writeRegister)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cheatDevice) as usize - ptr as usize },
        5392usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(cheatDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).savedataClone) as usize - ptr as usize },
        5400usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(savedataClone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).savedataRestore) as usize - ptr as usize },
        5408usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(savedataRestore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listVideoLayers) as usize - ptr as usize },
        5416usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(listVideoLayers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listAudioChannels) as usize - ptr as usize },
        5424usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(listAudioChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enableVideoLayer) as usize - ptr as usize },
        5432usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(enableVideoLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enableAudioChannel) as usize - ptr as usize },
        5440usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(enableAudioChannel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adjustVideoLayer) as usize - ptr as usize },
        5448usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(adjustVideoLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startVideoLog) as usize - ptr as usize },
        5456usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(startVideoLog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endVideoLog) as usize - ptr as usize },
        5464usize,
        concat!(
            "Offset of field: ",
            stringify!(mCore),
            "::",
            stringify!(endVideoLog)
        )
    );
}
pub const mCPUComponentType_CPU_COMPONENT_DEBUGGER: mCPUComponentType = 0;
pub const mCPUComponentType_CPU_COMPONENT_CHEAT_DEVICE: mCPUComponentType = 1;
pub const mCPUComponentType_CPU_COMPONENT_MISC_1: mCPUComponentType = 2;
pub const mCPUComponentType_CPU_COMPONENT_MISC_2: mCPUComponentType = 3;
pub const mCPUComponentType_CPU_COMPONENT_MISC_3: mCPUComponentType = 4;
pub const mCPUComponentType_CPU_COMPONENT_MISC_4: mCPUComponentType = 5;
pub const mCPUComponentType_CPU_COMPONENT_MAX: mCPUComponentType = 6;
pub type mCPUComponentType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mCPUComponent {
    pub id: u32,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(cpu: *mut ::std::os::raw::c_void, component: *mut mCPUComponent),
    >,
    pub deinit: ::std::option::Option<unsafe extern "C" fn(component: *mut mCPUComponent)>,
}
#[test]
fn bindgen_test_layout_mCPUComponent() {
    const UNINIT: ::std::mem::MaybeUninit<mCPUComponent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mCPUComponent>(),
        24usize,
        concat!("Size of: ", stringify!(mCPUComponent))
    );
    assert_eq!(
        ::std::mem::align_of::<mCPUComponent>(),
        8usize,
        concat!("Alignment of ", stringify!(mCPUComponent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mCPUComponent),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mCPUComponent),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deinit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mCPUComponent),
            "::",
            stringify!(deinit)
        )
    );
}
pub const mLogLevel_mLOG_FATAL: mLogLevel = 1;
pub const mLogLevel_mLOG_ERROR: mLogLevel = 2;
pub const mLogLevel_mLOG_WARN: mLogLevel = 4;
pub const mLogLevel_mLOG_INFO: mLogLevel = 8;
pub const mLogLevel_mLOG_DEBUG: mLogLevel = 16;
pub const mLogLevel_mLOG_STUB: mLogLevel = 32;
pub const mLogLevel_mLOG_GAME_ERROR: mLogLevel = 64;
pub const mLogLevel_mLOG_ALL: mLogLevel = 127;
pub type mLogLevel = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mLogFilter {
    pub defaultLevels: ::std::os::raw::c_int,
    pub categories: Table,
    pub levels: Table,
}
#[test]
fn bindgen_test_layout_mLogFilter() {
    const UNINIT: ::std::mem::MaybeUninit<mLogFilter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mLogFilter>(),
        152usize,
        concat!("Size of: ", stringify!(mLogFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<mLogFilter>(),
        8usize,
        concat!("Alignment of ", stringify!(mLogFilter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultLevels) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mLogFilter),
            "::",
            stringify!(defaultLevels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).categories) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mLogFilter),
            "::",
            stringify!(categories)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).levels) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mLogFilter),
            "::",
            stringify!(levels)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mLogger {
    pub log: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mLogger,
            category: ::std::os::raw::c_int,
            level: mLogLevel,
            format: *const ::std::os::raw::c_char,
            args: *mut __va_list_tag,
        ),
    >,
    pub filter: *mut mLogFilter,
}
#[test]
fn bindgen_test_layout_mLogger() {
    const UNINIT: ::std::mem::MaybeUninit<mLogger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mLogger>(),
        16usize,
        concat!("Size of: ", stringify!(mLogger))
    );
    assert_eq!(
        ::std::mem::align_of::<mLogger>(),
        8usize,
        concat!("Alignment of ", stringify!(mLogger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mLogger),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mLogger),
            "::",
            stringify!(filter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mStandardLogger {
    pub d: mLogger,
    pub logToStdout: bool,
    pub logFile: *mut VFile,
}
#[test]
fn bindgen_test_layout_mStandardLogger() {
    const UNINIT: ::std::mem::MaybeUninit<mStandardLogger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mStandardLogger>(),
        32usize,
        concat!("Size of: ", stringify!(mStandardLogger))
    );
    assert_eq!(
        ::std::mem::align_of::<mStandardLogger>(),
        8usize,
        concat!("Alignment of ", stringify!(mStandardLogger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mStandardLogger),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logToStdout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mStandardLogger),
            "::",
            stringify!(logToStdout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logFile) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mStandardLogger),
            "::",
            stringify!(logFile)
        )
    );
}
extern "C" {
    pub static mut _mLOG_CAT_STATUS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut _mLOG_CAT_DEBUGGER: ::std::os::raw::c_int;
}
extern "C" {
    pub static DEBUGGER_ID: u32;
}
pub type mDebuggerAccessLogFlags = u8;
pub type mDebuggerAccessLogFlagsEx = u16;
pub const mDebuggerType_DEBUGGER_NONE: mDebuggerType = 0;
pub const mDebuggerType_DEBUGGER_CUSTOM: mDebuggerType = 1;
pub const mDebuggerType_DEBUGGER_CLI: mDebuggerType = 2;
pub const mDebuggerType_DEBUGGER_GDB: mDebuggerType = 3;
pub const mDebuggerType_DEBUGGER_ACCESS_LOGGER: mDebuggerType = 4;
pub const mDebuggerType_DEBUGGER_MAX: mDebuggerType = 5;
pub type mDebuggerType = ::std::os::raw::c_uint;
pub const mDebuggerState_DEBUGGER_CREATED: mDebuggerState = 0;
pub const mDebuggerState_DEBUGGER_PAUSED: mDebuggerState = 1;
pub const mDebuggerState_DEBUGGER_RUNNING: mDebuggerState = 2;
pub const mDebuggerState_DEBUGGER_CALLBACK: mDebuggerState = 3;
pub const mDebuggerState_DEBUGGER_SHUTDOWN: mDebuggerState = 4;
pub type mDebuggerState = ::std::os::raw::c_uint;
pub const mWatchpointType_WATCHPOINT_WRITE: mWatchpointType = 1;
pub const mWatchpointType_WATCHPOINT_READ: mWatchpointType = 2;
pub const mWatchpointType_WATCHPOINT_RW: mWatchpointType = 3;
pub const mWatchpointType_WATCHPOINT_CHANGE: mWatchpointType = 4;
pub const mWatchpointType_WATCHPOINT_WRITE_CHANGE: mWatchpointType = 5;
pub type mWatchpointType = ::std::os::raw::c_uint;
pub const mBreakpointType_BREAKPOINT_HARDWARE: mBreakpointType = 0;
pub const mBreakpointType_BREAKPOINT_SOFTWARE: mBreakpointType = 1;
pub type mBreakpointType = ::std::os::raw::c_uint;
pub const mDebuggerEntryReason_DEBUGGER_ENTER_MANUAL: mDebuggerEntryReason = 0;
pub const mDebuggerEntryReason_DEBUGGER_ENTER_ATTACHED: mDebuggerEntryReason = 1;
pub const mDebuggerEntryReason_DEBUGGER_ENTER_BREAKPOINT: mDebuggerEntryReason = 2;
pub const mDebuggerEntryReason_DEBUGGER_ENTER_WATCHPOINT: mDebuggerEntryReason = 3;
pub const mDebuggerEntryReason_DEBUGGER_ENTER_ILLEGAL_OP: mDebuggerEntryReason = 4;
pub const mDebuggerEntryReason_DEBUGGER_ENTER_STACK: mDebuggerEntryReason = 5;
pub type mDebuggerEntryReason = ::std::os::raw::c_uint;
pub const mStackTraceMode_STACK_TRACE_DISABLED: mStackTraceMode = 0;
pub const mStackTraceMode_STACK_TRACE_ENABLED: mStackTraceMode = 1;
pub const mStackTraceMode_STACK_TRACE_BREAK_ON_RETURN: mStackTraceMode = 2;
pub const mStackTraceMode_STACK_TRACE_BREAK_ON_CALL: mStackTraceMode = 4;
pub const mStackTraceMode_STACK_TRACE_BREAK_ON_BOTH: mStackTraceMode = 6;
pub type mStackTraceMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mDebuggerEntryInfo {
    pub address: u32,
    pub segment: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub type_: mDebuggerEntryInfo__bindgen_ty_1,
    pub pointId: isize,
    pub target: *mut mDebuggerModule,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mDebuggerEntryInfo__bindgen_ty_1 {
    pub wp: mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_1,
    pub bp: mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_2,
    pub st: mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_1 {
    pub oldValue: u32,
    pub newValue: u32,
    pub watchType: mWatchpointType,
    pub accessType: mWatchpointType,
}
#[test]
fn bindgen_test_layout_mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(oldValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newValue) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(newValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).watchType) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(watchType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accessType) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(accessType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_2 {
    pub opcode: u32,
    pub breakType: mBreakpointType,
}
#[test]
fn bindgen_test_layout_mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).breakType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(breakType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_3 {
    pub traceType: mStackTraceMode,
}
#[test]
fn bindgen_test_layout_mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).traceType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(traceType)
        )
    );
}
#[test]
fn bindgen_test_layout_mDebuggerEntryInfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mDebuggerEntryInfo__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mDebuggerEntryInfo__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(mDebuggerEntryInfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mDebuggerEntryInfo__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1),
            "::",
            stringify!(wp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1),
            "::",
            stringify!(bp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo__bindgen_ty_1),
            "::",
            stringify!(st)
        )
    );
}
#[test]
fn bindgen_test_layout_mDebuggerEntryInfo() {
    const UNINIT: ::std::mem::MaybeUninit<mDebuggerEntryInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mDebuggerEntryInfo>(),
        48usize,
        concat!("Size of: ", stringify!(mDebuggerEntryInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<mDebuggerEntryInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(mDebuggerEntryInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segment) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo),
            "::",
            stringify!(segment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointId) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo),
            "::",
            stringify!(pointId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerEntryInfo),
            "::",
            stringify!(target)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mBreakpoint {
    pub id: isize,
    pub address: u32,
    pub segment: ::std::os::raw::c_int,
    pub type_: mBreakpointType,
    pub condition: *mut ParseTree,
}
#[test]
fn bindgen_test_layout_mBreakpoint() {
    const UNINIT: ::std::mem::MaybeUninit<mBreakpoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mBreakpoint>(),
        32usize,
        concat!("Size of: ", stringify!(mBreakpoint))
    );
    assert_eq!(
        ::std::mem::align_of::<mBreakpoint>(),
        8usize,
        concat!("Alignment of ", stringify!(mBreakpoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mBreakpoint),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mBreakpoint),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segment) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mBreakpoint),
            "::",
            stringify!(segment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mBreakpoint),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mBreakpoint),
            "::",
            stringify!(condition)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mWatchpoint {
    pub id: isize,
    pub segment: ::std::os::raw::c_int,
    pub minAddress: u32,
    pub maxAddress: u32,
    pub type_: mWatchpointType,
    pub condition: *mut ParseTree,
}
#[test]
fn bindgen_test_layout_mWatchpoint() {
    const UNINIT: ::std::mem::MaybeUninit<mWatchpoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mWatchpoint>(),
        32usize,
        concat!("Size of: ", stringify!(mWatchpoint))
    );
    assert_eq!(
        ::std::mem::align_of::<mWatchpoint>(),
        8usize,
        concat!("Alignment of ", stringify!(mWatchpoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mWatchpoint),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mWatchpoint),
            "::",
            stringify!(segment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minAddress) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mWatchpoint),
            "::",
            stringify!(minAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mWatchpoint),
            "::",
            stringify!(maxAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mWatchpoint),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mWatchpoint),
            "::",
            stringify!(condition)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mDebuggerInstructionInfo {
    pub address: u32,
    pub segment: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_uint,
    pub flags: [mDebuggerAccessLogFlags; 4usize],
    pub flagsEx: [mDebuggerAccessLogFlagsEx; 4usize],
}
#[test]
fn bindgen_test_layout_mDebuggerInstructionInfo() {
    const UNINIT: ::std::mem::MaybeUninit<mDebuggerInstructionInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mDebuggerInstructionInfo>(),
        24usize,
        concat!("Size of: ", stringify!(mDebuggerInstructionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<mDebuggerInstructionInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(mDebuggerInstructionInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerInstructionInfo),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segment) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerInstructionInfo),
            "::",
            stringify!(segment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerInstructionInfo),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerInstructionInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flagsEx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerInstructionInfo),
            "::",
            stringify!(flagsEx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mBreakpointList {
    pub vector: *mut mBreakpoint,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_mBreakpointList() {
    const UNINIT: ::std::mem::MaybeUninit<mBreakpointList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mBreakpointList>(),
        24usize,
        concat!("Size of: ", stringify!(mBreakpointList))
    );
    assert_eq!(
        ::std::mem::align_of::<mBreakpointList>(),
        8usize,
        concat!("Alignment of ", stringify!(mBreakpointList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mBreakpointList),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mBreakpointList),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mBreakpointList),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mWatchpointList {
    pub vector: *mut mWatchpoint,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_mWatchpointList() {
    const UNINIT: ::std::mem::MaybeUninit<mWatchpointList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mWatchpointList>(),
        24usize,
        concat!("Size of: ", stringify!(mWatchpointList))
    );
    assert_eq!(
        ::std::mem::align_of::<mWatchpointList>(),
        8usize,
        concat!("Alignment of ", stringify!(mWatchpointList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mWatchpointList),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mWatchpointList),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mWatchpointList),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mDebuggerModuleList {
    pub vector: *mut *mut mDebuggerModule,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_mDebuggerModuleList() {
    const UNINIT: ::std::mem::MaybeUninit<mDebuggerModuleList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mDebuggerModuleList>(),
        24usize,
        concat!("Size of: ", stringify!(mDebuggerModuleList))
    );
    assert_eq!(
        ::std::mem::align_of::<mDebuggerModuleList>(),
        8usize,
        concat!("Alignment of ", stringify!(mDebuggerModuleList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModuleList),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModuleList),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModuleList),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mStackFrame {
    pub callSegment: ::std::os::raw::c_int,
    pub callAddress: u32,
    pub entrySegment: ::std::os::raw::c_int,
    pub entryAddress: u32,
    pub frameBaseSegment: ::std::os::raw::c_int,
    pub frameBaseAddress: u32,
    pub regs: *mut ::std::os::raw::c_void,
    pub finished: bool,
    pub breakWhenFinished: bool,
    pub interrupt: bool,
}
#[test]
fn bindgen_test_layout_mStackFrame() {
    const UNINIT: ::std::mem::MaybeUninit<mStackFrame> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mStackFrame>(),
        40usize,
        concat!("Size of: ", stringify!(mStackFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<mStackFrame>(),
        8usize,
        concat!("Alignment of ", stringify!(mStackFrame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callSegment) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackFrame),
            "::",
            stringify!(callSegment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callAddress) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackFrame),
            "::",
            stringify!(callAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entrySegment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackFrame),
            "::",
            stringify!(entrySegment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entryAddress) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackFrame),
            "::",
            stringify!(entryAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameBaseSegment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackFrame),
            "::",
            stringify!(frameBaseSegment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameBaseAddress) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackFrame),
            "::",
            stringify!(frameBaseAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackFrame),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finished) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackFrame),
            "::",
            stringify!(finished)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).breakWhenFinished) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackFrame),
            "::",
            stringify!(breakWhenFinished)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interrupt) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackFrame),
            "::",
            stringify!(interrupt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mStackFrames {
    pub vector: *mut mStackFrame,
    pub size: usize,
    pub capacity: usize,
}
#[test]
fn bindgen_test_layout_mStackFrames() {
    const UNINIT: ::std::mem::MaybeUninit<mStackFrames> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mStackFrames>(),
        24usize,
        concat!("Size of: ", stringify!(mStackFrames))
    );
    assert_eq!(
        ::std::mem::align_of::<mStackFrames>(),
        8usize,
        concat!("Alignment of ", stringify!(mStackFrames))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackFrames),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackFrames),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackFrames),
            "::",
            stringify!(capacity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mStackTrace {
    pub stack: mStackFrames,
    pub registersSize: usize,
    pub formatRegisters: ::std::option::Option<
        unsafe extern "C" fn(
            frame: *mut mStackFrame,
            out: *mut ::std::os::raw::c_char,
            length: *mut usize,
        ),
    >,
}
#[test]
fn bindgen_test_layout_mStackTrace() {
    const UNINIT: ::std::mem::MaybeUninit<mStackTrace> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mStackTrace>(),
        40usize,
        concat!("Size of: ", stringify!(mStackTrace))
    );
    assert_eq!(
        ::std::mem::align_of::<mStackTrace>(),
        8usize,
        concat!("Alignment of ", stringify!(mStackTrace))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackTrace),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).registersSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackTrace),
            "::",
            stringify!(registersSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formatRegisters) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mStackTrace),
            "::",
            stringify!(formatRegisters)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ParseTree {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mDebuggerPlatform {
    pub p: *mut mDebugger,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(cpu: *mut ::std::os::raw::c_void, arg1: *mut mDebuggerPlatform),
    >,
    pub deinit: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mDebuggerPlatform)>,
    pub entered: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mDebuggerPlatform,
            arg2: mDebuggerEntryReason,
            arg3: *mut mDebuggerEntryInfo,
        ),
    >,
    pub hasBreakpoints:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mDebuggerPlatform) -> bool>,
    pub checkBreakpoints: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mDebuggerPlatform)>,
    pub clearBreakpoint: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mDebuggerPlatform, id: isize) -> bool,
    >,
    pub setBreakpoint: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mDebuggerPlatform,
            arg2: *mut mDebuggerModule,
            arg3: *const mBreakpoint,
        ) -> isize,
    >,
    pub listBreakpoints: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mDebuggerPlatform,
            arg2: *mut mDebuggerModule,
            arg3: *mut mBreakpointList,
        ),
    >,
    pub setWatchpoint: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mDebuggerPlatform,
            arg2: *mut mDebuggerModule,
            arg3: *const mWatchpoint,
        ) -> isize,
    >,
    pub listWatchpoints: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mDebuggerPlatform,
            arg2: *mut mDebuggerModule,
            arg3: *mut mWatchpointList,
        ),
    >,
    pub trace: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mDebuggerPlatform,
            out: *mut ::std::os::raw::c_char,
            length: *mut usize,
        ),
    >,
    pub lookupIdentifier: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mDebuggerPlatform,
            name: *const ::std::os::raw::c_char,
            value: *mut i32,
            segment: *mut ::std::os::raw::c_int,
        ) -> bool,
    >,
    pub getStackTraceMode: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mDebuggerPlatform) -> mStackTraceMode,
    >,
    pub setStackTraceMode: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut mDebuggerPlatform, mode: mStackTraceMode),
    >,
    pub updateStackTrace:
        ::std::option::Option<unsafe extern "C" fn(d: *mut mDebuggerPlatform) -> bool>,
    pub nextInstructionInfo: ::std::option::Option<
        unsafe extern "C" fn(d: *mut mDebuggerPlatform, info: *mut mDebuggerInstructionInfo),
    >,
}
#[test]
fn bindgen_test_layout_mDebuggerPlatform() {
    const UNINIT: ::std::mem::MaybeUninit<mDebuggerPlatform> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mDebuggerPlatform>(),
        136usize,
        concat!("Size of: ", stringify!(mDebuggerPlatform))
    );
    assert_eq!(
        ::std::mem::align_of::<mDebuggerPlatform>(),
        8usize,
        concat!("Alignment of ", stringify!(mDebuggerPlatform))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deinit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(deinit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entered) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(entered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasBreakpoints) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(hasBreakpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checkBreakpoints) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(checkBreakpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clearBreakpoint) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(clearBreakpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setBreakpoint) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(setBreakpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listBreakpoints) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(listBreakpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setWatchpoint) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(setWatchpoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listWatchpoints) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(listWatchpoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trace) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(trace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lookupIdentifier) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(lookupIdentifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getStackTraceMode) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(getStackTraceMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setStackTraceMode) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(setStackTraceMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).updateStackTrace) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(updateStackTrace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextInstructionInfo) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerPlatform),
            "::",
            stringify!(nextInstructionInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mDebugger {
    pub d: mCPUComponent,
    pub platform: *mut mDebuggerPlatform,
    pub state: mDebuggerState,
    pub core: *mut mCore,
    pub bridge: *mut mScriptBridge,
    pub stackTrace: mStackTrace,
    pub modules: mDebuggerModuleList,
    pub pointOwner: Table,
}
#[test]
fn bindgen_test_layout_mDebugger() {
    const UNINIT: ::std::mem::MaybeUninit<mDebugger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mDebugger>(),
        192usize,
        concat!("Size of: ", stringify!(mDebugger))
    );
    assert_eq!(
        ::std::mem::align_of::<mDebugger>(),
        8usize,
        concat!("Alignment of ", stringify!(mDebugger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebugger),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).platform) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebugger),
            "::",
            stringify!(platform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebugger),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).core) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebugger),
            "::",
            stringify!(core)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bridge) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebugger),
            "::",
            stringify!(bridge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stackTrace) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebugger),
            "::",
            stringify!(stackTrace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modules) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebugger),
            "::",
            stringify!(modules)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointOwner) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebugger),
            "::",
            stringify!(pointOwner)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mDebuggerModule {
    pub p: *mut mDebugger,
    pub type_: mDebuggerType,
    pub isPaused: bool,
    pub needsCallback: bool,
    pub init: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mDebuggerModule)>,
    pub deinit: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mDebuggerModule)>,
    pub paused:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut mDebuggerModule, timeoutMs: i32)>,
    pub update: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mDebuggerModule)>,
    pub entered: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mDebuggerModule,
            arg2: mDebuggerEntryReason,
            arg3: *mut mDebuggerEntryInfo,
        ),
    >,
    pub custom: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mDebuggerModule)>,
    pub interrupt: ::std::option::Option<unsafe extern "C" fn(arg1: *mut mDebuggerModule)>,
}
#[test]
fn bindgen_test_layout_mDebuggerModule() {
    const UNINIT: ::std::mem::MaybeUninit<mDebuggerModule> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mDebuggerModule>(),
        72usize,
        concat!("Size of: ", stringify!(mDebuggerModule))
    );
    assert_eq!(
        ::std::mem::align_of::<mDebuggerModule>(),
        8usize,
        concat!("Alignment of ", stringify!(mDebuggerModule))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModule),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModule),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPaused) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModule),
            "::",
            stringify!(isPaused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).needsCallback) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModule),
            "::",
            stringify!(needsCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModule),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deinit) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModule),
            "::",
            stringify!(deinit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paused) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModule),
            "::",
            stringify!(paused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModule),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entered) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModule),
            "::",
            stringify!(entered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModule),
            "::",
            stringify!(custom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interrupt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mDebuggerModule),
            "::",
            stringify!(interrupt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mArguments {
    pub fname: *mut ::std::os::raw::c_char,
    pub patch: *mut ::std::os::raw::c_char,
    pub cheatsFile: *mut ::std::os::raw::c_char,
    pub savestate: *mut ::std::os::raw::c_char,
    pub bios: *mut ::std::os::raw::c_char,
    pub logLevel: ::std::os::raw::c_int,
    pub frameskip: ::std::os::raw::c_int,
    pub configOverrides: Table,
    pub debugAtStart: bool,
    pub debugCli: bool,
    pub debugGdb: bool,
    pub showHelp: bool,
    pub showVersion: bool,
}
#[test]
fn bindgen_test_layout_mArguments() {
    const UNINIT: ::std::mem::MaybeUninit<mArguments> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mArguments>(),
        128usize,
        concat!("Size of: ", stringify!(mArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<mArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(mArguments))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mArguments),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).patch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mArguments),
            "::",
            stringify!(patch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cheatsFile) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mArguments),
            "::",
            stringify!(cheatsFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).savestate) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mArguments),
            "::",
            stringify!(savestate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bios) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mArguments),
            "::",
            stringify!(bios)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logLevel) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mArguments),
            "::",
            stringify!(logLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameskip) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mArguments),
            "::",
            stringify!(frameskip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).configOverrides) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mArguments),
            "::",
            stringify!(configOverrides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debugAtStart) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mArguments),
            "::",
            stringify!(debugAtStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debugCli) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(mArguments),
            "::",
            stringify!(debugCli)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debugGdb) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(mArguments),
            "::",
            stringify!(debugGdb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showHelp) as usize - ptr as usize },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(mArguments),
            "::",
            stringify!(showHelp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).showVersion) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(mArguments),
            "::",
            stringify!(showVersion)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mOption {
    pub name: *const ::std::os::raw::c_char,
    pub arg: bool,
    pub shortEquiv: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mOption() {
    const UNINIT: ::std::mem::MaybeUninit<mOption> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mOption>(),
        16usize,
        concat!("Size of: ", stringify!(mOption))
    );
    assert_eq!(
        ::std::mem::align_of::<mOption>(),
        8usize,
        concat!("Alignment of ", stringify!(mOption))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mOption),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mOption),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortEquiv) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(mOption),
            "::",
            stringify!(shortEquiv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mSubParser {
    pub usage: *const ::std::os::raw::c_char,
    pub parse: ::std::option::Option<
        unsafe extern "C" fn(
            parser: *mut mSubParser,
            option: ::std::os::raw::c_int,
            arg: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub parseLong: ::std::option::Option<
        unsafe extern "C" fn(
            parser: *mut mSubParser,
            option: *const ::std::os::raw::c_char,
            arg: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub apply: ::std::option::Option<
        unsafe extern "C" fn(parser: *mut mSubParser, config: *mut mCoreConfig),
    >,
    pub extraOptions: *const ::std::os::raw::c_char,
    pub longOptions: *const mOption,
    pub opts: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mSubParser() {
    const UNINIT: ::std::mem::MaybeUninit<mSubParser> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mSubParser>(),
        56usize,
        concat!("Size of: ", stringify!(mSubParser))
    );
    assert_eq!(
        ::std::mem::align_of::<mSubParser>(),
        8usize,
        concat!("Alignment of ", stringify!(mSubParser))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mSubParser),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parse) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mSubParser),
            "::",
            stringify!(parse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parseLong) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mSubParser),
            "::",
            stringify!(parseLong)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apply) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mSubParser),
            "::",
            stringify!(apply)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extraOptions) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mSubParser),
            "::",
            stringify!(extraOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).longOptions) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mSubParser),
            "::",
            stringify!(longOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opts) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mSubParser),
            "::",
            stringify!(opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mGraphicsOpts {
    pub multiplier: ::std::os::raw::c_int,
    pub fullscreen: bool,
}
#[test]
fn bindgen_test_layout_mGraphicsOpts() {
    const UNINIT: ::std::mem::MaybeUninit<mGraphicsOpts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mGraphicsOpts>(),
        8usize,
        concat!("Size of: ", stringify!(mGraphicsOpts))
    );
    assert_eq!(
        ::std::mem::align_of::<mGraphicsOpts>(),
        4usize,
        concat!("Alignment of ", stringify!(mGraphicsOpts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiplier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mGraphicsOpts),
            "::",
            stringify!(multiplier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fullscreen) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mGraphicsOpts),
            "::",
            stringify!(fullscreen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    const UNINIT: ::std::mem::MaybeUninit<iovec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_storage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_padding) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_align) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: _bindgen_ty_6 = 1;
pub const MSG_PEEK: _bindgen_ty_6 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_6 = 4;
pub const MSG_CTRUNC: _bindgen_ty_6 = 8;
pub const MSG_PROXY: _bindgen_ty_6 = 16;
pub const MSG_TRUNC: _bindgen_ty_6 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_6 = 64;
pub const MSG_EOR: _bindgen_ty_6 = 128;
pub const MSG_WAITALL: _bindgen_ty_6 = 256;
pub const MSG_FIN: _bindgen_ty_6 = 512;
pub const MSG_SYN: _bindgen_ty_6 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_6 = 2048;
pub const MSG_RST: _bindgen_ty_6 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_6 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_6 = 16384;
pub const MSG_MORE: _bindgen_ty_6 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_6 = 65536;
pub const MSG_BATCH: _bindgen_ty_6 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_6 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_6 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_6 = 1073741824;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    const UNINIT: ::std::mem::MaybeUninit<msghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_control) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_controllen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    const UNINIT: ::std::mem::MaybeUninit<cmsghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cmsg_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
pub const SCM_RIGHTS: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    const UNINIT: ::std::mem::MaybeUninit<linger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_onoff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_linger) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<osockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_8 = 0;
pub const SHUT_WR: _bindgen_ty_8 = 1;
pub const SHUT_RDWR: _bindgen_ty_8 = 2;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    const UNINIT: ::std::mem::MaybeUninit<ip_opts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_opts) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreqn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_address) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_ifindex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    const UNINIT: ::std::mem::MaybeUninit<in_pktinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_ifindex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_spec_dst) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_9 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_9 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_9 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_9 = 4;
pub const IPPROTO_TCP: _bindgen_ty_9 = 6;
pub const IPPROTO_EGP: _bindgen_ty_9 = 8;
pub const IPPROTO_PUP: _bindgen_ty_9 = 12;
pub const IPPROTO_UDP: _bindgen_ty_9 = 17;
pub const IPPROTO_IDP: _bindgen_ty_9 = 22;
pub const IPPROTO_TP: _bindgen_ty_9 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_9 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_9 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_9 = 46;
pub const IPPROTO_GRE: _bindgen_ty_9 = 47;
pub const IPPROTO_ESP: _bindgen_ty_9 = 50;
pub const IPPROTO_AH: _bindgen_ty_9 = 51;
pub const IPPROTO_MTP: _bindgen_ty_9 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_9 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_9 = 98;
pub const IPPROTO_PIM: _bindgen_ty_9 = 103;
pub const IPPROTO_COMP: _bindgen_ty_9 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_9 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_9 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_9 = 137;
pub const IPPROTO_ETHERNET: _bindgen_ty_9 = 143;
pub const IPPROTO_RAW: _bindgen_ty_9 = 255;
pub const IPPROTO_MPTCP: _bindgen_ty_9 = 262;
pub const IPPROTO_MAX: _bindgen_ty_9 = 263;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const IPPROTO_HOPOPTS: _bindgen_ty_10 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_10 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_10 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_10 = 58;
pub const IPPROTO_NONE: _bindgen_ty_10 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_10 = 60;
pub const IPPROTO_MH: _bindgen_ty_10 = 135;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_11 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_11 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_11 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_11 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_11 = 15;
pub const IPPORT_FTP: _bindgen_ty_11 = 21;
pub const IPPORT_TELNET: _bindgen_ty_11 = 23;
pub const IPPORT_SMTP: _bindgen_ty_11 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_11 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_11 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_11 = 43;
pub const IPPORT_MTP: _bindgen_ty_11 = 57;
pub const IPPORT_TFTP: _bindgen_ty_11 = 69;
pub const IPPORT_RJE: _bindgen_ty_11 = 77;
pub const IPPORT_FINGER: _bindgen_ty_11 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_11 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_11 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_11 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_11 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_11 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_11 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_11 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_11 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_11 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_11 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_11 = 5000;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__in6_u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_addr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_zero) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_in6> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_flowinfo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_scope_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreq_source> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_sourceaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    const UNINIT: ::std::mem::MaybeUninit<ipv6_mreq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv6mr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv6mr_interface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    const UNINIT: ::std::mem::MaybeUninit<group_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    const UNINIT: ::std::mem::MaybeUninit<group_source_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_source) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    const UNINIT: ::std::mem::MaybeUninit<ip_msfilter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_fmode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_numsrc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_slist) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    const UNINIT: ::std::mem::MaybeUninit<group_filter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_fmode) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_numsrc) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_slist) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rpcent() {
    const UNINIT: ::std::mem::MaybeUninit<rpcent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rpcent>(),
        24usize,
        concat!("Size of: ", stringify!(rpcent))
    );
    assert_eq!(
        ::std::mem::align_of::<rpcent>(),
        8usize,
        concat!("Alignment of ", stringify!(rpcent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_aliases) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_aliases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r_number) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_number)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[test]
fn bindgen_test_layout_netent() {
    const UNINIT: ::std::mem::MaybeUninit<netent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<netent>(),
        24usize,
        concat!("Size of: ", stringify!(netent))
    );
    assert_eq!(
        ::std::mem::align_of::<netent>(),
        8usize,
        concat!("Alignment of ", stringify!(netent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_aliases) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_aliases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_addrtype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_addrtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_net) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_net)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_hostent() {
    const UNINIT: ::std::mem::MaybeUninit<hostent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hostent>(),
        32usize,
        concat!("Size of: ", stringify!(hostent))
    );
    assert_eq!(
        ::std::mem::align_of::<hostent>(),
        8usize,
        concat!("Alignment of ", stringify!(hostent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h_aliases) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_aliases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h_addrtype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addrtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h_length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h_addr_list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addr_list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_servent() {
    const UNINIT: ::std::mem::MaybeUninit<servent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<servent>(),
        32usize,
        concat!("Size of: ", stringify!(servent))
    );
    assert_eq!(
        ::std::mem::align_of::<servent>(),
        8usize,
        concat!("Alignment of ", stringify!(servent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_aliases) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_aliases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_port) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_proto) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_proto)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_protoent() {
    const UNINIT: ::std::mem::MaybeUninit<protoent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<protoent>(),
        24usize,
        concat!("Size of: ", stringify!(protoent))
    );
    assert_eq!(
        ::std::mem::align_of::<protoent>(),
        8usize,
        concat!("Alignment of ", stringify!(protoent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_aliases) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_aliases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_proto) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_proto)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_next: *mut addrinfo,
}
#[test]
fn bindgen_test_layout_addrinfo() {
    const UNINIT: ::std::mem::MaybeUninit<addrinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<addrinfo>(),
        48usize,
        concat!("Size of: ", stringify!(addrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<addrinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(addrinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_family) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_socktype) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_socktype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_protocol) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_protocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_addrlen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addrlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_addr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_canonname) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_canonname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ai_next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_next)
        )
    );
}
pub type tcp_seq = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tcphdr {
    pub __bindgen_anon_1: tcphdr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tcphdr__bindgen_ty_1 {
    pub __bindgen_anon_1: tcphdr__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: tcphdr__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcphdr__bindgen_ty_1__bindgen_ty_1 {
    pub th_sport: u16,
    pub th_dport: u16,
    pub th_seq: tcp_seq,
    pub th_ack: tcp_seq,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub th_flags: u8,
    pub th_win: u16,
    pub th_sum: u16,
    pub th_urp: u16,
}
#[test]
fn bindgen_test_layout_tcphdr__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<tcphdr__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tcphdr__bindgen_ty_1__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tcphdr__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).th_sport) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_sport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).th_dport) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_dport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).th_seq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).th_ack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_ack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).th_flags) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).th_win) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_win)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).th_sum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_sum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).th_urp) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_urp)
        )
    );
}
impl tcphdr__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn th_x2(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_th_x2(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn th_off(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_th_off(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(th_x2: u8, th_off: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let th_x2: u8 = unsafe { ::std::mem::transmute(th_x2) };
            th_x2 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let th_off: u8 = unsafe { ::std::mem::transmute(th_off) };
            th_off as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcphdr__bindgen_ty_1__bindgen_ty_2 {
    pub source: u16,
    pub dest: u16,
    pub seq: u32,
    pub ack_seq: u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub window: u16,
    pub check: u16,
    pub urg_ptr: u16,
}
#[test]
fn bindgen_test_layout_tcphdr__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<tcphdr__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tcphdr__bindgen_ty_1__bindgen_ty_2>(),
        20usize,
        concat!("Size of: ", stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<tcphdr__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ack_seq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ack_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).check) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(check)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).urg_ptr) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(urg_ptr)
        )
    );
}
impl tcphdr__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn res1(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_res1(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn doff(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_doff(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn fin(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_fin(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn syn(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_syn(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rst(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_rst(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn psh(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_psh(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ack(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ack(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn urg(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_urg(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn res2(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_res2(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        res1: u16,
        doff: u16,
        fin: u16,
        syn: u16,
        rst: u16,
        psh: u16,
        ack: u16,
        urg: u16,
        res2: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let res1: u16 = unsafe { ::std::mem::transmute(res1) };
            res1 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let doff: u16 = unsafe { ::std::mem::transmute(doff) };
            doff as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let fin: u16 = unsafe { ::std::mem::transmute(fin) };
            fin as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let syn: u16 = unsafe { ::std::mem::transmute(syn) };
            syn as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rst: u16 = unsafe { ::std::mem::transmute(rst) };
            rst as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let psh: u16 = unsafe { ::std::mem::transmute(psh) };
            psh as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let ack: u16 = unsafe { ::std::mem::transmute(ack) };
            ack as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let urg: u16 = unsafe { ::std::mem::transmute(urg) };
            urg as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let res2: u16 = unsafe { ::std::mem::transmute(res2) };
            res2 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_tcphdr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<tcphdr__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(tcphdr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tcphdr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(tcphdr__bindgen_ty_1))
    );
}
#[test]
fn bindgen_test_layout_tcphdr() {
    assert_eq!(
        ::std::mem::size_of::<tcphdr>(),
        20usize,
        concat!("Size of: ", stringify!(tcphdr))
    );
    assert_eq!(
        ::std::mem::align_of::<tcphdr>(),
        4usize,
        concat!("Alignment of ", stringify!(tcphdr))
    );
}
pub const TCP_ESTABLISHED: _bindgen_ty_12 = 1;
pub const TCP_SYN_SENT: _bindgen_ty_12 = 2;
pub const TCP_SYN_RECV: _bindgen_ty_12 = 3;
pub const TCP_FIN_WAIT1: _bindgen_ty_12 = 4;
pub const TCP_FIN_WAIT2: _bindgen_ty_12 = 5;
pub const TCP_TIME_WAIT: _bindgen_ty_12 = 6;
pub const TCP_CLOSE: _bindgen_ty_12 = 7;
pub const TCP_CLOSE_WAIT: _bindgen_ty_12 = 8;
pub const TCP_LAST_ACK: _bindgen_ty_12 = 9;
pub const TCP_LISTEN: _bindgen_ty_12 = 10;
pub const TCP_CLOSING: _bindgen_ty_12 = 11;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub const tcp_ca_state_TCP_CA_Open: tcp_ca_state = 0;
pub const tcp_ca_state_TCP_CA_Disorder: tcp_ca_state = 1;
pub const tcp_ca_state_TCP_CA_CWR: tcp_ca_state = 2;
pub const tcp_ca_state_TCP_CA_Recovery: tcp_ca_state = 3;
pub const tcp_ca_state_TCP_CA_Loss: tcp_ca_state = 4;
pub type tcp_ca_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_info {
    pub tcpi_state: u8,
    pub tcpi_ca_state: u8,
    pub tcpi_retransmits: u8,
    pub tcpi_probes: u8,
    pub tcpi_backoff: u8,
    pub tcpi_options: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub tcpi_rto: u32,
    pub tcpi_ato: u32,
    pub tcpi_snd_mss: u32,
    pub tcpi_rcv_mss: u32,
    pub tcpi_unacked: u32,
    pub tcpi_sacked: u32,
    pub tcpi_lost: u32,
    pub tcpi_retrans: u32,
    pub tcpi_fackets: u32,
    pub tcpi_last_data_sent: u32,
    pub tcpi_last_ack_sent: u32,
    pub tcpi_last_data_recv: u32,
    pub tcpi_last_ack_recv: u32,
    pub tcpi_pmtu: u32,
    pub tcpi_rcv_ssthresh: u32,
    pub tcpi_rtt: u32,
    pub tcpi_rttvar: u32,
    pub tcpi_snd_ssthresh: u32,
    pub tcpi_snd_cwnd: u32,
    pub tcpi_advmss: u32,
    pub tcpi_reordering: u32,
    pub tcpi_rcv_rtt: u32,
    pub tcpi_rcv_space: u32,
    pub tcpi_total_retrans: u32,
}
#[test]
fn bindgen_test_layout_tcp_info() {
    const UNINIT: ::std::mem::MaybeUninit<tcp_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tcp_info>(),
        104usize,
        concat!("Size of: ", stringify!(tcp_info))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_info>(),
        4usize,
        concat!("Alignment of ", stringify!(tcp_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_ca_state) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_ca_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_retransmits) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_retransmits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_probes) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_probes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_backoff) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_backoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_options) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_rto) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_ato) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_ato)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_snd_mss) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_snd_mss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_rcv_mss) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rcv_mss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_unacked) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_unacked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_sacked) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_sacked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_lost) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_lost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_retrans) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_retrans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_fackets) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_fackets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_last_data_sent) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_last_data_sent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_last_ack_sent) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_last_ack_sent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_last_data_recv) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_last_data_recv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_last_ack_recv) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_last_ack_recv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_pmtu) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_pmtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_rcv_ssthresh) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rcv_ssthresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_rtt) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rtt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_rttvar) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rttvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_snd_ssthresh) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_snd_ssthresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_snd_cwnd) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_snd_cwnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_advmss) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_advmss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_reordering) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_reordering)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_rcv_rtt) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rcv_rtt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_rcv_space) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rcv_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpi_total_retrans) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_total_retrans)
        )
    );
}
impl tcp_info {
    #[inline]
    pub fn tcpi_snd_wscale(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_tcpi_snd_wscale(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_rcv_wscale(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_tcpi_rcv_wscale(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tcpi_snd_wscale: u8,
        tcpi_rcv_wscale: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let tcpi_snd_wscale: u8 = unsafe { ::std::mem::transmute(tcpi_snd_wscale) };
            tcpi_snd_wscale as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let tcpi_rcv_wscale: u8 = unsafe { ::std::mem::transmute(tcpi_rcv_wscale) };
            tcpi_rcv_wscale as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_md5sig {
    pub tcpm_addr: sockaddr_storage,
    pub tcpm_flags: u8,
    pub tcpm_prefixlen: u8,
    pub tcpm_keylen: u16,
    pub __tcpm_pad: u32,
    pub tcpm_key: [u8; 80usize],
}
#[test]
fn bindgen_test_layout_tcp_md5sig() {
    const UNINIT: ::std::mem::MaybeUninit<tcp_md5sig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tcp_md5sig>(),
        216usize,
        concat!("Size of: ", stringify!(tcp_md5sig))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_md5sig>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_md5sig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpm_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_md5sig),
            "::",
            stringify!(tcpm_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpm_flags) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_md5sig),
            "::",
            stringify!(tcpm_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpm_prefixlen) as usize - ptr as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_md5sig),
            "::",
            stringify!(tcpm_prefixlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpm_keylen) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_md5sig),
            "::",
            stringify!(tcpm_keylen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__tcpm_pad) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_md5sig),
            "::",
            stringify!(__tcpm_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpm_key) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_md5sig),
            "::",
            stringify!(tcpm_key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_repair_opt {
    pub opt_code: u32,
    pub opt_val: u32,
}
#[test]
fn bindgen_test_layout_tcp_repair_opt() {
    const UNINIT: ::std::mem::MaybeUninit<tcp_repair_opt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tcp_repair_opt>(),
        8usize,
        concat!("Size of: ", stringify!(tcp_repair_opt))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_repair_opt>(),
        4usize,
        concat!("Alignment of ", stringify!(tcp_repair_opt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt_code) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_repair_opt),
            "::",
            stringify!(opt_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt_val) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_repair_opt),
            "::",
            stringify!(opt_val)
        )
    );
}
pub const TCP_NO_QUEUE: _bindgen_ty_13 = 0;
pub const TCP_RECV_QUEUE: _bindgen_ty_13 = 1;
pub const TCP_SEND_QUEUE: _bindgen_ty_13 = 2;
pub const TCP_QUEUES_NR: _bindgen_ty_13 = 3;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_cookie_transactions {
    pub tcpct_flags: u16,
    pub __tcpct_pad1: u8,
    pub tcpct_cookie_desired: u8,
    pub tcpct_s_data_desired: u16,
    pub tcpct_used: u16,
    pub tcpct_value: [u8; 536usize],
}
#[test]
fn bindgen_test_layout_tcp_cookie_transactions() {
    const UNINIT: ::std::mem::MaybeUninit<tcp_cookie_transactions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tcp_cookie_transactions>(),
        544usize,
        concat!("Size of: ", stringify!(tcp_cookie_transactions))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_cookie_transactions>(),
        2usize,
        concat!("Alignment of ", stringify!(tcp_cookie_transactions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpct_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cookie_transactions),
            "::",
            stringify!(tcpct_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__tcpct_pad1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cookie_transactions),
            "::",
            stringify!(__tcpct_pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpct_cookie_desired) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cookie_transactions),
            "::",
            stringify!(tcpct_cookie_desired)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpct_s_data_desired) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cookie_transactions),
            "::",
            stringify!(tcpct_s_data_desired)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpct_used) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cookie_transactions),
            "::",
            stringify!(tcpct_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcpct_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cookie_transactions),
            "::",
            stringify!(tcpct_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_repair_window {
    pub snd_wl1: u32,
    pub snd_wnd: u32,
    pub max_window: u32,
    pub rcv_wnd: u32,
    pub rcv_wup: u32,
}
#[test]
fn bindgen_test_layout_tcp_repair_window() {
    const UNINIT: ::std::mem::MaybeUninit<tcp_repair_window> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tcp_repair_window>(),
        20usize,
        concat!("Size of: ", stringify!(tcp_repair_window))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_repair_window>(),
        4usize,
        concat!("Alignment of ", stringify!(tcp_repair_window))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).snd_wl1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_repair_window),
            "::",
            stringify!(snd_wl1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).snd_wnd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_repair_window),
            "::",
            stringify!(snd_wnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_window) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_repair_window),
            "::",
            stringify!(max_window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcv_wnd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_repair_window),
            "::",
            stringify!(rcv_wnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcv_wup) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_repair_window),
            "::",
            stringify!(rcv_wup)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_zerocopy_receive {
    pub address: u64,
    pub length: u32,
    pub recv_skip_hint: u32,
}
#[test]
fn bindgen_test_layout_tcp_zerocopy_receive() {
    const UNINIT: ::std::mem::MaybeUninit<tcp_zerocopy_receive> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tcp_zerocopy_receive>(),
        16usize,
        concat!("Size of: ", stringify!(tcp_zerocopy_receive))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_zerocopy_receive>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_zerocopy_receive))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_zerocopy_receive),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_zerocopy_receive),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv_skip_hint) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_zerocopy_receive),
            "::",
            stringify!(recv_skip_hint)
        )
    );
}
pub type Socket = ::std::os::raw::c_int;
pub const IP_IPV4: IP = 0;
pub const IP_IPV6: IP = 1;
pub type IP = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Address {
    pub version: IP,
    pub __bindgen_anon_1: Address__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Address__bindgen_ty_1 {
    pub ipv4: u32,
    pub ipv6: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_Address__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Address__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Address__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(Address__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Address__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Address__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Address__bindgen_ty_1),
            "::",
            stringify!(ipv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Address__bindgen_ty_1),
            "::",
            stringify!(ipv6)
        )
    );
}
#[test]
fn bindgen_test_layout_Address() {
    const UNINIT: ::std::mem::MaybeUninit<Address> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Address>(),
        20usize,
        concat!("Size of: ", stringify!(Address))
    );
    assert_eq!(
        ::std::mem::align_of::<Address>(),
        4usize,
        concat!("Alignment of ", stringify!(Address))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Address),
            "::",
            stringify!(version)
        )
    );
}
pub const MAP_READ: _bindgen_ty_14 = 1;
pub const MAP_WRITE: _bindgen_ty_14 = 2;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
pub const VFSType_VFS_UNKNOWN: VFSType = 0;
pub const VFSType_VFS_FILE: VFSType = 1;
pub const VFSType_VFS_DIRECTORY: VFSType = 2;
pub type VFSType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VFile {
    pub close: ::std::option::Option<unsafe extern "C" fn(vf: *mut VFile) -> bool>,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(vf: *mut VFile, offset: off_t, whence: ::std::os::raw::c_int) -> off_t,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            vf: *mut VFile,
            buffer: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> isize,
    >,
    pub readline: ::std::option::Option<
        unsafe extern "C" fn(
            vf: *mut VFile,
            buffer: *mut ::std::os::raw::c_char,
            size: usize,
        ) -> isize,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            vf: *mut VFile,
            buffer: *const ::std::os::raw::c_void,
            size: usize,
        ) -> isize,
    >,
    pub map: ::std::option::Option<
        unsafe extern "C" fn(
            vf: *mut VFile,
            size: usize,
            flags: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub unmap: ::std::option::Option<
        unsafe extern "C" fn(vf: *mut VFile, memory: *mut ::std::os::raw::c_void, size: usize),
    >,
    pub truncate: ::std::option::Option<unsafe extern "C" fn(vf: *mut VFile, size: usize)>,
    pub size: ::std::option::Option<unsafe extern "C" fn(vf: *mut VFile) -> isize>,
    pub sync: ::std::option::Option<
        unsafe extern "C" fn(
            vf: *mut VFile,
            buffer: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_VFile() {
    const UNINIT: ::std::mem::MaybeUninit<VFile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VFile>(),
        80usize,
        concat!("Size of: ", stringify!(VFile))
    );
    assert_eq!(
        ::std::mem::align_of::<VFile>(),
        8usize,
        concat!("Alignment of ", stringify!(VFile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VFile),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VFile),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VFile),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readline) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VFile),
            "::",
            stringify!(readline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VFile),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VFile),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unmap) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VFile),
            "::",
            stringify!(unmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).truncate) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VFile),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VFile),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sync) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VFile),
            "::",
            stringify!(sync)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VDirEntry {
    pub name: ::std::option::Option<
        unsafe extern "C" fn(vde: *mut VDirEntry) -> *const ::std::os::raw::c_char,
    >,
    pub type_: ::std::option::Option<unsafe extern "C" fn(vde: *mut VDirEntry) -> VFSType>,
}
#[test]
fn bindgen_test_layout_VDirEntry() {
    const UNINIT: ::std::mem::MaybeUninit<VDirEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VDirEntry>(),
        16usize,
        concat!("Size of: ", stringify!(VDirEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<VDirEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(VDirEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VDirEntry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VDirEntry),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VDir {
    pub close: ::std::option::Option<unsafe extern "C" fn(vd: *mut VDir) -> bool>,
    pub rewind: ::std::option::Option<unsafe extern "C" fn(vd: *mut VDir)>,
    pub listNext: ::std::option::Option<unsafe extern "C" fn(vd: *mut VDir) -> *mut VDirEntry>,
    pub openFile: ::std::option::Option<
        unsafe extern "C" fn(
            vd: *mut VDir,
            name: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
        ) -> *mut VFile,
    >,
    pub openDir: ::std::option::Option<
        unsafe extern "C" fn(vd: *mut VDir, name: *const ::std::os::raw::c_char) -> *mut VDir,
    >,
    pub deleteFile: ::std::option::Option<
        unsafe extern "C" fn(vd: *mut VDir, name: *const ::std::os::raw::c_char) -> bool,
    >,
}
#[test]
fn bindgen_test_layout_VDir() {
    const UNINIT: ::std::mem::MaybeUninit<VDir> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VDir>(),
        48usize,
        concat!("Size of: ", stringify!(VDir))
    );
    assert_eq!(
        ::std::mem::align_of::<VDir>(),
        8usize,
        concat!("Alignment of ", stringify!(VDir))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VDir),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rewind) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VDir),
            "::",
            stringify!(rewind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listNext) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VDir),
            "::",
            stringify!(listNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).openFile) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VDir),
            "::",
            stringify!(openFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).openDir) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VDir),
            "::",
            stringify!(openDir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deleteFile) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VDir),
            "::",
            stringify!(deleteFile)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CircleBuffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mInputMapImpl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mTiming {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mVideoLogger {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mCheatDevice {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mScriptBridge {
    pub _address: u8,
}
extern crate libloading;
pub struct mgba {
    __library: ::libloading::Library,
    pub __assert_fail: Result<
        unsafe extern "C" fn(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        ) -> !,
        ::libloading::Error,
    >,
    pub __assert_perror_fail: Result<
        unsafe extern "C" fn(
            __errnum: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_uint,
            __function: *const ::std::os::raw::c_char,
        ) -> !,
        ::libloading::Error,
    >,
    pub __assert: Result<
        unsafe extern "C" fn(
            __assertion: *const ::std::os::raw::c_char,
            __file: *const ::std::os::raw::c_char,
            __line: ::std::os::raw::c_int,
        ) -> !,
        ::libloading::Error,
    >,
    pub __ctype_b_loc:
        Result<unsafe extern "C" fn() -> *mut *const ::std::os::raw::c_ushort, ::libloading::Error>,
    pub __ctype_tolower_loc:
        Result<unsafe extern "C" fn() -> *mut *const __int32_t, ::libloading::Error>,
    pub __ctype_toupper_loc:
        Result<unsafe extern "C" fn() -> *mut *const __int32_t, ::libloading::Error>,
    pub isalnum: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isalpha: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iscntrl: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isdigit: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub islower: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isgraph: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isprint: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ispunct: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isspace: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isupper: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isxdigit: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub tolower: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub toupper: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isblank: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isascii: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub toascii: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _toupper: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _tolower: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isalnum_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isalpha_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iscntrl_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isdigit_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub islower_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isgraph_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isprint_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ispunct_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isspace_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isupper_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isxdigit_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isblank_l: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __tolower_l: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub tolower_l: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __toupper_l: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub toupper_l: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fcntl: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __cmd: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub open: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __oflag: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub openat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __oflag: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub creat: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __mode: mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lockf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __cmd: ::std::os::raw::c_int,
            __len: off_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub posix_fadvise: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __offset: off_t,
            __len: off_t,
            __advise: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub posix_fallocate: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __offset: off_t,
            __len: off_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub imaxabs: Result<unsafe extern "C" fn(__n: intmax_t) -> intmax_t, ::libloading::Error>,
    pub imaxdiv: Result<
        unsafe extern "C" fn(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t,
        ::libloading::Error,
    >,
    pub strtoimax: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> intmax_t,
        ::libloading::Error,
    >,
    pub strtoumax: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> uintmax_t,
        ::libloading::Error,
    >,
    pub wcstoimax: Result<
        unsafe extern "C" fn(
            __nptr: *const __gwchar_t,
            __endptr: *mut *mut __gwchar_t,
            __base: ::std::os::raw::c_int,
        ) -> intmax_t,
        ::libloading::Error,
    >,
    pub wcstoumax: Result<
        unsafe extern "C" fn(
            __nptr: *const __gwchar_t,
            __endptr: *mut *mut __gwchar_t,
            __base: ::std::os::raw::c_int,
        ) -> uintmax_t,
        ::libloading::Error,
    >,
    pub __fpclassify:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __signbit:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __isinf:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __finite:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __isnan:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __iseqsig: Result<
        unsafe extern "C" fn(__x: f64, __y: f64) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __issignaling:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub acos: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __acos: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub asin: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __asin: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub atan: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __atan: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub atan2: Result<unsafe extern "C" fn(__y: f64, __x: f64) -> f64, ::libloading::Error>,
    pub __atan2: Result<unsafe extern "C" fn(__y: f64, __x: f64) -> f64, ::libloading::Error>,
    pub cos: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __cos: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub sin: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __sin: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub tan: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __tan: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub cosh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __cosh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub sinh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __sinh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub tanh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __tanh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub acosh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __acosh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub asinh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __asinh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub atanh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __atanh: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub exp: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __exp: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub frexp: Result<
        unsafe extern "C" fn(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub __frexp: Result<
        unsafe extern "C" fn(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub ldexp: Result<
        unsafe extern "C" fn(__x: f64, __exponent: ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub __ldexp: Result<
        unsafe extern "C" fn(__x: f64, __exponent: ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub log: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __log: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub log10: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __log10: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub modf: Result<unsafe extern "C" fn(__x: f64, __iptr: *mut f64) -> f64, ::libloading::Error>,
    pub __modf:
        Result<unsafe extern "C" fn(__x: f64, __iptr: *mut f64) -> f64, ::libloading::Error>,
    pub expm1: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __expm1: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub log1p: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __log1p: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub logb: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __logb: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub exp2: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __exp2: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub log2: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __log2: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub pow: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __pow: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub sqrt: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __sqrt: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub hypot: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __hypot: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub cbrt: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __cbrt: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub ceil: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __ceil: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub fabs: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __fabs: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub floor: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __floor: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub fmod: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __fmod: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub isinf:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub finite:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub drem: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __drem: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub significand: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __significand: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub copysign: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __copysign: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub nan: Result<
        unsafe extern "C" fn(__tagb: *const ::std::os::raw::c_char) -> f64,
        ::libloading::Error,
    >,
    pub __nan: Result<
        unsafe extern "C" fn(__tagb: *const ::std::os::raw::c_char) -> f64,
        ::libloading::Error,
    >,
    pub isnan:
        Result<unsafe extern "C" fn(__value: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub j0: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __j0: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub j1: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __j1: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub jn: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64,
        ::libloading::Error,
    >,
    pub __jn: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64,
        ::libloading::Error,
    >,
    pub y0: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __y0: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub y1: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __y1: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub yn: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64,
        ::libloading::Error,
    >,
    pub __yn: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64,
        ::libloading::Error,
    >,
    pub erf: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __erf: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub erfc: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __erfc: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub lgamma: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __lgamma: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub tgamma: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __tgamma: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub gamma: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub __gamma: Result<unsafe extern "C" fn(arg1: f64) -> f64, ::libloading::Error>,
    pub lgamma_r: Result<
        unsafe extern "C" fn(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub __lgamma_r: Result<
        unsafe extern "C" fn(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub rint: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __rint: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub nextafter: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __nextafter: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub nexttoward: Result<unsafe extern "C" fn(__x: f64, __y: u128) -> f64, ::libloading::Error>,
    pub __nexttoward: Result<unsafe extern "C" fn(__x: f64, __y: u128) -> f64, ::libloading::Error>,
    pub remainder: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __remainder: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub scalbn: Result<
        unsafe extern "C" fn(__x: f64, __n: ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub __scalbn: Result<
        unsafe extern "C" fn(__x: f64, __n: ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub ilogb: Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __ilogb:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub scalbln: Result<
        unsafe extern "C" fn(__x: f64, __n: ::std::os::raw::c_long) -> f64,
        ::libloading::Error,
    >,
    pub __scalbln: Result<
        unsafe extern "C" fn(__x: f64, __n: ::std::os::raw::c_long) -> f64,
        ::libloading::Error,
    >,
    pub nearbyint: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __nearbyint: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub round: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __round: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub trunc: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub __trunc: Result<unsafe extern "C" fn(__x: f64) -> f64, ::libloading::Error>,
    pub remquo: Result<
        unsafe extern "C" fn(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub __remquo: Result<
        unsafe extern "C" fn(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64,
        ::libloading::Error,
    >,
    pub lrint:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub __lrint:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub llrint:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub __llrint:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub lround:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub __lround:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub llround:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub __llround:
        Result<unsafe extern "C" fn(__x: f64) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub fdim: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __fdim: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub fmax: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __fmax: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub fmin: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub __fmin: Result<unsafe extern "C" fn(__x: f64, __y: f64) -> f64, ::libloading::Error>,
    pub fma: Result<unsafe extern "C" fn(__x: f64, __y: f64, __z: f64) -> f64, ::libloading::Error>,
    pub __fma:
        Result<unsafe extern "C" fn(__x: f64, __y: f64, __z: f64) -> f64, ::libloading::Error>,
    pub scalb: Result<unsafe extern "C" fn(__x: f64, __n: f64) -> f64, ::libloading::Error>,
    pub __scalb: Result<unsafe extern "C" fn(__x: f64, __n: f64) -> f64, ::libloading::Error>,
    pub __fpclassifyf:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __signbitf:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __isinff:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __finitef:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __isnanf:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __iseqsigf: Result<
        unsafe extern "C" fn(__x: f32, __y: f32) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __issignalingf:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub acosf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __acosf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub asinf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __asinf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub atanf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __atanf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub atan2f: Result<unsafe extern "C" fn(__y: f32, __x: f32) -> f32, ::libloading::Error>,
    pub __atan2f: Result<unsafe extern "C" fn(__y: f32, __x: f32) -> f32, ::libloading::Error>,
    pub cosf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __cosf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub sinf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __sinf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub tanf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __tanf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub coshf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __coshf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub sinhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __sinhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub tanhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __tanhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub acoshf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __acoshf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub asinhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __asinhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub atanhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __atanhf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub expf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __expf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub frexpf: Result<
        unsafe extern "C" fn(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub __frexpf: Result<
        unsafe extern "C" fn(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub ldexpf: Result<
        unsafe extern "C" fn(__x: f32, __exponent: ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub __ldexpf: Result<
        unsafe extern "C" fn(__x: f32, __exponent: ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub logf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __logf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub log10f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __log10f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub modff: Result<unsafe extern "C" fn(__x: f32, __iptr: *mut f32) -> f32, ::libloading::Error>,
    pub __modff:
        Result<unsafe extern "C" fn(__x: f32, __iptr: *mut f32) -> f32, ::libloading::Error>,
    pub expm1f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __expm1f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub log1pf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __log1pf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub logbf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __logbf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub exp2f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __exp2f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub log2f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __log2f: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub powf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __powf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub sqrtf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __sqrtf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub hypotf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __hypotf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub cbrtf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __cbrtf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub ceilf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __ceilf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub fabsf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __fabsf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub floorf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __floorf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub fmodf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __fmodf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub isinff:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub finitef:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub dremf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __dremf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub significandf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __significandf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub copysignf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __copysignf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub nanf: Result<
        unsafe extern "C" fn(__tagb: *const ::std::os::raw::c_char) -> f32,
        ::libloading::Error,
    >,
    pub __nanf: Result<
        unsafe extern "C" fn(__tagb: *const ::std::os::raw::c_char) -> f32,
        ::libloading::Error,
    >,
    pub isnanf:
        Result<unsafe extern "C" fn(__value: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub j0f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __j0f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub j1f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __j1f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub jnf: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f32) -> f32,
        ::libloading::Error,
    >,
    pub __jnf: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f32) -> f32,
        ::libloading::Error,
    >,
    pub y0f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __y0f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub y1f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __y1f: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub ynf: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f32) -> f32,
        ::libloading::Error,
    >,
    pub __ynf: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f32) -> f32,
        ::libloading::Error,
    >,
    pub erff: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __erff: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub erfcf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __erfcf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub lgammaf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __lgammaf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub tgammaf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __tgammaf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub gammaf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub __gammaf: Result<unsafe extern "C" fn(arg1: f32) -> f32, ::libloading::Error>,
    pub lgammaf_r: Result<
        unsafe extern "C" fn(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub __lgammaf_r: Result<
        unsafe extern "C" fn(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub rintf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __rintf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub nextafterf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __nextafterf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub nexttowardf: Result<unsafe extern "C" fn(__x: f32, __y: u128) -> f32, ::libloading::Error>,
    pub __nexttowardf:
        Result<unsafe extern "C" fn(__x: f32, __y: u128) -> f32, ::libloading::Error>,
    pub remainderf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __remainderf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub scalbnf: Result<
        unsafe extern "C" fn(__x: f32, __n: ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub __scalbnf: Result<
        unsafe extern "C" fn(__x: f32, __n: ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub ilogbf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __ilogbf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub scalblnf: Result<
        unsafe extern "C" fn(__x: f32, __n: ::std::os::raw::c_long) -> f32,
        ::libloading::Error,
    >,
    pub __scalblnf: Result<
        unsafe extern "C" fn(__x: f32, __n: ::std::os::raw::c_long) -> f32,
        ::libloading::Error,
    >,
    pub nearbyintf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __nearbyintf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub roundf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __roundf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub truncf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub __truncf: Result<unsafe extern "C" fn(__x: f32) -> f32, ::libloading::Error>,
    pub remquof: Result<
        unsafe extern "C" fn(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub __remquof: Result<
        unsafe extern "C" fn(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32,
        ::libloading::Error,
    >,
    pub lrintf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub __lrintf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub llrintf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub __llrintf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub lroundf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub __lroundf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub llroundf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub __llroundf:
        Result<unsafe extern "C" fn(__x: f32) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub fdimf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __fdimf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub fmaxf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __fmaxf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub fminf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub __fminf: Result<unsafe extern "C" fn(__x: f32, __y: f32) -> f32, ::libloading::Error>,
    pub fmaf:
        Result<unsafe extern "C" fn(__x: f32, __y: f32, __z: f32) -> f32, ::libloading::Error>,
    pub __fmaf:
        Result<unsafe extern "C" fn(__x: f32, __y: f32, __z: f32) -> f32, ::libloading::Error>,
    pub scalbf: Result<unsafe extern "C" fn(__x: f32, __n: f32) -> f32, ::libloading::Error>,
    pub __scalbf: Result<unsafe extern "C" fn(__x: f32, __n: f32) -> f32, ::libloading::Error>,
    pub __fpclassifyl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __signbitl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __isinfl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __finitel:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __isnanl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __iseqsigl: Result<
        unsafe extern "C" fn(__x: u128, __y: u128) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __issignalingl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub acosl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __acosl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub asinl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __asinl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub atanl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __atanl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub atan2l: Result<unsafe extern "C" fn(__y: u128, __x: u128) -> u128, ::libloading::Error>,
    pub __atan2l: Result<unsafe extern "C" fn(__y: u128, __x: u128) -> u128, ::libloading::Error>,
    pub cosl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __cosl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub sinl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __sinl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub tanl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __tanl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub coshl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __coshl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub sinhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __sinhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub tanhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __tanhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub acoshl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __acoshl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub asinhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __asinhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub atanhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __atanhl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub expl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __expl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub frexpl: Result<
        unsafe extern "C" fn(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub __frexpl: Result<
        unsafe extern "C" fn(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub ldexpl: Result<
        unsafe extern "C" fn(__x: u128, __exponent: ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub __ldexpl: Result<
        unsafe extern "C" fn(__x: u128, __exponent: ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub logl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __logl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub log10l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __log10l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub modfl:
        Result<unsafe extern "C" fn(__x: u128, __iptr: *mut u128) -> u128, ::libloading::Error>,
    pub __modfl:
        Result<unsafe extern "C" fn(__x: u128, __iptr: *mut u128) -> u128, ::libloading::Error>,
    pub expm1l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __expm1l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub log1pl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __log1pl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub logbl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __logbl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub exp2l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __exp2l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub log2l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __log2l: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub powl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __powl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub sqrtl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __sqrtl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub hypotl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __hypotl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub cbrtl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __cbrtl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub ceill: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __ceill: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub fabsl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __fabsl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub floorl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __floorl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub fmodl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __fmodl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub isinfl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub finitel:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub dreml: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __dreml: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub significandl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __significandl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub copysignl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __copysignl:
        Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub nanl: Result<
        unsafe extern "C" fn(__tagb: *const ::std::os::raw::c_char) -> u128,
        ::libloading::Error,
    >,
    pub __nanl: Result<
        unsafe extern "C" fn(__tagb: *const ::std::os::raw::c_char) -> u128,
        ::libloading::Error,
    >,
    pub isnanl:
        Result<unsafe extern "C" fn(__value: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub j0l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __j0l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub j1l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __j1l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub jnl: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: u128) -> u128,
        ::libloading::Error,
    >,
    pub __jnl: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: u128) -> u128,
        ::libloading::Error,
    >,
    pub y0l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __y0l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub y1l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __y1l: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub ynl: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: u128) -> u128,
        ::libloading::Error,
    >,
    pub __ynl: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: u128) -> u128,
        ::libloading::Error,
    >,
    pub erfl: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __erfl: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub erfcl: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __erfcl: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub lgammal: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __lgammal: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub tgammal: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __tgammal: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub gammal: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub __gammal: Result<unsafe extern "C" fn(arg1: u128) -> u128, ::libloading::Error>,
    pub lgammal_r: Result<
        unsafe extern "C" fn(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub __lgammal_r: Result<
        unsafe extern "C" fn(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub rintl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __rintl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub nextafterl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __nextafterl:
        Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub nexttowardl:
        Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __nexttowardl:
        Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub remainderl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __remainderl:
        Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub scalbnl: Result<
        unsafe extern "C" fn(__x: u128, __n: ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub __scalbnl: Result<
        unsafe extern "C" fn(__x: u128, __n: ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub ilogbl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __ilogbl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub scalblnl: Result<
        unsafe extern "C" fn(__x: u128, __n: ::std::os::raw::c_long) -> u128,
        ::libloading::Error,
    >,
    pub __scalblnl: Result<
        unsafe extern "C" fn(__x: u128, __n: ::std::os::raw::c_long) -> u128,
        ::libloading::Error,
    >,
    pub nearbyintl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __nearbyintl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub roundl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __roundl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub truncl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub __truncl: Result<unsafe extern "C" fn(__x: u128) -> u128, ::libloading::Error>,
    pub remquol: Result<
        unsafe extern "C" fn(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub __remquol: Result<
        unsafe extern "C" fn(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128,
        ::libloading::Error,
    >,
    pub lrintl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub __lrintl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub llrintl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub __llrintl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub lroundl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub __lroundl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub llroundl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub __llroundl:
        Result<unsafe extern "C" fn(__x: u128) -> ::std::os::raw::c_longlong, ::libloading::Error>,
    pub fdiml: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __fdiml: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub fmaxl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __fmaxl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub fminl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub __fminl: Result<unsafe extern "C" fn(__x: u128, __y: u128) -> u128, ::libloading::Error>,
    pub fmal:
        Result<unsafe extern "C" fn(__x: u128, __y: u128, __z: u128) -> u128, ::libloading::Error>,
    pub __fmal:
        Result<unsafe extern "C" fn(__x: u128, __y: u128, __z: u128) -> u128, ::libloading::Error>,
    pub scalbl: Result<unsafe extern "C" fn(__x: u128, __n: u128) -> u128, ::libloading::Error>,
    pub __scalbl: Result<unsafe extern "C" fn(__x: u128, __n: u128) -> u128, ::libloading::Error>,
    pub remove: Result<
        unsafe extern "C" fn(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rename: Result<
        unsafe extern "C" fn(
            __old: *const ::std::os::raw::c_char,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub renameat: Result<
        unsafe extern "C" fn(
            __oldfd: ::std::os::raw::c_int,
            __old: *const ::std::os::raw::c_char,
            __newfd: ::std::os::raw::c_int,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fclose: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub tmpfile: Result<unsafe extern "C" fn() -> *mut FILE, ::libloading::Error>,
    pub tmpnam: Result<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub tmpnam_r: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub tempnam: Result<
        unsafe extern "C" fn(
            __dir: *const ::std::os::raw::c_char,
            __pfx: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub fflush: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fflush_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fopen: Result<
        unsafe extern "C" fn(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub freopen: Result<
        unsafe extern "C" fn(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut FILE,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub fdopen: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub fmemopen: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_void,
            __len: usize,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub open_memstream: Result<
        unsafe extern "C" fn(
            __bufloc: *mut *mut ::std::os::raw::c_char,
            __sizeloc: *mut usize,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub setbuf: Result<
        unsafe extern "C" fn(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub setvbuf: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __buf: *mut ::std::os::raw::c_char,
            __modes: ::std::os::raw::c_int,
            __n: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setbuffer: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __buf: *mut ::std::os::raw::c_char,
            __size: usize,
        ),
        ::libloading::Error,
    >,
    pub setlinebuf: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub fprintf: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub printf: Result<
        unsafe extern "C" fn(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vfprintf: Result<
        unsafe extern "C" fn(
            __s: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vprintf: Result<
        unsafe extern "C" fn(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub snprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: ::std::os::raw::c_ulong,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsnprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: ::std::os::raw::c_ulong,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vdprintf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub dprintf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fscanf: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub scanf: Result<
        unsafe extern "C" fn(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sscanf: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fscanf1: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub scanf1: Result<
        unsafe extern "C" fn(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sscanf1: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vfscanf: Result<
        unsafe extern "C" fn(
            __s: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vscanf: Result<
        unsafe extern "C" fn(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsscanf: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vfscanf1: Result<
        unsafe extern "C" fn(
            __s: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vscanf1: Result<
        unsafe extern "C" fn(
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsscanf1: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fgetc: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getc: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getchar: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub getc_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getchar_unlocked:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub fgetc_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fputc: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putc: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putchar: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fputc_unlocked: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putc_unlocked: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putchar_unlocked: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getw: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putw: Result<
        unsafe extern "C" fn(
            __w: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fgets: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __getdelim: Result<
        unsafe extern "C" fn(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> __ssize_t,
        ::libloading::Error,
    >,
    pub getdelim: Result<
        unsafe extern "C" fn(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> __ssize_t,
        ::libloading::Error,
    >,
    pub getline: Result<
        unsafe extern "C" fn(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __stream: *mut FILE,
        ) -> __ssize_t,
        ::libloading::Error,
    >,
    pub fputs: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub puts: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ungetc: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fread: Result<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __size: ::std::os::raw::c_ulong,
            __n: ::std::os::raw::c_ulong,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub fwrite: Result<
        unsafe extern "C" fn(
            __ptr: *const ::std::os::raw::c_void,
            __size: ::std::os::raw::c_ulong,
            __n: ::std::os::raw::c_ulong,
            __s: *mut FILE,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub fread_unlocked: Result<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut FILE,
        ) -> usize,
        ::libloading::Error,
    >,
    pub fwrite_unlocked: Result<
        unsafe extern "C" fn(
            __ptr: *const ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut FILE,
        ) -> usize,
        ::libloading::Error,
    >,
    pub fseek: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __off: ::std::os::raw::c_long,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ftell: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub rewind: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub fseeko: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __off: __off_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ftello: Result<unsafe extern "C" fn(__stream: *mut FILE) -> __off_t, ::libloading::Error>,
    pub fgetpos: Result<
        unsafe extern "C" fn(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fsetpos: Result<
        unsafe extern "C" fn(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clearerr: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub feof: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ferror: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clearerr_unlocked: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub feof_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ferror_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub perror:
        Result<unsafe extern "C" fn(__s: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub fileno: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fileno_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pclose: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub popen: Result<
        unsafe extern "C" fn(
            __command: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub ctermid: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub flockfile: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub ftrylockfile: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub funlockfile: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub __uflow:
        Result<unsafe extern "C" fn(arg1: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __overflow: Result<
        unsafe extern "C" fn(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __ctype_get_mb_cur_max: Result<unsafe extern "C" fn() -> usize, ::libloading::Error>,
    pub atof: Result<
        unsafe extern "C" fn(__nptr: *const ::std::os::raw::c_char) -> f64,
        ::libloading::Error,
    >,
    pub atoi: Result<
        unsafe extern "C" fn(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub atol: Result<
        unsafe extern "C" fn(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub atoll: Result<
        unsafe extern "C" fn(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub strtod: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64,
        ::libloading::Error,
    >,
    pub strtof: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f32,
        ::libloading::Error,
    >,
    pub strtold: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> u128,
        ::libloading::Error,
    >,
    pub strtol: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub strtoul: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strtoq: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub strtouq: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub strtoll: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub strtoull: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub l64a: Result<
        unsafe extern "C" fn(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub a64l: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub select: Result<
        unsafe extern "C" fn(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut fd_set,
            __writefds: *mut fd_set,
            __exceptfds: *mut fd_set,
            __timeout: *mut timeval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pselect: Result<
        unsafe extern "C" fn(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut fd_set,
            __writefds: *mut fd_set,
            __exceptfds: *mut fd_set,
            __timeout: *const timespec,
            __sigmask: *const __sigset_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub random: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub srandom: Result<unsafe extern "C" fn(__seed: ::std::os::raw::c_uint), ::libloading::Error>,
    pub initstate: Result<
        unsafe extern "C" fn(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: usize,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub setstate: Result<
        unsafe extern "C" fn(
            __statebuf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub random_r: Result<
        unsafe extern "C" fn(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub srandom_r: Result<
        unsafe extern "C" fn(
            __seed: ::std::os::raw::c_uint,
            __buf: *mut random_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub initstate_r: Result<
        unsafe extern "C" fn(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: usize,
            __buf: *mut random_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setstate_r: Result<
        unsafe extern "C" fn(
            __statebuf: *mut ::std::os::raw::c_char,
            __buf: *mut random_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rand: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub srand: Result<unsafe extern "C" fn(__seed: ::std::os::raw::c_uint), ::libloading::Error>,
    pub rand_r: Result<
        unsafe extern "C" fn(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub drand48: Result<unsafe extern "C" fn() -> f64, ::libloading::Error>,
    pub erand48: Result<
        unsafe extern "C" fn(__xsubi: *mut ::std::os::raw::c_ushort) -> f64,
        ::libloading::Error,
    >,
    pub lrand48: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub nrand48: Result<
        unsafe extern "C" fn(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub mrand48: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub jrand48: Result<
        unsafe extern "C" fn(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub srand48:
        Result<unsafe extern "C" fn(__seedval: ::std::os::raw::c_long), ::libloading::Error>,
    pub seed48: Result<
        unsafe extern "C" fn(
            __seed16v: *mut ::std::os::raw::c_ushort,
        ) -> *mut ::std::os::raw::c_ushort,
        ::libloading::Error,
    >,
    pub lcong48:
        Result<unsafe extern "C" fn(__param: *mut ::std::os::raw::c_ushort), ::libloading::Error>,
    pub drand48_r: Result<
        unsafe extern "C" fn(
            __buffer: *mut drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub erand48_r: Result<
        unsafe extern "C" fn(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lrand48_r: Result<
        unsafe extern "C" fn(
            __buffer: *mut drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub nrand48_r: Result<
        unsafe extern "C" fn(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mrand48_r: Result<
        unsafe extern "C" fn(
            __buffer: *mut drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub jrand48_r: Result<
        unsafe extern "C" fn(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub srand48_r: Result<
        unsafe extern "C" fn(
            __seedval: ::std::os::raw::c_long,
            __buffer: *mut drand48_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub seed48_r: Result<
        unsafe extern "C" fn(
            __seed16v: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lcong48_r: Result<
        unsafe extern "C" fn(
            __param: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub malloc: Result<
        unsafe extern "C" fn(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub calloc: Result<
        unsafe extern "C" fn(
            __nmemb: ::std::os::raw::c_ulong,
            __size: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub realloc: Result<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __size: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub free: Result<unsafe extern "C" fn(__ptr: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub reallocarray: Result<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub alloca: Result<
        unsafe extern "C" fn(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub valloc: Result<
        unsafe extern "C" fn(__size: usize) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub posix_memalign: Result<
        unsafe extern "C" fn(
            __memptr: *mut *mut ::std::os::raw::c_void,
            __alignment: usize,
            __size: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub aligned_alloc: Result<
        unsafe extern "C" fn(
            __alignment: ::std::os::raw::c_ulong,
            __size: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub abort: Result<unsafe extern "C" fn() -> !, ::libloading::Error>,
    pub atexit: Result<
        unsafe extern "C" fn(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub at_quick_exit: Result<
        unsafe extern "C" fn(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub on_exit: Result<
        unsafe extern "C" fn(
            __func: ::std::option::Option<
                unsafe extern "C" fn(
                    __status: ::std::os::raw::c_int,
                    __arg: *mut ::std::os::raw::c_void,
                ),
            >,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub exit:
        Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int) -> !, ::libloading::Error>,
    pub quick_exit:
        Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int) -> !, ::libloading::Error>,
    pub _Exit:
        Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int) -> !, ::libloading::Error>,
    pub getenv: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub putenv: Result<
        unsafe extern "C" fn(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setenv: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __value: *const ::std::os::raw::c_char,
            __replace: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub unsetenv: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clearenv: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub mktemp: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub mkstemp: Result<
        unsafe extern "C" fn(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkstemps: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkdtemp: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub system: Result<
        unsafe extern "C" fn(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub realpath: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __resolved: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub bsearch: Result<
        unsafe extern "C" fn(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: __compar_fn_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub qsort: Result<
        unsafe extern "C" fn(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: __compar_fn_t,
        ),
        ::libloading::Error,
    >,
    pub abs: Result<
        unsafe extern "C" fn(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub labs: Result<
        unsafe extern "C" fn(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub llabs: Result<
        unsafe extern "C" fn(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub div: Result<
        unsafe extern "C" fn(
            __numer: ::std::os::raw::c_int,
            __denom: ::std::os::raw::c_int,
        ) -> div_t,
        ::libloading::Error,
    >,
    pub ldiv: Result<
        unsafe extern "C" fn(
            __numer: ::std::os::raw::c_long,
            __denom: ::std::os::raw::c_long,
        ) -> ldiv_t,
        ::libloading::Error,
    >,
    pub lldiv: Result<
        unsafe extern "C" fn(
            __numer: ::std::os::raw::c_longlong,
            __denom: ::std::os::raw::c_longlong,
        ) -> lldiv_t,
        ::libloading::Error,
    >,
    pub ecvt: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub fcvt: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub gcvt: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub qecvt: Result<
        unsafe extern "C" fn(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub qfcvt: Result<
        unsafe extern "C" fn(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub qgcvt: Result<
        unsafe extern "C" fn(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ecvt_r: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fcvt_r: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub qecvt_r: Result<
        unsafe extern "C" fn(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub qfcvt_r: Result<
        unsafe extern "C" fn(
            __value: u128,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mblen: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbtowc: Result<
        unsafe extern "C" fn(
            __pwc: *mut wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wctomb: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __wchar: wchar_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbstowcs: Result<
        unsafe extern "C" fn(
            __pwcs: *mut wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> usize,
        ::libloading::Error,
    >,
    pub wcstombs: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __pwcs: *const wchar_t,
            __n: usize,
        ) -> usize,
        ::libloading::Error,
    >,
    pub rpmatch: Result<
        unsafe extern "C" fn(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getsubopt: Result<
        unsafe extern "C" fn(
            __optionp: *mut *mut ::std::os::raw::c_char,
            __tokens: *const *mut ::std::os::raw::c_char,
            __valuep: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getloadavg: Result<
        unsafe extern "C" fn(
            __loadavg: *mut f64,
            __nelem: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub memcpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memmove: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memccpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memset: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memcmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __memcmpeq: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub memchr: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub strcpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strncpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcat: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strncat: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strncmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strcoll: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strxfrm: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strcoll_l: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __l: locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strxfrm_l: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
            __l: locale_t,
        ) -> usize,
        ::libloading::Error,
    >,
    pub strdup: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strndup: Result<
        unsafe extern "C" fn(
            __string: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strchr: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strrchr: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcspn: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __reject: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strspn: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strpbrk: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strstr: Result<
        unsafe extern "C" fn(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strtok: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __strtok_r: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strtok_r: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strlen: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strnlen: Result<
        unsafe extern "C" fn(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize,
        ::libloading::Error,
    >,
    pub strerror: Result<
        unsafe extern "C" fn(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strerror_r: Result<
        unsafe extern "C" fn(
            __errnum: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strerror_l: Result<
        unsafe extern "C" fn(
            __errnum: ::std::os::raw::c_int,
            __l: locale_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub bcmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub bcopy: Result<
        unsafe extern "C" fn(
            __src: *const ::std::os::raw::c_void,
            __dest: *mut ::std::os::raw::c_void,
            __n: usize,
        ),
        ::libloading::Error,
    >,
    pub bzero: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong),
        ::libloading::Error,
    >,
    pub index: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub rindex: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ffs: Result<
        unsafe extern "C" fn(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ffsl: Result<
        unsafe extern "C" fn(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ffsll: Result<
        unsafe extern "C" fn(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strcasecmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strncasecmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strcasecmp_l: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __loc: locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strncasecmp_l: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
            __loc: locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub explicit_bzero: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_void, __n: usize),
        ::libloading::Error,
    >,
    pub strsep: Result<
        unsafe extern "C" fn(
            __stringp: *mut *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strsignal: Result<
        unsafe extern "C" fn(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __stpcpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub stpcpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __stpncpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub stpncpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub clock: Result<unsafe extern "C" fn() -> clock_t, ::libloading::Error>,
    pub time: Result<unsafe extern "C" fn(__timer: *mut time_t) -> time_t, ::libloading::Error>,
    pub difftime:
        Result<unsafe extern "C" fn(__time1: time_t, __time0: time_t) -> f64, ::libloading::Error>,
    pub mktime: Result<unsafe extern "C" fn(__tp: *mut tm) -> time_t, ::libloading::Error>,
    pub strftime: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __maxsize: usize,
            __format: *const ::std::os::raw::c_char,
            __tp: *const tm,
        ) -> usize,
        ::libloading::Error,
    >,
    pub strftime_l: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __maxsize: usize,
            __format: *const ::std::os::raw::c_char,
            __tp: *const tm,
            __loc: locale_t,
        ) -> usize,
        ::libloading::Error,
    >,
    pub gmtime:
        Result<unsafe extern "C" fn(__timer: *const time_t) -> *mut tm, ::libloading::Error>,
    pub localtime:
        Result<unsafe extern "C" fn(__timer: *const time_t) -> *mut tm, ::libloading::Error>,
    pub gmtime_r: Result<
        unsafe extern "C" fn(__timer: *const time_t, __tp: *mut tm) -> *mut tm,
        ::libloading::Error,
    >,
    pub localtime_r: Result<
        unsafe extern "C" fn(__timer: *const time_t, __tp: *mut tm) -> *mut tm,
        ::libloading::Error,
    >,
    pub asctime: Result<
        unsafe extern "C" fn(__tp: *const tm) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ctime: Result<
        unsafe extern "C" fn(__timer: *const time_t) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub asctime_r: Result<
        unsafe extern "C" fn(
            __tp: *const tm,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ctime_r: Result<
        unsafe extern "C" fn(
            __timer: *const time_t,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub tzset: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub timegm: Result<unsafe extern "C" fn(__tp: *mut tm) -> time_t, ::libloading::Error>,
    pub timelocal: Result<unsafe extern "C" fn(__tp: *mut tm) -> time_t, ::libloading::Error>,
    pub dysize: Result<
        unsafe extern "C" fn(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub nanosleep: Result<
        unsafe extern "C" fn(
            __requested_time: *const timespec,
            __remaining: *mut timespec,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clock_getres: Result<
        unsafe extern "C" fn(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clock_gettime: Result<
        unsafe extern "C" fn(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clock_settime: Result<
        unsafe extern "C" fn(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clock_nanosleep: Result<
        unsafe extern "C" fn(
            __clock_id: clockid_t,
            __flags: ::std::os::raw::c_int,
            __req: *const timespec,
            __rem: *mut timespec,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clock_getcpuclockid: Result<
        unsafe extern "C" fn(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub timer_create: Result<
        unsafe extern "C" fn(
            __clock_id: clockid_t,
            __evp: *mut sigevent,
            __timerid: *mut timer_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub timer_delete: Result<
        unsafe extern "C" fn(__timerid: timer_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub timer_settime: Result<
        unsafe extern "C" fn(
            __timerid: timer_t,
            __flags: ::std::os::raw::c_int,
            __value: *const itimerspec,
            __ovalue: *mut itimerspec,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub timer_gettime: Result<
        unsafe extern "C" fn(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub timer_getoverrun: Result<
        unsafe extern "C" fn(__timerid: timer_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub timespec_get: Result<
        unsafe extern "C" fn(
            __ts: *mut timespec,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub access: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __type: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub faccessat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __type: ::std::os::raw::c_int,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lseek: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __offset: __off_t,
            __whence: ::std::os::raw::c_int,
        ) -> __off_t,
        ::libloading::Error,
    >,
    pub close: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub closefrom:
        Result<unsafe extern "C" fn(__lowfd: ::std::os::raw::c_int), ::libloading::Error>,
    pub read: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __nbytes: usize,
        ) -> isize,
        ::libloading::Error,
    >,
    pub write: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> isize,
        ::libloading::Error,
    >,
    pub pread: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __nbytes: usize,
            __offset: __off_t,
        ) -> isize,
        ::libloading::Error,
    >,
    pub pwrite: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
            __offset: __off_t,
        ) -> isize,
        ::libloading::Error,
    >,
    pub pipe: Result<
        unsafe extern "C" fn(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub alarm: Result<
        unsafe extern "C" fn(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub sleep: Result<
        unsafe extern "C" fn(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub ualarm: Result<
        unsafe extern "C" fn(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t,
        ::libloading::Error,
    >,
    pub usleep: Result<
        unsafe extern "C" fn(__useconds: __useconds_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pause: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub chown: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __owner: __uid_t,
            __group: __gid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fchown: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __owner: __uid_t,
            __group: __gid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lchown: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __owner: __uid_t,
            __group: __gid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fchownat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __owner: __uid_t,
            __group: __gid_t,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub chdir: Result<
        unsafe extern "C" fn(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fchdir: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getcwd: Result<
        unsafe extern "C" fn(
            __buf: *mut ::std::os::raw::c_char,
            __size: usize,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub getwd: Result<
        unsafe extern "C" fn(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub dup: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub dup2: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __fd2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execve: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
            __envp: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fexecve: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __argv: *const *mut ::std::os::raw::c_char,
            __envp: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execv: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execle: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execl: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execvp: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execlp: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub nice: Result<
        unsafe extern "C" fn(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _exit:
        Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int) -> !, ::libloading::Error>,
    pub pathconf: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __name: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub fpathconf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __name: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub sysconf: Result<
        unsafe extern "C" fn(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub confstr: Result<
        unsafe extern "C" fn(
            __name: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> usize,
        ::libloading::Error,
    >,
    pub getpid: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub getppid: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub getpgrp: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub __getpgid: Result<unsafe extern "C" fn(__pid: __pid_t) -> __pid_t, ::libloading::Error>,
    pub getpgid: Result<unsafe extern "C" fn(__pid: __pid_t) -> __pid_t, ::libloading::Error>,
    pub setpgid: Result<
        unsafe extern "C" fn(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setpgrp: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setsid: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub getsid: Result<unsafe extern "C" fn(__pid: __pid_t) -> __pid_t, ::libloading::Error>,
    pub getuid: Result<unsafe extern "C" fn() -> __uid_t, ::libloading::Error>,
    pub geteuid: Result<unsafe extern "C" fn() -> __uid_t, ::libloading::Error>,
    pub getgid: Result<unsafe extern "C" fn() -> __gid_t, ::libloading::Error>,
    pub getegid: Result<unsafe extern "C" fn() -> __gid_t, ::libloading::Error>,
    pub getgroups: Result<
        unsafe extern "C" fn(
            __size: ::std::os::raw::c_int,
            __list: *mut __gid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setuid:
        Result<unsafe extern "C" fn(__uid: __uid_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setreuid: Result<
        unsafe extern "C" fn(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub seteuid:
        Result<unsafe extern "C" fn(__uid: __uid_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setgid:
        Result<unsafe extern "C" fn(__gid: __gid_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setregid: Result<
        unsafe extern "C" fn(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setegid:
        Result<unsafe extern "C" fn(__gid: __gid_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub fork: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub vfork: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ttyname: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ttyname_r: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isatty: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ttyslot: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub link: Result<
        unsafe extern "C" fn(
            __from: *const ::std::os::raw::c_char,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub linkat: Result<
        unsafe extern "C" fn(
            __fromfd: ::std::os::raw::c_int,
            __from: *const ::std::os::raw::c_char,
            __tofd: ::std::os::raw::c_int,
            __to: *const ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub symlink: Result<
        unsafe extern "C" fn(
            __from: *const ::std::os::raw::c_char,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub readlink: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> isize,
        ::libloading::Error,
    >,
    pub symlinkat: Result<
        unsafe extern "C" fn(
            __from: *const ::std::os::raw::c_char,
            __tofd: ::std::os::raw::c_int,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub readlinkat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> isize,
        ::libloading::Error,
    >,
    pub unlink: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub unlinkat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __name: *const ::std::os::raw::c_char,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rmdir: Result<
        unsafe extern "C" fn(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub tcgetpgrp:
        Result<unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> __pid_t, ::libloading::Error>,
    pub tcsetpgrp: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __pgrp_id: __pid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getlogin:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub getlogin_r: Result<
        unsafe extern "C" fn(
            __name: *mut ::std::os::raw::c_char,
            __name_len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setlogin: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getopt: Result<
        unsafe extern "C" fn(
            ___argc: ::std::os::raw::c_int,
            ___argv: *const *mut ::std::os::raw::c_char,
            __shortopts: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gethostname: Result<
        unsafe extern "C" fn(
            __name: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sethostname: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sethostid: Result<
        unsafe extern "C" fn(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getdomainname: Result<
        unsafe extern "C" fn(
            __name: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setdomainname: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vhangup: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub revoke: Result<
        unsafe extern "C" fn(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub profil: Result<
        unsafe extern "C" fn(
            __sample_buffer: *mut ::std::os::raw::c_ushort,
            __size: usize,
            __offset: usize,
            __scale: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub acct: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getusershell:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub endusershell: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub setusershell: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub daemon: Result<
        unsafe extern "C" fn(
            __nochdir: ::std::os::raw::c_int,
            __noclose: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub chroot: Result<
        unsafe extern "C" fn(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getpass: Result<
        unsafe extern "C" fn(
            __prompt: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub fsync: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gethostid: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub sync: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub getpagesize: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub getdtablesize: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub truncate: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __length: __off_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ftruncate: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __length: __off_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub brk: Result<
        unsafe extern "C" fn(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sbrk: Result<
        unsafe extern "C" fn(__delta: isize) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub syscall: Result<
        unsafe extern "C" fn(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub fdatasync: Result<
        unsafe extern "C" fn(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub crypt: Result<
        unsafe extern "C" fn(
            __key: *const ::std::os::raw::c_char,
            __salt: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub getentropy: Result<
        unsafe extern "C" fn(
            __buffer: *mut ::std::os::raw::c_void,
            __length: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gettimeofday: Result<
        unsafe extern "C" fn(
            __tv: *mut timeval,
            __tz: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub settimeofday: Result<
        unsafe extern "C" fn(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub adjtime: Result<
        unsafe extern "C" fn(
            __delta: *const timeval,
            __olddelta: *mut timeval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getitimer: Result<
        unsafe extern "C" fn(
            __which: __itimer_which_t,
            __value: *mut itimerval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setitimer: Result<
        unsafe extern "C" fn(
            __which: __itimer_which_t,
            __new: *const itimerval,
            __old: *mut itimerval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub utimes: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __tvp: *const timeval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lutimes: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __tvp: *const timeval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub futimes: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __tvp: *const timeval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub TableInit: Result<
        unsafe extern "C" fn(
            arg1: *mut Table,
            initialSize: usize,
            deinitializer: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        ),
        ::libloading::Error,
    >,
    pub TableDeinit: Result<unsafe extern "C" fn(arg1: *mut Table), ::libloading::Error>,
    pub TableLookup: Result<
        unsafe extern "C" fn(arg1: *const Table, key: u32) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub TableInsert: Result<
        unsafe extern "C" fn(arg1: *mut Table, key: u32, value: *mut ::std::os::raw::c_void),
        ::libloading::Error,
    >,
    pub TableRemove: Result<unsafe extern "C" fn(arg1: *mut Table, key: u32), ::libloading::Error>,
    pub TableClear: Result<unsafe extern "C" fn(arg1: *mut Table), ::libloading::Error>,
    pub TableEnumerate: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            handler: ::std::option::Option<
                unsafe extern "C" fn(
                    key: u32,
                    value: *mut ::std::os::raw::c_void,
                    user: *mut ::std::os::raw::c_void,
                ),
            >,
            user: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub TableSize: Result<unsafe extern "C" fn(arg1: *const Table) -> usize, ::libloading::Error>,
    pub TableIteratorStart: Result<
        unsafe extern "C" fn(arg1: *const Table, arg2: *mut TableIterator) -> bool,
        ::libloading::Error,
    >,
    pub TableIteratorNext: Result<
        unsafe extern "C" fn(arg1: *const Table, arg2: *mut TableIterator) -> bool,
        ::libloading::Error,
    >,
    pub TableIteratorGetKey: Result<
        unsafe extern "C" fn(arg1: *const Table, arg2: *const TableIterator) -> u32,
        ::libloading::Error,
    >,
    pub TableIteratorGetValue: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            arg2: *const TableIterator,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub TableIteratorLookup: Result<
        unsafe extern "C" fn(arg1: *const Table, arg2: *mut TableIterator, key: u32) -> bool,
        ::libloading::Error,
    >,
    pub HashTableInit: Result<
        unsafe extern "C" fn(
            table: *mut Table,
            initialSize: usize,
            deinitializer: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        ),
        ::libloading::Error,
    >,
    pub HashTableInitCustom: Result<
        unsafe extern "C" fn(table: *mut Table, initialSize: usize, funcs: *const TableFunctions),
        ::libloading::Error,
    >,
    pub HashTableDeinit: Result<unsafe extern "C" fn(table: *mut Table), ::libloading::Error>,
    pub HashTableLookup: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            key: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub HashTableLookupBinary: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            key: *const ::std::os::raw::c_void,
            keylen: usize,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub HashTableLookupCustom: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            key: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub HashTableInsert: Result<
        unsafe extern "C" fn(
            arg1: *mut Table,
            key: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub HashTableInsertBinary: Result<
        unsafe extern "C" fn(
            arg1: *mut Table,
            key: *const ::std::os::raw::c_void,
            keylen: usize,
            value: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub HashTableInsertCustom: Result<
        unsafe extern "C" fn(
            arg1: *mut Table,
            key: *mut ::std::os::raw::c_void,
            value: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub HashTableRemove: Result<
        unsafe extern "C" fn(arg1: *mut Table, key: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub HashTableRemoveBinary: Result<
        unsafe extern "C" fn(arg1: *mut Table, key: *const ::std::os::raw::c_void, keylen: usize),
        ::libloading::Error,
    >,
    pub HashTableRemoveCustom: Result<
        unsafe extern "C" fn(arg1: *mut Table, key: *mut ::std::os::raw::c_void),
        ::libloading::Error,
    >,
    pub HashTableClear: Result<unsafe extern "C" fn(arg1: *mut Table), ::libloading::Error>,
    pub HashTableEnumerate: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            handler: ::std::option::Option<
                unsafe extern "C" fn(
                    key: *const ::std::os::raw::c_char,
                    value: *mut ::std::os::raw::c_void,
                    user: *mut ::std::os::raw::c_void,
                ),
            >,
            user: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub HashTableEnumerateBinary: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            handler: ::std::option::Option<
                unsafe extern "C" fn(
                    key: *const ::std::os::raw::c_char,
                    keylen: usize,
                    value: *mut ::std::os::raw::c_void,
                    user: *mut ::std::os::raw::c_void,
                ),
            >,
            user: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub HashTableEnumerateCustom: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            handler: ::std::option::Option<
                unsafe extern "C" fn(
                    key: *mut ::std::os::raw::c_void,
                    value: *mut ::std::os::raw::c_void,
                    user: *mut ::std::os::raw::c_void,
                ),
            >,
            user: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub HashTableSearch: Result<
        unsafe extern "C" fn(
            table: *const Table,
            predicate: ::std::option::Option<
                unsafe extern "C" fn(
                    key: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_void,
                    user: *const ::std::os::raw::c_void,
                ) -> bool,
            >,
            user: *const ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub HashTableSearchPointer: Result<
        unsafe extern "C" fn(
            table: *const Table,
            value: *const ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub HashTableSearchData: Result<
        unsafe extern "C" fn(
            table: *const Table,
            value: *const ::std::os::raw::c_void,
            bytes: usize,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub HashTableSearchString: Result<
        unsafe extern "C" fn(
            table: *const Table,
            value: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub HashTableSize:
        Result<unsafe extern "C" fn(arg1: *const Table) -> usize, ::libloading::Error>,
    pub HashTableIteratorStart: Result<
        unsafe extern "C" fn(arg1: *const Table, arg2: *mut TableIterator) -> bool,
        ::libloading::Error,
    >,
    pub HashTableIteratorNext: Result<
        unsafe extern "C" fn(arg1: *const Table, arg2: *mut TableIterator) -> bool,
        ::libloading::Error,
    >,
    pub HashTableIteratorGetKey: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            arg2: *const TableIterator,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub HashTableIteratorGetBinaryKey: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            arg2: *const TableIterator,
        ) -> *const ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub HashTableIteratorGetBinaryKeyLen: Result<
        unsafe extern "C" fn(arg1: *const Table, arg2: *const TableIterator) -> usize,
        ::libloading::Error,
    >,
    pub HashTableIteratorGetCustomKey: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            arg2: *const TableIterator,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub HashTableIteratorGetValue: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            arg2: *const TableIterator,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub HashTableIteratorLookup: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            arg2: *mut TableIterator,
            key: *const ::std::os::raw::c_char,
        ) -> bool,
        ::libloading::Error,
    >,
    pub HashTableIteratorLookupBinary: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            arg2: *mut TableIterator,
            key: *const ::std::os::raw::c_void,
            keylen: usize,
        ) -> bool,
        ::libloading::Error,
    >,
    pub HashTableIteratorLookupCustom: Result<
        unsafe extern "C" fn(
            arg1: *const Table,
            arg2: *mut TableIterator,
            key: *mut ::std::os::raw::c_void,
        ) -> bool,
        ::libloading::Error,
    >,
    pub ConfigurationInit:
        Result<unsafe extern "C" fn(arg1: *mut Configuration), ::libloading::Error>,
    pub ConfigurationDeinit:
        Result<unsafe extern "C" fn(arg1: *mut Configuration), ::libloading::Error>,
    pub ConfigurationSetValue: Result<
        unsafe extern "C" fn(
            arg1: *mut Configuration,
            section: *const ::std::os::raw::c_char,
            key: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub ConfigurationSetIntValue: Result<
        unsafe extern "C" fn(
            arg1: *mut Configuration,
            section: *const ::std::os::raw::c_char,
            key: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub ConfigurationSetUIntValue: Result<
        unsafe extern "C" fn(
            arg1: *mut Configuration,
            section: *const ::std::os::raw::c_char,
            key: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub ConfigurationSetFloatValue: Result<
        unsafe extern "C" fn(
            arg1: *mut Configuration,
            section: *const ::std::os::raw::c_char,
            key: *const ::std::os::raw::c_char,
            value: f32,
        ),
        ::libloading::Error,
    >,
    pub ConfigurationHasSection: Result<
        unsafe extern "C" fn(
            arg1: *const Configuration,
            section: *const ::std::os::raw::c_char,
        ) -> bool,
        ::libloading::Error,
    >,
    pub ConfigurationDeleteSection: Result<
        unsafe extern "C" fn(arg1: *mut Configuration, section: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub ConfigurationGetValue: Result<
        unsafe extern "C" fn(
            arg1: *const Configuration,
            section: *const ::std::os::raw::c_char,
            key: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ConfigurationClearValue: Result<
        unsafe extern "C" fn(
            arg1: *mut Configuration,
            section: *const ::std::os::raw::c_char,
            key: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub ConfigurationRead: Result<
        unsafe extern "C" fn(arg1: *mut Configuration, path: *const ::std::os::raw::c_char) -> bool,
        ::libloading::Error,
    >,
    pub ConfigurationReadVFile: Result<
        unsafe extern "C" fn(arg1: *mut Configuration, vf: *mut VFile) -> bool,
        ::libloading::Error,
    >,
    pub ConfigurationWrite: Result<
        unsafe extern "C" fn(
            arg1: *const Configuration,
            path: *const ::std::os::raw::c_char,
        ) -> bool,
        ::libloading::Error,
    >,
    pub ConfigurationWriteSection: Result<
        unsafe extern "C" fn(
            arg1: *const Configuration,
            path: *const ::std::os::raw::c_char,
            section: *const ::std::os::raw::c_char,
        ) -> bool,
        ::libloading::Error,
    >,
    pub ConfigurationWriteVFile: Result<
        unsafe extern "C" fn(arg1: *const Configuration, vf: *mut VFile) -> bool,
        ::libloading::Error,
    >,
    pub ConfigurationEnumerateSections: Result<
        unsafe extern "C" fn(
            configuration: *const Configuration,
            handler: ::std::option::Option<
                unsafe extern "C" fn(
                    sectionName: *const ::std::os::raw::c_char,
                    user: *mut ::std::os::raw::c_void,
                ),
            >,
            user: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub ConfigurationEnumerate: Result<
        unsafe extern "C" fn(
            configuration: *const Configuration,
            section: *const ::std::os::raw::c_char,
            handler: ::std::option::Option<
                unsafe extern "C" fn(
                    key: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                    user: *mut ::std::os::raw::c_void,
                ),
            >,
            user: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigInit: Result<
        unsafe extern "C" fn(arg1: *mut mCoreConfig, port: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub mCoreConfigDeinit:
        Result<unsafe extern "C" fn(arg1: *mut mCoreConfig), ::libloading::Error>,
    pub mCoreConfigLoad:
        Result<unsafe extern "C" fn(arg1: *mut mCoreConfig) -> bool, ::libloading::Error>,
    pub mCoreConfigSave:
        Result<unsafe extern "C" fn(arg1: *const mCoreConfig) -> bool, ::libloading::Error>,
    pub mCoreConfigLoadPath: Result<
        unsafe extern "C" fn(arg1: *mut mCoreConfig, path: *const ::std::os::raw::c_char) -> bool,
        ::libloading::Error,
    >,
    pub mCoreConfigSavePath: Result<
        unsafe extern "C" fn(arg1: *const mCoreConfig, path: *const ::std::os::raw::c_char) -> bool,
        ::libloading::Error,
    >,
    pub mCoreConfigLoadVFile: Result<
        unsafe extern "C" fn(arg1: *mut mCoreConfig, vf: *mut VFile) -> bool,
        ::libloading::Error,
    >,
    pub mCoreConfigSaveVFile: Result<
        unsafe extern "C" fn(arg1: *const mCoreConfig, vf: *mut VFile) -> bool,
        ::libloading::Error,
    >,
    pub mCoreConfigMakePortable: Result<
        unsafe extern "C" fn(arg1: *const mCoreConfig, path: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub mCoreConfigDirectory: Result<
        unsafe extern "C" fn(out: *mut ::std::os::raw::c_char, outLength: usize),
        ::libloading::Error,
    >,
    pub mCoreConfigPortableIniPath: Result<
        unsafe extern "C" fn(out: *mut ::std::os::raw::c_char, outLength: usize),
        ::libloading::Error,
    >,
    pub mCoreConfigPortablePath: Result<
        unsafe extern "C" fn(out: *mut ::std::os::raw::c_char, outLength: usize),
        ::libloading::Error,
    >,
    pub mCoreConfigIsPortable: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub mCoreConfigGetValue: Result<
        unsafe extern "C" fn(
            arg1: *const mCoreConfig,
            key: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub mCoreConfigGetBoolValue: Result<
        unsafe extern "C" fn(
            arg1: *const mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: *mut bool,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mCoreConfigGetIntValue: Result<
        unsafe extern "C" fn(
            arg1: *const mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_int,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mCoreConfigGetUIntValue: Result<
        unsafe extern "C" fn(
            arg1: *const mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: *mut ::std::os::raw::c_uint,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mCoreConfigGetFloatValue: Result<
        unsafe extern "C" fn(
            arg1: *const mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: *mut f32,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mCoreConfigSetValue: Result<
        unsafe extern "C" fn(
            arg1: *mut mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigSetIntValue: Result<
        unsafe extern "C" fn(
            arg1: *mut mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigSetUIntValue: Result<
        unsafe extern "C" fn(
            arg1: *mut mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigSetFloatValue: Result<
        unsafe extern "C" fn(
            arg1: *mut mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: f32,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigSetDefaultValue: Result<
        unsafe extern "C" fn(
            arg1: *mut mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigSetDefaultIntValue: Result<
        unsafe extern "C" fn(
            arg1: *mut mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigSetDefaultUIntValue: Result<
        unsafe extern "C" fn(
            arg1: *mut mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigSetDefaultFloatValue: Result<
        unsafe extern "C" fn(
            arg1: *mut mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: f32,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigSetOverrideValue: Result<
        unsafe extern "C" fn(
            arg1: *mut mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigSetOverrideIntValue: Result<
        unsafe extern "C" fn(
            arg1: *mut mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigSetOverrideUIntValue: Result<
        unsafe extern "C" fn(
            arg1: *mut mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigSetOverrideFloatValue: Result<
        unsafe extern "C" fn(
            arg1: *mut mCoreConfig,
            key: *const ::std::os::raw::c_char,
            value: f32,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigCopyValue: Result<
        unsafe extern "C" fn(
            config: *mut mCoreConfig,
            src: *const mCoreConfig,
            key: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigMap: Result<
        unsafe extern "C" fn(config: *const mCoreConfig, opts: *mut mCoreOptions),
        ::libloading::Error,
    >,
    pub mCoreConfigLoadDefaults: Result<
        unsafe extern "C" fn(config: *mut mCoreConfig, opts: *const mCoreOptions),
        ::libloading::Error,
    >,
    pub mCoreConfigEnumerate: Result<
        unsafe extern "C" fn(
            config: *const mCoreConfig,
            prefix: *const ::std::os::raw::c_char,
            handler: ::std::option::Option<
                unsafe extern "C" fn(
                    key: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                    type_: mCoreConfigLevel,
                    user: *mut ::std::os::raw::c_void,
                ),
            >,
            user: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mCoreConfigGetInput: Result<
        unsafe extern "C" fn(arg1: *mut mCoreConfig) -> *mut Configuration,
        ::libloading::Error,
    >,
    pub mCoreConfigGetOverrides: Result<
        unsafe extern "C" fn(arg1: *mut mCoreConfig) -> *mut Configuration,
        ::libloading::Error,
    >,
    pub mCoreConfigGetOverridesConst: Result<
        unsafe extern "C" fn(arg1: *const mCoreConfig) -> *const Configuration,
        ::libloading::Error,
    >,
    pub mCoreConfigFreeOpts:
        Result<unsafe extern "C" fn(opts: *mut mCoreOptions), ::libloading::Error>,
    pub mDirectorySetInit:
        Result<unsafe extern "C" fn(dirs: *mut mDirectorySet), ::libloading::Error>,
    pub mDirectorySetDeinit:
        Result<unsafe extern "C" fn(dirs: *mut mDirectorySet), ::libloading::Error>,
    pub mDirectorySetAttachBase: Result<
        unsafe extern "C" fn(dirs: *mut mDirectorySet, base: *mut VDir),
        ::libloading::Error,
    >,
    pub mDirectorySetDetachBase:
        Result<unsafe extern "C" fn(dirs: *mut mDirectorySet), ::libloading::Error>,
    pub mDirectorySetOpenPath: Result<
        unsafe extern "C" fn(
            dirs: *mut mDirectorySet,
            path: *const ::std::os::raw::c_char,
            filter: ::std::option::Option<unsafe extern "C" fn(arg1: *mut VFile) -> bool>,
        ) -> *mut VFile,
        ::libloading::Error,
    >,
    pub mDirectorySetOpenSuffix: Result<
        unsafe extern "C" fn(
            dirs: *mut mDirectorySet,
            dir: *mut VDir,
            suffix: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
        ) -> *mut VFile,
        ::libloading::Error,
    >,
    pub mDirectorySetMapOptions: Result<
        unsafe extern "C" fn(dirs: *mut mDirectorySet, opts: *const mCoreOptions),
        ::libloading::Error,
    >,
    pub mInputMapInit: Result<
        unsafe extern "C" fn(arg1: *mut mInputMap, info: *const mInputPlatformInfo),
        ::libloading::Error,
    >,
    pub mInputMapDeinit: Result<unsafe extern "C" fn(arg1: *mut mInputMap), ::libloading::Error>,
    pub mInputMapKey: Result<
        unsafe extern "C" fn(
            arg1: *const mInputMap,
            type_: u32,
            key: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mInputMapKeyBits: Result<
        unsafe extern "C" fn(
            map: *const mInputMap,
            type_: u32,
            bits: u32,
            offset: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mInputBindKey: Result<
        unsafe extern "C" fn(
            arg1: *mut mInputMap,
            type_: u32,
            key: ::std::os::raw::c_int,
            input: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mInputQueryBinding: Result<
        unsafe extern "C" fn(
            arg1: *const mInputMap,
            type_: u32,
            input: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mInputUnbindKey: Result<
        unsafe extern "C" fn(arg1: *mut mInputMap, type_: u32, input: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub mInputUnbindAllKeys:
        Result<unsafe extern "C" fn(arg1: *mut mInputMap, type_: u32), ::libloading::Error>,
    pub mInputMapAxis: Result<
        unsafe extern "C" fn(
            arg1: *const mInputMap,
            type_: u32,
            axis: ::std::os::raw::c_int,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mInputClearAxis: Result<
        unsafe extern "C" fn(
            arg1: *const mInputMap,
            type_: u32,
            axis: ::std::os::raw::c_int,
            keys: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mInputBindAxis: Result<
        unsafe extern "C" fn(
            arg1: *mut mInputMap,
            type_: u32,
            axis: ::std::os::raw::c_int,
            description: *const mInputAxis,
        ),
        ::libloading::Error,
    >,
    pub mInputUnbindAxis: Result<
        unsafe extern "C" fn(arg1: *mut mInputMap, type_: u32, axis: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub mInputUnbindAllAxes:
        Result<unsafe extern "C" fn(arg1: *mut mInputMap, type_: u32), ::libloading::Error>,
    pub mInputQueryAxis: Result<
        unsafe extern "C" fn(
            arg1: *const mInputMap,
            type_: u32,
            axis: ::std::os::raw::c_int,
        ) -> *const mInputAxis,
        ::libloading::Error,
    >,
    pub mInputEnumerateAxes: Result<
        unsafe extern "C" fn(
            arg1: *const mInputMap,
            type_: u32,
            handler: ::std::option::Option<
                unsafe extern "C" fn(
                    axis: ::std::os::raw::c_int,
                    description: *const mInputAxis,
                    user: *mut ::std::os::raw::c_void,
                ),
            >,
            user: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mInputMapHat: Result<
        unsafe extern "C" fn(
            arg1: *const mInputMap,
            type_: u32,
            id: ::std::os::raw::c_int,
            direction: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mInputBindHat: Result<
        unsafe extern "C" fn(
            arg1: *mut mInputMap,
            type_: u32,
            id: ::std::os::raw::c_int,
            bindings: *const mInputHatBindings,
        ),
        ::libloading::Error,
    >,
    pub mInputQueryHat: Result<
        unsafe extern "C" fn(
            arg1: *const mInputMap,
            type_: u32,
            id: ::std::os::raw::c_int,
            bindings: *mut mInputHatBindings,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mInputUnbindHat: Result<
        unsafe extern "C" fn(arg1: *mut mInputMap, type_: u32, id: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub mInputUnbindAllHats:
        Result<unsafe extern "C" fn(arg1: *mut mInputMap, type_: u32), ::libloading::Error>,
    pub mInputEnumerateHats: Result<
        unsafe extern "C" fn(
            arg1: *const mInputMap,
            type_: u32,
            handler: ::std::option::Option<
                unsafe extern "C" fn(
                    hat: ::std::os::raw::c_int,
                    bindings: *const mInputHatBindings,
                    user: *mut ::std::os::raw::c_void,
                ),
            >,
            user: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub mInputMapLoad: Result<
        unsafe extern "C" fn(arg1: *mut mInputMap, type_: u32, arg2: *const Configuration) -> bool,
        ::libloading::Error,
    >,
    pub mInputMapSave: Result<
        unsafe extern "C" fn(arg1: *const mInputMap, type_: u32, arg2: *mut Configuration),
        ::libloading::Error,
    >,
    pub mInputProfileLoad: Result<
        unsafe extern "C" fn(
            arg1: *mut mInputMap,
            type_: u32,
            arg2: *const Configuration,
            profile: *const ::std::os::raw::c_char,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mInputProfileSave: Result<
        unsafe extern "C" fn(
            arg1: *const mInputMap,
            type_: u32,
            arg2: *mut Configuration,
            profile: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub mInputGetPreferredDevice: Result<
        unsafe extern "C" fn(
            arg1: *const Configuration,
            platformName: *const ::std::os::raw::c_char,
            type_: u32,
            playerId: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub mInputSetPreferredDevice: Result<
        unsafe extern "C" fn(
            arg1: *mut Configuration,
            platformName: *const ::std::os::raw::c_char,
            type_: u32,
            playerId: ::std::os::raw::c_int,
            deviceName: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub mInputGetCustomValue: Result<
        unsafe extern "C" fn(
            config: *const Configuration,
            platformName: *const ::std::os::raw::c_char,
            type_: u32,
            key: *const ::std::os::raw::c_char,
            profile: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub mInputSetCustomValue: Result<
        unsafe extern "C" fn(
            config: *mut Configuration,
            platformName: *const ::std::os::raw::c_char,
            type_: u32,
            key: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
            profile: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub mImageCreate: Result<
        unsafe extern "C" fn(
            width: ::std::os::raw::c_uint,
            height: ::std::os::raw::c_uint,
            format: mColorFormat,
        ) -> *mut mImage,
        ::libloading::Error,
    >,
    pub mImageCreateWithStride: Result<
        unsafe extern "C" fn(
            width: ::std::os::raw::c_uint,
            height: ::std::os::raw::c_uint,
            stride: ::std::os::raw::c_uint,
            format: mColorFormat,
        ) -> *mut mImage,
        ::libloading::Error,
    >,
    pub mImageCreateFromConstBuffer: Result<
        unsafe extern "C" fn(
            width: ::std::os::raw::c_uint,
            height: ::std::os::raw::c_uint,
            stride: ::std::os::raw::c_uint,
            format: mColorFormat,
            pixels: *const ::std::os::raw::c_void,
        ) -> *mut mImage,
        ::libloading::Error,
    >,
    pub mImageLoad: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *mut mImage,
        ::libloading::Error,
    >,
    pub mImageLoadVF:
        Result<unsafe extern "C" fn(vf: *mut VFile) -> *mut mImage, ::libloading::Error>,
    pub mImageConvertToFormat: Result<
        unsafe extern "C" fn(arg1: *const mImage, format: mColorFormat) -> *mut mImage,
        ::libloading::Error,
    >,
    pub mImageDestroy: Result<unsafe extern "C" fn(arg1: *mut mImage), ::libloading::Error>,
    pub mImageSave: Result<
        unsafe extern "C" fn(
            arg1: *const mImage,
            path: *const ::std::os::raw::c_char,
            format: *const ::std::os::raw::c_char,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mImageSaveVF: Result<
        unsafe extern "C" fn(
            arg1: *const mImage,
            vf: *mut VFile,
            format: *const ::std::os::raw::c_char,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mImageGetPixel: Result<
        unsafe extern "C" fn(
            image: *const mImage,
            x: ::std::os::raw::c_uint,
            y: ::std::os::raw::c_uint,
        ) -> u32,
        ::libloading::Error,
    >,
    pub mImageGetPixelRaw: Result<
        unsafe extern "C" fn(
            image: *const mImage,
            x: ::std::os::raw::c_uint,
            y: ::std::os::raw::c_uint,
        ) -> u32,
        ::libloading::Error,
    >,
    pub mImageSetPixel: Result<
        unsafe extern "C" fn(
            image: *mut mImage,
            x: ::std::os::raw::c_uint,
            y: ::std::os::raw::c_uint,
            color: u32,
        ),
        ::libloading::Error,
    >,
    pub mImageSetPixelRaw: Result<
        unsafe extern "C" fn(
            image: *mut mImage,
            x: ::std::os::raw::c_uint,
            y: ::std::os::raw::c_uint,
            color: u32,
        ),
        ::libloading::Error,
    >,
    pub mImageSetPaletteSize: Result<
        unsafe extern "C" fn(image: *mut mImage, count: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub mImageSetPaletteEntry: Result<
        unsafe extern "C" fn(image: *mut mImage, index: ::std::os::raw::c_uint, color: u32),
        ::libloading::Error,
    >,
    pub mImageBlit: Result<
        unsafe extern "C" fn(
            image: *mut mImage,
            source: *const mImage,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mImageComposite: Result<
        unsafe extern "C" fn(
            image: *mut mImage,
            source: *const mImage,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mImageCompositeWithAlpha: Result<
        unsafe extern "C" fn(
            image: *mut mImage,
            source: *const mImage,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            alpha: f32,
        ),
        ::libloading::Error,
    >,
    pub mPainterInit: Result<
        unsafe extern "C" fn(arg1: *mut mPainter, backing: *mut mImage),
        ::libloading::Error,
    >,
    pub mPainterDrawRectangle: Result<
        unsafe extern "C" fn(
            arg1: *mut mPainter,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mPainterDrawLine: Result<
        unsafe extern "C" fn(
            arg1: *mut mPainter,
            x1: ::std::os::raw::c_int,
            y1: ::std::os::raw::c_int,
            x2: ::std::os::raw::c_int,
            y2: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mPainterDrawCircle: Result<
        unsafe extern "C" fn(
            arg1: *mut mPainter,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            diameter: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mColorConvert: Result<
        unsafe extern "C" fn(color: u32, from: mColorFormat, to: mColorFormat) -> u32,
        ::libloading::Error,
    >,
    pub mImageColorConvert: Result<
        unsafe extern "C" fn(color: u32, from: *const mImage, to: mColorFormat) -> u32,
        ::libloading::Error,
    >,
    pub IntListInit:
        Result<unsafe extern "C" fn(vector: *mut IntList, capacity: usize), ::libloading::Error>,
    pub IntListDeinit: Result<unsafe extern "C" fn(vector: *mut IntList), ::libloading::Error>,
    pub IntListGetPointer: Result<
        unsafe extern "C" fn(vector: *mut IntList, location: usize) -> *mut ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub IntListGetConstPointer: Result<
        unsafe extern "C" fn(
            vector: *const IntList,
            location: usize,
        ) -> *const ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub IntListAppend: Result<
        unsafe extern "C" fn(vector: *mut IntList) -> *mut ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub IntListClear: Result<unsafe extern "C" fn(vector: *mut IntList), ::libloading::Error>,
    pub IntListResize:
        Result<unsafe extern "C" fn(vector: *mut IntList, change: isize), ::libloading::Error>,
    pub IntListShift: Result<
        unsafe extern "C" fn(vector: *mut IntList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub IntListUnshift: Result<
        unsafe extern "C" fn(vector: *mut IntList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub IntListEnsureCapacity:
        Result<unsafe extern "C" fn(vector: *mut IntList, capacity: usize), ::libloading::Error>,
    pub IntListSize:
        Result<unsafe extern "C" fn(vector: *const IntList) -> usize, ::libloading::Error>,
    pub IntListIndex: Result<
        unsafe extern "C" fn(vector: *const IntList, member: *const ::std::os::raw::c_int) -> usize,
        ::libloading::Error,
    >,
    pub IntListCopy:
        Result<unsafe extern "C" fn(dest: *mut IntList, src: *const IntList), ::libloading::Error>,
    pub SInt8ListInit:
        Result<unsafe extern "C" fn(vector: *mut SInt8List, capacity: usize), ::libloading::Error>,
    pub SInt8ListDeinit: Result<unsafe extern "C" fn(vector: *mut SInt8List), ::libloading::Error>,
    pub SInt8ListGetPointer: Result<
        unsafe extern "C" fn(vector: *mut SInt8List, location: usize) -> *mut i8,
        ::libloading::Error,
    >,
    pub SInt8ListGetConstPointer: Result<
        unsafe extern "C" fn(vector: *const SInt8List, location: usize) -> *const i8,
        ::libloading::Error,
    >,
    pub SInt8ListAppend:
        Result<unsafe extern "C" fn(vector: *mut SInt8List) -> *mut i8, ::libloading::Error>,
    pub SInt8ListClear: Result<unsafe extern "C" fn(vector: *mut SInt8List), ::libloading::Error>,
    pub SInt8ListResize:
        Result<unsafe extern "C" fn(vector: *mut SInt8List, change: isize), ::libloading::Error>,
    pub SInt8ListShift: Result<
        unsafe extern "C" fn(vector: *mut SInt8List, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub SInt8ListUnshift: Result<
        unsafe extern "C" fn(vector: *mut SInt8List, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub SInt8ListEnsureCapacity:
        Result<unsafe extern "C" fn(vector: *mut SInt8List, capacity: usize), ::libloading::Error>,
    pub SInt8ListSize:
        Result<unsafe extern "C" fn(vector: *const SInt8List) -> usize, ::libloading::Error>,
    pub SInt8ListIndex: Result<
        unsafe extern "C" fn(vector: *const SInt8List, member: *const i8) -> usize,
        ::libloading::Error,
    >,
    pub SInt8ListCopy: Result<
        unsafe extern "C" fn(dest: *mut SInt8List, src: *const SInt8List),
        ::libloading::Error,
    >,
    pub SInt16ListInit:
        Result<unsafe extern "C" fn(vector: *mut SInt16List, capacity: usize), ::libloading::Error>,
    pub SInt16ListDeinit:
        Result<unsafe extern "C" fn(vector: *mut SInt16List), ::libloading::Error>,
    pub SInt16ListGetPointer: Result<
        unsafe extern "C" fn(vector: *mut SInt16List, location: usize) -> *mut i16,
        ::libloading::Error,
    >,
    pub SInt16ListGetConstPointer: Result<
        unsafe extern "C" fn(vector: *const SInt16List, location: usize) -> *const i16,
        ::libloading::Error,
    >,
    pub SInt16ListAppend:
        Result<unsafe extern "C" fn(vector: *mut SInt16List) -> *mut i16, ::libloading::Error>,
    pub SInt16ListClear: Result<unsafe extern "C" fn(vector: *mut SInt16List), ::libloading::Error>,
    pub SInt16ListResize:
        Result<unsafe extern "C" fn(vector: *mut SInt16List, change: isize), ::libloading::Error>,
    pub SInt16ListShift: Result<
        unsafe extern "C" fn(vector: *mut SInt16List, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub SInt16ListUnshift: Result<
        unsafe extern "C" fn(vector: *mut SInt16List, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub SInt16ListEnsureCapacity:
        Result<unsafe extern "C" fn(vector: *mut SInt16List, capacity: usize), ::libloading::Error>,
    pub SInt16ListSize:
        Result<unsafe extern "C" fn(vector: *const SInt16List) -> usize, ::libloading::Error>,
    pub SInt16ListIndex: Result<
        unsafe extern "C" fn(vector: *const SInt16List, member: *const i16) -> usize,
        ::libloading::Error,
    >,
    pub SInt16ListCopy: Result<
        unsafe extern "C" fn(dest: *mut SInt16List, src: *const SInt16List),
        ::libloading::Error,
    >,
    pub SInt32ListInit:
        Result<unsafe extern "C" fn(vector: *mut SInt32List, capacity: usize), ::libloading::Error>,
    pub SInt32ListDeinit:
        Result<unsafe extern "C" fn(vector: *mut SInt32List), ::libloading::Error>,
    pub SInt32ListGetPointer: Result<
        unsafe extern "C" fn(vector: *mut SInt32List, location: usize) -> *mut i32,
        ::libloading::Error,
    >,
    pub SInt32ListGetConstPointer: Result<
        unsafe extern "C" fn(vector: *const SInt32List, location: usize) -> *const i32,
        ::libloading::Error,
    >,
    pub SInt32ListAppend:
        Result<unsafe extern "C" fn(vector: *mut SInt32List) -> *mut i32, ::libloading::Error>,
    pub SInt32ListClear: Result<unsafe extern "C" fn(vector: *mut SInt32List), ::libloading::Error>,
    pub SInt32ListResize:
        Result<unsafe extern "C" fn(vector: *mut SInt32List, change: isize), ::libloading::Error>,
    pub SInt32ListShift: Result<
        unsafe extern "C" fn(vector: *mut SInt32List, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub SInt32ListUnshift: Result<
        unsafe extern "C" fn(vector: *mut SInt32List, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub SInt32ListEnsureCapacity:
        Result<unsafe extern "C" fn(vector: *mut SInt32List, capacity: usize), ::libloading::Error>,
    pub SInt32ListSize:
        Result<unsafe extern "C" fn(vector: *const SInt32List) -> usize, ::libloading::Error>,
    pub SInt32ListIndex: Result<
        unsafe extern "C" fn(vector: *const SInt32List, member: *const i32) -> usize,
        ::libloading::Error,
    >,
    pub SInt32ListCopy: Result<
        unsafe extern "C" fn(dest: *mut SInt32List, src: *const SInt32List),
        ::libloading::Error,
    >,
    pub SIntPtrListInit: Result<
        unsafe extern "C" fn(vector: *mut SIntPtrList, capacity: usize),
        ::libloading::Error,
    >,
    pub SIntPtrListDeinit:
        Result<unsafe extern "C" fn(vector: *mut SIntPtrList), ::libloading::Error>,
    pub SIntPtrListGetPointer: Result<
        unsafe extern "C" fn(vector: *mut SIntPtrList, location: usize) -> *mut isize,
        ::libloading::Error,
    >,
    pub SIntPtrListGetConstPointer: Result<
        unsafe extern "C" fn(vector: *const SIntPtrList, location: usize) -> *const isize,
        ::libloading::Error,
    >,
    pub SIntPtrListAppend:
        Result<unsafe extern "C" fn(vector: *mut SIntPtrList) -> *mut isize, ::libloading::Error>,
    pub SIntPtrListClear:
        Result<unsafe extern "C" fn(vector: *mut SIntPtrList), ::libloading::Error>,
    pub SIntPtrListResize:
        Result<unsafe extern "C" fn(vector: *mut SIntPtrList, change: isize), ::libloading::Error>,
    pub SIntPtrListShift: Result<
        unsafe extern "C" fn(vector: *mut SIntPtrList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub SIntPtrListUnshift: Result<
        unsafe extern "C" fn(vector: *mut SIntPtrList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub SIntPtrListEnsureCapacity: Result<
        unsafe extern "C" fn(vector: *mut SIntPtrList, capacity: usize),
        ::libloading::Error,
    >,
    pub SIntPtrListSize:
        Result<unsafe extern "C" fn(vector: *const SIntPtrList) -> usize, ::libloading::Error>,
    pub SIntPtrListIndex: Result<
        unsafe extern "C" fn(vector: *const SIntPtrList, member: *const isize) -> usize,
        ::libloading::Error,
    >,
    pub SIntPtrListCopy: Result<
        unsafe extern "C" fn(dest: *mut SIntPtrList, src: *const SIntPtrList),
        ::libloading::Error,
    >,
    pub UInt8ListInit:
        Result<unsafe extern "C" fn(vector: *mut UInt8List, capacity: usize), ::libloading::Error>,
    pub UInt8ListDeinit: Result<unsafe extern "C" fn(vector: *mut UInt8List), ::libloading::Error>,
    pub UInt8ListGetPointer: Result<
        unsafe extern "C" fn(vector: *mut UInt8List, location: usize) -> *mut u8,
        ::libloading::Error,
    >,
    pub UInt8ListGetConstPointer: Result<
        unsafe extern "C" fn(vector: *const UInt8List, location: usize) -> *const u8,
        ::libloading::Error,
    >,
    pub UInt8ListAppend:
        Result<unsafe extern "C" fn(vector: *mut UInt8List) -> *mut u8, ::libloading::Error>,
    pub UInt8ListClear: Result<unsafe extern "C" fn(vector: *mut UInt8List), ::libloading::Error>,
    pub UInt8ListResize:
        Result<unsafe extern "C" fn(vector: *mut UInt8List, change: isize), ::libloading::Error>,
    pub UInt8ListShift: Result<
        unsafe extern "C" fn(vector: *mut UInt8List, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub UInt8ListUnshift: Result<
        unsafe extern "C" fn(vector: *mut UInt8List, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub UInt8ListEnsureCapacity:
        Result<unsafe extern "C" fn(vector: *mut UInt8List, capacity: usize), ::libloading::Error>,
    pub UInt8ListSize:
        Result<unsafe extern "C" fn(vector: *const UInt8List) -> usize, ::libloading::Error>,
    pub UInt8ListIndex: Result<
        unsafe extern "C" fn(vector: *const UInt8List, member: *const u8) -> usize,
        ::libloading::Error,
    >,
    pub UInt8ListCopy: Result<
        unsafe extern "C" fn(dest: *mut UInt8List, src: *const UInt8List),
        ::libloading::Error,
    >,
    pub UInt16ListInit:
        Result<unsafe extern "C" fn(vector: *mut UInt16List, capacity: usize), ::libloading::Error>,
    pub UInt16ListDeinit:
        Result<unsafe extern "C" fn(vector: *mut UInt16List), ::libloading::Error>,
    pub UInt16ListGetPointer: Result<
        unsafe extern "C" fn(vector: *mut UInt16List, location: usize) -> *mut u16,
        ::libloading::Error,
    >,
    pub UInt16ListGetConstPointer: Result<
        unsafe extern "C" fn(vector: *const UInt16List, location: usize) -> *const u16,
        ::libloading::Error,
    >,
    pub UInt16ListAppend:
        Result<unsafe extern "C" fn(vector: *mut UInt16List) -> *mut u16, ::libloading::Error>,
    pub UInt16ListClear: Result<unsafe extern "C" fn(vector: *mut UInt16List), ::libloading::Error>,
    pub UInt16ListResize:
        Result<unsafe extern "C" fn(vector: *mut UInt16List, change: isize), ::libloading::Error>,
    pub UInt16ListShift: Result<
        unsafe extern "C" fn(vector: *mut UInt16List, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub UInt16ListUnshift: Result<
        unsafe extern "C" fn(vector: *mut UInt16List, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub UInt16ListEnsureCapacity:
        Result<unsafe extern "C" fn(vector: *mut UInt16List, capacity: usize), ::libloading::Error>,
    pub UInt16ListSize:
        Result<unsafe extern "C" fn(vector: *const UInt16List) -> usize, ::libloading::Error>,
    pub UInt16ListIndex: Result<
        unsafe extern "C" fn(vector: *const UInt16List, member: *const u16) -> usize,
        ::libloading::Error,
    >,
    pub UInt16ListCopy: Result<
        unsafe extern "C" fn(dest: *mut UInt16List, src: *const UInt16List),
        ::libloading::Error,
    >,
    pub UInt32ListInit:
        Result<unsafe extern "C" fn(vector: *mut UInt32List, capacity: usize), ::libloading::Error>,
    pub UInt32ListDeinit:
        Result<unsafe extern "C" fn(vector: *mut UInt32List), ::libloading::Error>,
    pub UInt32ListGetPointer: Result<
        unsafe extern "C" fn(vector: *mut UInt32List, location: usize) -> *mut u32,
        ::libloading::Error,
    >,
    pub UInt32ListGetConstPointer: Result<
        unsafe extern "C" fn(vector: *const UInt32List, location: usize) -> *const u32,
        ::libloading::Error,
    >,
    pub UInt32ListAppend:
        Result<unsafe extern "C" fn(vector: *mut UInt32List) -> *mut u32, ::libloading::Error>,
    pub UInt32ListClear: Result<unsafe extern "C" fn(vector: *mut UInt32List), ::libloading::Error>,
    pub UInt32ListResize:
        Result<unsafe extern "C" fn(vector: *mut UInt32List, change: isize), ::libloading::Error>,
    pub UInt32ListShift: Result<
        unsafe extern "C" fn(vector: *mut UInt32List, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub UInt32ListUnshift: Result<
        unsafe extern "C" fn(vector: *mut UInt32List, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub UInt32ListEnsureCapacity:
        Result<unsafe extern "C" fn(vector: *mut UInt32List, capacity: usize), ::libloading::Error>,
    pub UInt32ListSize:
        Result<unsafe extern "C" fn(vector: *const UInt32List) -> usize, ::libloading::Error>,
    pub UInt32ListIndex: Result<
        unsafe extern "C" fn(vector: *const UInt32List, member: *const u32) -> usize,
        ::libloading::Error,
    >,
    pub UInt32ListCopy: Result<
        unsafe extern "C" fn(dest: *mut UInt32List, src: *const UInt32List),
        ::libloading::Error,
    >,
    pub UIntPtrListInit: Result<
        unsafe extern "C" fn(vector: *mut UIntPtrList, capacity: usize),
        ::libloading::Error,
    >,
    pub UIntPtrListDeinit:
        Result<unsafe extern "C" fn(vector: *mut UIntPtrList), ::libloading::Error>,
    pub UIntPtrListGetPointer: Result<
        unsafe extern "C" fn(vector: *mut UIntPtrList, location: usize) -> *mut usize,
        ::libloading::Error,
    >,
    pub UIntPtrListGetConstPointer: Result<
        unsafe extern "C" fn(vector: *const UIntPtrList, location: usize) -> *const usize,
        ::libloading::Error,
    >,
    pub UIntPtrListAppend:
        Result<unsafe extern "C" fn(vector: *mut UIntPtrList) -> *mut usize, ::libloading::Error>,
    pub UIntPtrListClear:
        Result<unsafe extern "C" fn(vector: *mut UIntPtrList), ::libloading::Error>,
    pub UIntPtrListResize:
        Result<unsafe extern "C" fn(vector: *mut UIntPtrList, change: isize), ::libloading::Error>,
    pub UIntPtrListShift: Result<
        unsafe extern "C" fn(vector: *mut UIntPtrList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub UIntPtrListUnshift: Result<
        unsafe extern "C" fn(vector: *mut UIntPtrList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub UIntPtrListEnsureCapacity: Result<
        unsafe extern "C" fn(vector: *mut UIntPtrList, capacity: usize),
        ::libloading::Error,
    >,
    pub UIntPtrListSize:
        Result<unsafe extern "C" fn(vector: *const UIntPtrList) -> usize, ::libloading::Error>,
    pub UIntPtrListIndex: Result<
        unsafe extern "C" fn(vector: *const UIntPtrList, member: *const usize) -> usize,
        ::libloading::Error,
    >,
    pub UIntPtrListCopy: Result<
        unsafe extern "C" fn(dest: *mut UIntPtrList, src: *const UIntPtrList),
        ::libloading::Error,
    >,
    pub StringListInit:
        Result<unsafe extern "C" fn(vector: *mut StringList, capacity: usize), ::libloading::Error>,
    pub StringListDeinit:
        Result<unsafe extern "C" fn(vector: *mut StringList), ::libloading::Error>,
    pub StringListGetPointer: Result<
        unsafe extern "C" fn(
            vector: *mut StringList,
            location: usize,
        ) -> *mut *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub StringListGetConstPointer: Result<
        unsafe extern "C" fn(
            vector: *const StringList,
            location: usize,
        ) -> *const *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub StringListAppend: Result<
        unsafe extern "C" fn(vector: *mut StringList) -> *mut *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub StringListClear: Result<unsafe extern "C" fn(vector: *mut StringList), ::libloading::Error>,
    pub StringListResize:
        Result<unsafe extern "C" fn(vector: *mut StringList, change: isize), ::libloading::Error>,
    pub StringListShift: Result<
        unsafe extern "C" fn(vector: *mut StringList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub StringListUnshift: Result<
        unsafe extern "C" fn(vector: *mut StringList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub StringListEnsureCapacity:
        Result<unsafe extern "C" fn(vector: *mut StringList, capacity: usize), ::libloading::Error>,
    pub StringListSize:
        Result<unsafe extern "C" fn(vector: *const StringList) -> usize, ::libloading::Error>,
    pub StringListIndex: Result<
        unsafe extern "C" fn(
            vector: *const StringList,
            member: *mut *const ::std::os::raw::c_char,
        ) -> usize,
        ::libloading::Error,
    >,
    pub StringListCopy: Result<
        unsafe extern "C" fn(dest: *mut StringList, src: *const StringList),
        ::libloading::Error,
    >,
    pub mCoreCallbacksListInit: Result<
        unsafe extern "C" fn(vector: *mut mCoreCallbacksList, capacity: usize),
        ::libloading::Error,
    >,
    pub mCoreCallbacksListDeinit:
        Result<unsafe extern "C" fn(vector: *mut mCoreCallbacksList), ::libloading::Error>,
    pub mCoreCallbacksListGetPointer: Result<
        unsafe extern "C" fn(
            vector: *mut mCoreCallbacksList,
            location: usize,
        ) -> *mut mCoreCallbacks,
        ::libloading::Error,
    >,
    pub mCoreCallbacksListGetConstPointer: Result<
        unsafe extern "C" fn(
            vector: *const mCoreCallbacksList,
            location: usize,
        ) -> *const mCoreCallbacks,
        ::libloading::Error,
    >,
    pub mCoreCallbacksListAppend: Result<
        unsafe extern "C" fn(vector: *mut mCoreCallbacksList) -> *mut mCoreCallbacks,
        ::libloading::Error,
    >,
    pub mCoreCallbacksListClear:
        Result<unsafe extern "C" fn(vector: *mut mCoreCallbacksList), ::libloading::Error>,
    pub mCoreCallbacksListResize: Result<
        unsafe extern "C" fn(vector: *mut mCoreCallbacksList, change: isize),
        ::libloading::Error,
    >,
    pub mCoreCallbacksListShift: Result<
        unsafe extern "C" fn(vector: *mut mCoreCallbacksList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub mCoreCallbacksListUnshift: Result<
        unsafe extern "C" fn(vector: *mut mCoreCallbacksList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub mCoreCallbacksListEnsureCapacity: Result<
        unsafe extern "C" fn(vector: *mut mCoreCallbacksList, capacity: usize),
        ::libloading::Error,
    >,
    pub mCoreCallbacksListSize: Result<
        unsafe extern "C" fn(vector: *const mCoreCallbacksList) -> usize,
        ::libloading::Error,
    >,
    pub mCoreCallbacksListIndex: Result<
        unsafe extern "C" fn(
            vector: *const mCoreCallbacksList,
            member: *const mCoreCallbacks,
        ) -> usize,
        ::libloading::Error,
    >,
    pub mCoreCallbacksListCopy: Result<
        unsafe extern "C" fn(dest: *mut mCoreCallbacksList, src: *const mCoreCallbacksList),
        ::libloading::Error,
    >,
    pub mRTCGenericSourceInit: Result<
        unsafe extern "C" fn(rtc: *mut mRTCGenericSource, core: *mut mCore),
        ::libloading::Error,
    >,
    pub mCoreFind: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *mut mCore,
        ::libloading::Error,
    >,
    pub mCoreLoadFile: Result<
        unsafe extern "C" fn(core: *mut mCore, path: *const ::std::os::raw::c_char) -> bool,
        ::libloading::Error,
    >,
    pub mCorePreloadVF:
        Result<unsafe extern "C" fn(core: *mut mCore, vf: *mut VFile) -> bool, ::libloading::Error>,
    pub mCorePreloadFile: Result<
        unsafe extern "C" fn(core: *mut mCore, path: *const ::std::os::raw::c_char) -> bool,
        ::libloading::Error,
    >,
    pub mCorePreloadVFCB: Result<
        unsafe extern "C" fn(
            core: *mut mCore,
            vf: *mut VFile,
            cb: ::std::option::Option<
                unsafe extern "C" fn(arg1: usize, arg2: usize, arg3: *mut ::std::os::raw::c_void),
            >,
            context: *mut ::std::os::raw::c_void,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mCorePreloadFileCB: Result<
        unsafe extern "C" fn(
            core: *mut mCore,
            path: *const ::std::os::raw::c_char,
            cb: ::std::option::Option<
                unsafe extern "C" fn(arg1: usize, arg2: usize, arg3: *mut ::std::os::raw::c_void),
            >,
            context: *mut ::std::os::raw::c_void,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mCoreAutoloadSave:
        Result<unsafe extern "C" fn(core: *mut mCore) -> bool, ::libloading::Error>,
    pub mCoreAutoloadPatch:
        Result<unsafe extern "C" fn(core: *mut mCore) -> bool, ::libloading::Error>,
    pub mCoreAutoloadCheats:
        Result<unsafe extern "C" fn(core: *mut mCore) -> bool, ::libloading::Error>,
    pub mCoreLoadSaveFile: Result<
        unsafe extern "C" fn(
            core: *mut mCore,
            path: *const ::std::os::raw::c_char,
            temporary: bool,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mCoreSaveState: Result<
        unsafe extern "C" fn(
            core: *mut mCore,
            slot: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mCoreLoadState: Result<
        unsafe extern "C" fn(
            core: *mut mCore,
            slot: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mCoreGetState: Result<
        unsafe extern "C" fn(
            core: *mut mCore,
            slot: ::std::os::raw::c_int,
            write: bool,
        ) -> *mut VFile,
        ::libloading::Error,
    >,
    pub mCoreDeleteState: Result<
        unsafe extern "C" fn(core: *mut mCore, slot: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub mCoreTakeScreenshot: Result<unsafe extern "C" fn(core: *mut mCore), ::libloading::Error>,
    pub mCoreTakeScreenshotVF:
        Result<unsafe extern "C" fn(core: *mut mCore, vf: *mut VFile) -> bool, ::libloading::Error>,
    pub mCoreFindVF:
        Result<unsafe extern "C" fn(vf: *mut VFile) -> *mut mCore, ::libloading::Error>,
    pub mCoreIsCompatible:
        Result<unsafe extern "C" fn(vf: *mut VFile) -> mPlatform, ::libloading::Error>,
    pub mCoreCreate:
        Result<unsafe extern "C" fn(arg1: mPlatform) -> *mut mCore, ::libloading::Error>,
    pub mCoreSaveStateNamed: Result<
        unsafe extern "C" fn(
            core: *mut mCore,
            vf: *mut VFile,
            flags: ::std::os::raw::c_int,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mCoreLoadStateNamed: Result<
        unsafe extern "C" fn(
            core: *mut mCore,
            vf: *mut VFile,
            flags: ::std::os::raw::c_int,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mCoreInitConfig: Result<
        unsafe extern "C" fn(core: *mut mCore, port: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub mCoreLoadConfig: Result<unsafe extern "C" fn(core: *mut mCore), ::libloading::Error>,
    pub mCoreLoadForeignConfig: Result<
        unsafe extern "C" fn(core: *mut mCore, config: *const mCoreConfig),
        ::libloading::Error,
    >,
    pub mCoreSetRTC:
        Result<unsafe extern "C" fn(core: *mut mCore, rtc: *mut mRTCSource), ::libloading::Error>,
    pub mCoreGetMemoryBlock: Result<
        unsafe extern "C" fn(
            core: *mut mCore,
            start: u32,
            size: *mut usize,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub mCoreGetMemoryBlockMasked: Result<
        unsafe extern "C" fn(
            core: *mut mCore,
            start: u32,
            size: *mut usize,
            mask: u32,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub mCoreGetMemoryBlockInfo: Result<
        unsafe extern "C" fn(core: *mut mCore, address: u32) -> *const mCoreMemoryBlock,
        ::libloading::Error,
    >,
    pub mLogGetContext: Result<unsafe extern "C" fn() -> *mut mLogger, ::libloading::Error>,
    pub mLogSetDefaultLogger: Result<unsafe extern "C" fn(arg1: *mut mLogger), ::libloading::Error>,
    pub mLogSetThreadLogger: Result<unsafe extern "C" fn(arg1: *mut mLogger), ::libloading::Error>,
    pub mLogGetThreadLogger: Result<unsafe extern "C" fn() -> *mut mLogger, ::libloading::Error>,
    pub mLogGenerateCategory: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mLogCategoryName: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub mLogCategoryId: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub mLogCategoryById: Result<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mStandardLoggerInit:
        Result<unsafe extern "C" fn(arg1: *mut mStandardLogger), ::libloading::Error>,
    pub mStandardLoggerDeinit:
        Result<unsafe extern "C" fn(arg1: *mut mStandardLogger), ::libloading::Error>,
    pub mStandardLoggerConfig: Result<
        unsafe extern "C" fn(arg1: *mut mStandardLogger, config: *mut mCoreConfig),
        ::libloading::Error,
    >,
    pub mLogFilterInit: Result<unsafe extern "C" fn(arg1: *mut mLogFilter), ::libloading::Error>,
    pub mLogFilterDeinit: Result<unsafe extern "C" fn(arg1: *mut mLogFilter), ::libloading::Error>,
    pub mLogFilterLoad: Result<
        unsafe extern "C" fn(arg1: *mut mLogFilter, arg2: *const mCoreConfig),
        ::libloading::Error,
    >,
    pub mLogFilterSave: Result<
        unsafe extern "C" fn(arg1: *const mLogFilter, arg2: *mut mCoreConfig),
        ::libloading::Error,
    >,
    pub mLogFilterSet: Result<
        unsafe extern "C" fn(
            arg1: *mut mLogFilter,
            category: *const ::std::os::raw::c_char,
            levels: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub mLogFilterReset: Result<
        unsafe extern "C" fn(arg1: *mut mLogFilter, category: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub mLogFilterTest: Result<
        unsafe extern "C" fn(
            arg1: *const mLogFilter,
            category: ::std::os::raw::c_int,
            level: mLogLevel,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mLogFilterLevels: Result<
        unsafe extern "C" fn(
            arg1: *const mLogFilter,
            category: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mLog: Result<
        unsafe extern "C" fn(
            category: ::std::os::raw::c_int,
            level: mLogLevel,
            format: *const ::std::os::raw::c_char,
            ...
        ),
        ::libloading::Error,
    >,
    pub mLogExplicit: Result<
        unsafe extern "C" fn(
            arg1: *mut mLogger,
            category: ::std::os::raw::c_int,
            level: mLogLevel,
            format: *const ::std::os::raw::c_char,
            ...
        ),
        ::libloading::Error,
    >,
    pub mBreakpointListInit: Result<
        unsafe extern "C" fn(vector: *mut mBreakpointList, capacity: usize),
        ::libloading::Error,
    >,
    pub mBreakpointListDeinit:
        Result<unsafe extern "C" fn(vector: *mut mBreakpointList), ::libloading::Error>,
    pub mBreakpointListGetPointer: Result<
        unsafe extern "C" fn(vector: *mut mBreakpointList, location: usize) -> *mut mBreakpoint,
        ::libloading::Error,
    >,
    pub mBreakpointListGetConstPointer: Result<
        unsafe extern "C" fn(vector: *const mBreakpointList, location: usize) -> *const mBreakpoint,
        ::libloading::Error,
    >,
    pub mBreakpointListAppend: Result<
        unsafe extern "C" fn(vector: *mut mBreakpointList) -> *mut mBreakpoint,
        ::libloading::Error,
    >,
    pub mBreakpointListClear:
        Result<unsafe extern "C" fn(vector: *mut mBreakpointList), ::libloading::Error>,
    pub mBreakpointListResize: Result<
        unsafe extern "C" fn(vector: *mut mBreakpointList, change: isize),
        ::libloading::Error,
    >,
    pub mBreakpointListShift: Result<
        unsafe extern "C" fn(vector: *mut mBreakpointList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub mBreakpointListUnshift: Result<
        unsafe extern "C" fn(vector: *mut mBreakpointList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub mBreakpointListEnsureCapacity: Result<
        unsafe extern "C" fn(vector: *mut mBreakpointList, capacity: usize),
        ::libloading::Error,
    >,
    pub mBreakpointListSize:
        Result<unsafe extern "C" fn(vector: *const mBreakpointList) -> usize, ::libloading::Error>,
    pub mBreakpointListIndex: Result<
        unsafe extern "C" fn(vector: *const mBreakpointList, member: *const mBreakpoint) -> usize,
        ::libloading::Error,
    >,
    pub mBreakpointListCopy: Result<
        unsafe extern "C" fn(dest: *mut mBreakpointList, src: *const mBreakpointList),
        ::libloading::Error,
    >,
    pub mWatchpointListInit: Result<
        unsafe extern "C" fn(vector: *mut mWatchpointList, capacity: usize),
        ::libloading::Error,
    >,
    pub mWatchpointListDeinit:
        Result<unsafe extern "C" fn(vector: *mut mWatchpointList), ::libloading::Error>,
    pub mWatchpointListGetPointer: Result<
        unsafe extern "C" fn(vector: *mut mWatchpointList, location: usize) -> *mut mWatchpoint,
        ::libloading::Error,
    >,
    pub mWatchpointListGetConstPointer: Result<
        unsafe extern "C" fn(vector: *const mWatchpointList, location: usize) -> *const mWatchpoint,
        ::libloading::Error,
    >,
    pub mWatchpointListAppend: Result<
        unsafe extern "C" fn(vector: *mut mWatchpointList) -> *mut mWatchpoint,
        ::libloading::Error,
    >,
    pub mWatchpointListClear:
        Result<unsafe extern "C" fn(vector: *mut mWatchpointList), ::libloading::Error>,
    pub mWatchpointListResize: Result<
        unsafe extern "C" fn(vector: *mut mWatchpointList, change: isize),
        ::libloading::Error,
    >,
    pub mWatchpointListShift: Result<
        unsafe extern "C" fn(vector: *mut mWatchpointList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub mWatchpointListUnshift: Result<
        unsafe extern "C" fn(vector: *mut mWatchpointList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub mWatchpointListEnsureCapacity: Result<
        unsafe extern "C" fn(vector: *mut mWatchpointList, capacity: usize),
        ::libloading::Error,
    >,
    pub mWatchpointListSize:
        Result<unsafe extern "C" fn(vector: *const mWatchpointList) -> usize, ::libloading::Error>,
    pub mWatchpointListIndex: Result<
        unsafe extern "C" fn(vector: *const mWatchpointList, member: *const mWatchpoint) -> usize,
        ::libloading::Error,
    >,
    pub mWatchpointListCopy: Result<
        unsafe extern "C" fn(dest: *mut mWatchpointList, src: *const mWatchpointList),
        ::libloading::Error,
    >,
    pub mDebuggerModuleListInit: Result<
        unsafe extern "C" fn(vector: *mut mDebuggerModuleList, capacity: usize),
        ::libloading::Error,
    >,
    pub mDebuggerModuleListDeinit:
        Result<unsafe extern "C" fn(vector: *mut mDebuggerModuleList), ::libloading::Error>,
    pub mDebuggerModuleListGetPointer: Result<
        unsafe extern "C" fn(
            vector: *mut mDebuggerModuleList,
            location: usize,
        ) -> *mut *mut mDebuggerModule,
        ::libloading::Error,
    >,
    pub mDebuggerModuleListGetConstPointer: Result<
        unsafe extern "C" fn(
            vector: *const mDebuggerModuleList,
            location: usize,
        ) -> *const *mut mDebuggerModule,
        ::libloading::Error,
    >,
    pub mDebuggerModuleListAppend: Result<
        unsafe extern "C" fn(vector: *mut mDebuggerModuleList) -> *mut *mut mDebuggerModule,
        ::libloading::Error,
    >,
    pub mDebuggerModuleListClear:
        Result<unsafe extern "C" fn(vector: *mut mDebuggerModuleList), ::libloading::Error>,
    pub mDebuggerModuleListResize: Result<
        unsafe extern "C" fn(vector: *mut mDebuggerModuleList, change: isize),
        ::libloading::Error,
    >,
    pub mDebuggerModuleListShift: Result<
        unsafe extern "C" fn(vector: *mut mDebuggerModuleList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub mDebuggerModuleListUnshift: Result<
        unsafe extern "C" fn(vector: *mut mDebuggerModuleList, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub mDebuggerModuleListEnsureCapacity: Result<
        unsafe extern "C" fn(vector: *mut mDebuggerModuleList, capacity: usize),
        ::libloading::Error,
    >,
    pub mDebuggerModuleListSize: Result<
        unsafe extern "C" fn(vector: *const mDebuggerModuleList) -> usize,
        ::libloading::Error,
    >,
    pub mDebuggerModuleListIndex: Result<
        unsafe extern "C" fn(
            vector: *const mDebuggerModuleList,
            member: *mut *const mDebuggerModule,
        ) -> usize,
        ::libloading::Error,
    >,
    pub mDebuggerModuleListCopy: Result<
        unsafe extern "C" fn(dest: *mut mDebuggerModuleList, src: *const mDebuggerModuleList),
        ::libloading::Error,
    >,
    pub mStackFramesInit: Result<
        unsafe extern "C" fn(vector: *mut mStackFrames, capacity: usize),
        ::libloading::Error,
    >,
    pub mStackFramesDeinit:
        Result<unsafe extern "C" fn(vector: *mut mStackFrames), ::libloading::Error>,
    pub mStackFramesGetPointer: Result<
        unsafe extern "C" fn(vector: *mut mStackFrames, location: usize) -> *mut mStackFrame,
        ::libloading::Error,
    >,
    pub mStackFramesGetConstPointer: Result<
        unsafe extern "C" fn(vector: *const mStackFrames, location: usize) -> *const mStackFrame,
        ::libloading::Error,
    >,
    pub mStackFramesAppend: Result<
        unsafe extern "C" fn(vector: *mut mStackFrames) -> *mut mStackFrame,
        ::libloading::Error,
    >,
    pub mStackFramesClear:
        Result<unsafe extern "C" fn(vector: *mut mStackFrames), ::libloading::Error>,
    pub mStackFramesResize:
        Result<unsafe extern "C" fn(vector: *mut mStackFrames, change: isize), ::libloading::Error>,
    pub mStackFramesShift: Result<
        unsafe extern "C" fn(vector: *mut mStackFrames, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub mStackFramesUnshift: Result<
        unsafe extern "C" fn(vector: *mut mStackFrames, location: usize, difference: usize),
        ::libloading::Error,
    >,
    pub mStackFramesEnsureCapacity: Result<
        unsafe extern "C" fn(vector: *mut mStackFrames, capacity: usize),
        ::libloading::Error,
    >,
    pub mStackFramesSize:
        Result<unsafe extern "C" fn(vector: *const mStackFrames) -> usize, ::libloading::Error>,
    pub mStackFramesIndex: Result<
        unsafe extern "C" fn(vector: *const mStackFrames, member: *const mStackFrame) -> usize,
        ::libloading::Error,
    >,
    pub mStackFramesCopy: Result<
        unsafe extern "C" fn(dest: *mut mStackFrames, src: *const mStackFrames),
        ::libloading::Error,
    >,
    pub mDebuggerInit: Result<unsafe extern "C" fn(arg1: *mut mDebugger), ::libloading::Error>,
    pub mDebuggerDeinit: Result<unsafe extern "C" fn(arg1: *mut mDebugger), ::libloading::Error>,
    pub mDebuggerAttach:
        Result<unsafe extern "C" fn(arg1: *mut mDebugger, arg2: *mut mCore), ::libloading::Error>,
    pub mDebuggerAttachModule: Result<
        unsafe extern "C" fn(arg1: *mut mDebugger, arg2: *mut mDebuggerModule),
        ::libloading::Error,
    >,
    pub mDebuggerDetachModule: Result<
        unsafe extern "C" fn(arg1: *mut mDebugger, arg2: *mut mDebuggerModule),
        ::libloading::Error,
    >,
    pub mDebuggerRunTimeout:
        Result<unsafe extern "C" fn(debugger: *mut mDebugger, timeoutMs: i32), ::libloading::Error>,
    pub mDebuggerRun: Result<unsafe extern "C" fn(arg1: *mut mDebugger), ::libloading::Error>,
    pub mDebuggerRunFrame: Result<unsafe extern "C" fn(arg1: *mut mDebugger), ::libloading::Error>,
    pub mDebuggerEnter: Result<
        unsafe extern "C" fn(
            arg1: *mut mDebugger,
            arg2: mDebuggerEntryReason,
            arg3: *mut mDebuggerEntryInfo,
        ),
        ::libloading::Error,
    >,
    pub mDebuggerInterrupt: Result<unsafe extern "C" fn(arg1: *mut mDebugger), ::libloading::Error>,
    pub mDebuggerUpdatePaused:
        Result<unsafe extern "C" fn(arg1: *mut mDebugger), ::libloading::Error>,
    pub mDebuggerShutdown: Result<unsafe extern "C" fn(arg1: *mut mDebugger), ::libloading::Error>,
    pub mDebuggerUpdate: Result<unsafe extern "C" fn(arg1: *mut mDebugger), ::libloading::Error>,
    pub mDebuggerIsShutdown:
        Result<unsafe extern "C" fn(arg1: *const mDebugger) -> bool, ::libloading::Error>,
    pub mDebuggerCreateModule: Result<
        unsafe extern "C" fn(type_: mDebuggerType, arg1: *mut mCore) -> *mut mDebuggerModule,
        ::libloading::Error,
    >,
    pub mDebuggerModuleSetNeedsCallback:
        Result<unsafe extern "C" fn(arg1: *mut mDebuggerModule), ::libloading::Error>,
    pub mDebuggerLookupIdentifier: Result<
        unsafe extern "C" fn(
            debugger: *mut mDebugger,
            name: *const ::std::os::raw::c_char,
            value: *mut i32,
            segment: *mut ::std::os::raw::c_int,
        ) -> bool,
        ::libloading::Error,
    >,
    pub usage: Result<
        unsafe extern "C" fn(
            arg0: *const ::std::os::raw::c_char,
            prologue: *const ::std::os::raw::c_char,
            epilogue: *const ::std::os::raw::c_char,
            subparsers: *const mSubParser,
            nSubparsers: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub version:
        Result<unsafe extern "C" fn(arg0: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub mArgumentsParse: Result<
        unsafe extern "C" fn(
            args: *mut mArguments,
            argc: ::std::os::raw::c_int,
            argv: *const *mut ::std::os::raw::c_char,
            subparsers: *mut mSubParser,
            nSubparsers: ::std::os::raw::c_int,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mArgumentsApply: Result<
        unsafe extern "C" fn(
            args: *const mArguments,
            subparsers: *mut mSubParser,
            nSubparsers: ::std::os::raw::c_int,
            config: *mut mCoreConfig,
        ),
        ::libloading::Error,
    >,
    pub mArgumentsApplyDebugger: Result<
        unsafe extern "C" fn(
            arg1: *const mArguments,
            arg2: *mut mCore,
            arg3: *mut mDebugger,
        ) -> bool,
        ::libloading::Error,
    >,
    pub mArgumentsApplyFileLoads: Result<
        unsafe extern "C" fn(arg1: *const mArguments, arg2: *mut mCore),
        ::libloading::Error,
    >,
    pub mArgumentsDeinit: Result<unsafe extern "C" fn(args: *mut mArguments), ::libloading::Error>,
    pub mSubParserGraphicsInit: Result<
        unsafe extern "C" fn(parser: *mut mSubParser, opts: *mut mGraphicsOpts),
        ::libloading::Error,
    >,
    pub __cmsg_nxthdr: Result<
        unsafe extern "C" fn(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr,
        ::libloading::Error,
    >,
    pub socket: Result<
        unsafe extern "C" fn(
            __domain: ::std::os::raw::c_int,
            __type: ::std::os::raw::c_int,
            __protocol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub socketpair: Result<
        unsafe extern "C" fn(
            __domain: ::std::os::raw::c_int,
            __type: ::std::os::raw::c_int,
            __protocol: ::std::os::raw::c_int,
            __fds: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub bind: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __addr: *const sockaddr,
            __len: socklen_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getsockname: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __addr: *mut sockaddr,
            __len: *mut socklen_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub connect: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __addr: *const sockaddr,
            __len: socklen_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getpeername: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __addr: *mut sockaddr,
            __len: *mut socklen_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub send: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
            __flags: ::std::os::raw::c_int,
        ) -> isize,
        ::libloading::Error,
    >,
    pub recv: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __n: usize,
            __flags: ::std::os::raw::c_int,
        ) -> isize,
        ::libloading::Error,
    >,
    pub sendto: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
            __flags: ::std::os::raw::c_int,
            __addr: *const sockaddr,
            __addr_len: socklen_t,
        ) -> isize,
        ::libloading::Error,
    >,
    pub recvfrom: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __n: usize,
            __flags: ::std::os::raw::c_int,
            __addr: *mut sockaddr,
            __addr_len: *mut socklen_t,
        ) -> isize,
        ::libloading::Error,
    >,
    pub sendmsg: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __message: *const msghdr,
            __flags: ::std::os::raw::c_int,
        ) -> isize,
        ::libloading::Error,
    >,
    pub recvmsg: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __message: *mut msghdr,
            __flags: ::std::os::raw::c_int,
        ) -> isize,
        ::libloading::Error,
    >,
    pub getsockopt: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __level: ::std::os::raw::c_int,
            __optname: ::std::os::raw::c_int,
            __optval: *mut ::std::os::raw::c_void,
            __optlen: *mut socklen_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setsockopt: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __level: ::std::os::raw::c_int,
            __optname: ::std::os::raw::c_int,
            __optval: *const ::std::os::raw::c_void,
            __optlen: socklen_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub listen: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub accept: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __addr: *mut sockaddr,
            __addr_len: *mut socklen_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub shutdown: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __how: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sockatmark: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isfdtype: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __fdtype: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ntohl: Result<unsafe extern "C" fn(__netlong: u32) -> u32, ::libloading::Error>,
    pub ntohs: Result<unsafe extern "C" fn(__netshort: u16) -> u16, ::libloading::Error>,
    pub htonl: Result<unsafe extern "C" fn(__hostlong: u32) -> u32, ::libloading::Error>,
    pub htons: Result<unsafe extern "C" fn(__hostshort: u16) -> u16, ::libloading::Error>,
    pub bindresvport: Result<
        unsafe extern "C" fn(
            __sockfd: ::std::os::raw::c_int,
            __sock_in: *mut sockaddr_in,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub bindresvport6: Result<
        unsafe extern "C" fn(
            __sockfd: ::std::os::raw::c_int,
            __sock_in: *mut sockaddr_in6,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inet_addr: Result<
        unsafe extern "C" fn(__cp: *const ::std::os::raw::c_char) -> in_addr_t,
        ::libloading::Error,
    >,
    pub inet_lnaof: Result<unsafe extern "C" fn(__in: in_addr) -> in_addr_t, ::libloading::Error>,
    pub inet_makeaddr: Result<
        unsafe extern "C" fn(__net: in_addr_t, __host: in_addr_t) -> in_addr,
        ::libloading::Error,
    >,
    pub inet_netof: Result<unsafe extern "C" fn(__in: in_addr) -> in_addr_t, ::libloading::Error>,
    pub inet_network: Result<
        unsafe extern "C" fn(__cp: *const ::std::os::raw::c_char) -> in_addr_t,
        ::libloading::Error,
    >,
    pub inet_ntoa: Result<
        unsafe extern "C" fn(__in: in_addr) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub inet_pton: Result<
        unsafe extern "C" fn(
            __af: ::std::os::raw::c_int,
            __cp: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inet_ntop: Result<
        unsafe extern "C" fn(
            __af: ::std::os::raw::c_int,
            __cp: *const ::std::os::raw::c_void,
            __buf: *mut ::std::os::raw::c_char,
            __len: socklen_t,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub inet_aton: Result<
        unsafe extern "C" fn(
            __cp: *const ::std::os::raw::c_char,
            __inp: *mut in_addr,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inet_neta: Result<
        unsafe extern "C" fn(
            __net: in_addr_t,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub inet_net_ntop: Result<
        unsafe extern "C" fn(
            __af: ::std::os::raw::c_int,
            __cp: *const ::std::os::raw::c_void,
            __bits: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub inet_net_pton: Result<
        unsafe extern "C" fn(
            __af: ::std::os::raw::c_int,
            __cp: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_void,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inet_nsap_addr: Result<
        unsafe extern "C" fn(
            __cp: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_uchar,
            __len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub inet_nsap_ntoa: Result<
        unsafe extern "C" fn(
            __len: ::std::os::raw::c_int,
            __cp: *const ::std::os::raw::c_uchar,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub setrpcent:
        Result<unsafe extern "C" fn(__stayopen: ::std::os::raw::c_int), ::libloading::Error>,
    pub endrpcent: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub getrpcbyname: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> *mut rpcent,
        ::libloading::Error,
    >,
    pub getrpcbynumber: Result<
        unsafe extern "C" fn(__number: ::std::os::raw::c_int) -> *mut rpcent,
        ::libloading::Error,
    >,
    pub getrpcent: Result<unsafe extern "C" fn() -> *mut rpcent, ::libloading::Error>,
    pub getrpcbyname_r: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __result_buf: *mut rpcent,
            __buffer: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut rpcent,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getrpcbynumber_r: Result<
        unsafe extern "C" fn(
            __number: ::std::os::raw::c_int,
            __result_buf: *mut rpcent,
            __buffer: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut rpcent,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getrpcent_r: Result<
        unsafe extern "C" fn(
            __result_buf: *mut rpcent,
            __buffer: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut rpcent,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __h_errno_location:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_int, ::libloading::Error>,
    pub herror:
        Result<unsafe extern "C" fn(__str: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub hstrerror: Result<
        unsafe extern "C" fn(__err_num: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub sethostent:
        Result<unsafe extern "C" fn(__stay_open: ::std::os::raw::c_int), ::libloading::Error>,
    pub endhostent: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub gethostent: Result<unsafe extern "C" fn() -> *mut hostent, ::libloading::Error>,
    pub gethostbyaddr: Result<
        unsafe extern "C" fn(
            __addr: *const ::std::os::raw::c_void,
            __len: __socklen_t,
            __type: ::std::os::raw::c_int,
        ) -> *mut hostent,
        ::libloading::Error,
    >,
    pub gethostbyname: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> *mut hostent,
        ::libloading::Error,
    >,
    pub gethostbyname2: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __af: ::std::os::raw::c_int,
        ) -> *mut hostent,
        ::libloading::Error,
    >,
    pub gethostent_r: Result<
        unsafe extern "C" fn(
            __result_buf: *mut hostent,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut hostent,
            __h_errnop: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gethostbyaddr_r: Result<
        unsafe extern "C" fn(
            __addr: *const ::std::os::raw::c_void,
            __len: __socklen_t,
            __type: ::std::os::raw::c_int,
            __result_buf: *mut hostent,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut hostent,
            __h_errnop: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gethostbyname_r: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __result_buf: *mut hostent,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut hostent,
            __h_errnop: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gethostbyname2_r: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __af: ::std::os::raw::c_int,
            __result_buf: *mut hostent,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut hostent,
            __h_errnop: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setnetent:
        Result<unsafe extern "C" fn(__stay_open: ::std::os::raw::c_int), ::libloading::Error>,
    pub endnetent: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub getnetent: Result<unsafe extern "C" fn() -> *mut netent, ::libloading::Error>,
    pub getnetbyaddr: Result<
        unsafe extern "C" fn(__net: u32, __type: ::std::os::raw::c_int) -> *mut netent,
        ::libloading::Error,
    >,
    pub getnetbyname: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> *mut netent,
        ::libloading::Error,
    >,
    pub getnetent_r: Result<
        unsafe extern "C" fn(
            __result_buf: *mut netent,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut netent,
            __h_errnop: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getnetbyaddr_r: Result<
        unsafe extern "C" fn(
            __net: u32,
            __type: ::std::os::raw::c_int,
            __result_buf: *mut netent,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut netent,
            __h_errnop: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getnetbyname_r: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __result_buf: *mut netent,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut netent,
            __h_errnop: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setservent:
        Result<unsafe extern "C" fn(__stay_open: ::std::os::raw::c_int), ::libloading::Error>,
    pub endservent: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub getservent: Result<unsafe extern "C" fn() -> *mut servent, ::libloading::Error>,
    pub getservbyname: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __proto: *const ::std::os::raw::c_char,
        ) -> *mut servent,
        ::libloading::Error,
    >,
    pub getservbyport: Result<
        unsafe extern "C" fn(
            __port: ::std::os::raw::c_int,
            __proto: *const ::std::os::raw::c_char,
        ) -> *mut servent,
        ::libloading::Error,
    >,
    pub getservent_r: Result<
        unsafe extern "C" fn(
            __result_buf: *mut servent,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut servent,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getservbyname_r: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __proto: *const ::std::os::raw::c_char,
            __result_buf: *mut servent,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut servent,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getservbyport_r: Result<
        unsafe extern "C" fn(
            __port: ::std::os::raw::c_int,
            __proto: *const ::std::os::raw::c_char,
            __result_buf: *mut servent,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut servent,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setprotoent:
        Result<unsafe extern "C" fn(__stay_open: ::std::os::raw::c_int), ::libloading::Error>,
    pub endprotoent: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub getprotoent: Result<unsafe extern "C" fn() -> *mut protoent, ::libloading::Error>,
    pub getprotobyname: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> *mut protoent,
        ::libloading::Error,
    >,
    pub getprotobynumber: Result<
        unsafe extern "C" fn(__proto: ::std::os::raw::c_int) -> *mut protoent,
        ::libloading::Error,
    >,
    pub getprotoent_r: Result<
        unsafe extern "C" fn(
            __result_buf: *mut protoent,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut protoent,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getprotobyname_r: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __result_buf: *mut protoent,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut protoent,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getprotobynumber_r: Result<
        unsafe extern "C" fn(
            __proto: ::std::os::raw::c_int,
            __result_buf: *mut protoent,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut protoent,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setnetgrent: Result<
        unsafe extern "C" fn(__netgroup: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub endnetgrent: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub getnetgrent: Result<
        unsafe extern "C" fn(
            __hostp: *mut *mut ::std::os::raw::c_char,
            __userp: *mut *mut ::std::os::raw::c_char,
            __domainp: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub innetgr: Result<
        unsafe extern "C" fn(
            __netgroup: *const ::std::os::raw::c_char,
            __host: *const ::std::os::raw::c_char,
            __user: *const ::std::os::raw::c_char,
            __domain: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getnetgrent_r: Result<
        unsafe extern "C" fn(
            __hostp: *mut *mut ::std::os::raw::c_char,
            __userp: *mut *mut ::std::os::raw::c_char,
            __domainp: *mut *mut ::std::os::raw::c_char,
            __buffer: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rcmd: Result<
        unsafe extern "C" fn(
            __ahost: *mut *mut ::std::os::raw::c_char,
            __rport: ::std::os::raw::c_ushort,
            __locuser: *const ::std::os::raw::c_char,
            __remuser: *const ::std::os::raw::c_char,
            __cmd: *const ::std::os::raw::c_char,
            __fd2p: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rcmd_af: Result<
        unsafe extern "C" fn(
            __ahost: *mut *mut ::std::os::raw::c_char,
            __rport: ::std::os::raw::c_ushort,
            __locuser: *const ::std::os::raw::c_char,
            __remuser: *const ::std::os::raw::c_char,
            __cmd: *const ::std::os::raw::c_char,
            __fd2p: *mut ::std::os::raw::c_int,
            __af: sa_family_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rexec: Result<
        unsafe extern "C" fn(
            __ahost: *mut *mut ::std::os::raw::c_char,
            __rport: ::std::os::raw::c_int,
            __name: *const ::std::os::raw::c_char,
            __pass: *const ::std::os::raw::c_char,
            __cmd: *const ::std::os::raw::c_char,
            __fd2p: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rexec_af: Result<
        unsafe extern "C" fn(
            __ahost: *mut *mut ::std::os::raw::c_char,
            __rport: ::std::os::raw::c_int,
            __name: *const ::std::os::raw::c_char,
            __pass: *const ::std::os::raw::c_char,
            __cmd: *const ::std::os::raw::c_char,
            __fd2p: *mut ::std::os::raw::c_int,
            __af: sa_family_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ruserok: Result<
        unsafe extern "C" fn(
            __rhost: *const ::std::os::raw::c_char,
            __suser: ::std::os::raw::c_int,
            __remuser: *const ::std::os::raw::c_char,
            __locuser: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ruserok_af: Result<
        unsafe extern "C" fn(
            __rhost: *const ::std::os::raw::c_char,
            __suser: ::std::os::raw::c_int,
            __remuser: *const ::std::os::raw::c_char,
            __locuser: *const ::std::os::raw::c_char,
            __af: sa_family_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iruserok: Result<
        unsafe extern "C" fn(
            __raddr: u32,
            __suser: ::std::os::raw::c_int,
            __remuser: *const ::std::os::raw::c_char,
            __locuser: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iruserok_af: Result<
        unsafe extern "C" fn(
            __raddr: *const ::std::os::raw::c_void,
            __suser: ::std::os::raw::c_int,
            __remuser: *const ::std::os::raw::c_char,
            __locuser: *const ::std::os::raw::c_char,
            __af: sa_family_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rresvport: Result<
        unsafe extern "C" fn(__alport: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rresvport_af: Result<
        unsafe extern "C" fn(
            __alport: *mut ::std::os::raw::c_int,
            __af: sa_family_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getaddrinfo: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __service: *const ::std::os::raw::c_char,
            __req: *const addrinfo,
            __pai: *mut *mut addrinfo,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub freeaddrinfo: Result<unsafe extern "C" fn(__ai: *mut addrinfo), ::libloading::Error>,
    pub gai_strerror: Result<
        unsafe extern "C" fn(__ecode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub getnameinfo: Result<
        unsafe extern "C" fn(
            __sa: *const sockaddr,
            __salen: socklen_t,
            __host: *mut ::std::os::raw::c_char,
            __hostlen: socklen_t,
            __serv: *mut ::std::os::raw::c_char,
            __servlen: socklen_t,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __errno_location:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_int, ::libloading::Error>,
    pub VFileOpen: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> *mut VFile,
        ::libloading::Error,
    >,
    pub VFileOpenFD: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> *mut VFile,
        ::libloading::Error,
    >,
    pub VFileFromFD:
        Result<unsafe extern "C" fn(fd: ::std::os::raw::c_int) -> *mut VFile, ::libloading::Error>,
    pub VFileFromMemory: Result<
        unsafe extern "C" fn(mem: *mut ::std::os::raw::c_void, size: usize) -> *mut VFile,
        ::libloading::Error,
    >,
    pub VFileFromConstMemory: Result<
        unsafe extern "C" fn(mem: *const ::std::os::raw::c_void, size: usize) -> *mut VFile,
        ::libloading::Error,
    >,
    pub VFileMemChunk: Result<
        unsafe extern "C" fn(mem: *const ::std::os::raw::c_void, size: usize) -> *mut VFile,
        ::libloading::Error,
    >,
    pub VFileFIFO:
        Result<unsafe extern "C" fn(backing: *mut CircleBuffer) -> *mut VFile, ::libloading::Error>,
    pub VDirOpen: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *mut VDir,
        ::libloading::Error,
    >,
    pub VDirOpenArchive: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *mut VDir,
        ::libloading::Error,
    >,
    pub VDirCreate: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> bool,
        ::libloading::Error,
    >,
    pub separatePath: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            dirname: *mut ::std::os::raw::c_char,
            basename: *mut ::std::os::raw::c_char,
            extension: *mut ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub isAbsolute: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> bool,
        ::libloading::Error,
    >,
    pub makeAbsolute: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            base: *const ::std::os::raw::c_char,
            out: *mut ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub VDirFindFirst: Result<
        unsafe extern "C" fn(
            dir: *mut VDir,
            filter: ::std::option::Option<unsafe extern "C" fn(arg1: *mut VFile) -> bool>,
        ) -> *mut VFile,
        ::libloading::Error,
    >,
    pub VDirFindNextAvailable: Result<
        unsafe extern "C" fn(
            arg1: *mut VDir,
            basename: *const ::std::os::raw::c_char,
            infix: *const ::std::os::raw::c_char,
            suffix: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
        ) -> *mut VFile,
        ::libloading::Error,
    >,
    pub VFileReadline: Result<
        unsafe extern "C" fn(
            vf: *mut VFile,
            buffer: *mut ::std::os::raw::c_char,
            size: usize,
        ) -> isize,
        ::libloading::Error,
    >,
    pub VFileWrite32LE:
        Result<unsafe extern "C" fn(vf: *mut VFile, word: i32) -> isize, ::libloading::Error>,
    pub VFileWrite16LE:
        Result<unsafe extern "C" fn(vf: *mut VFile, hword: i16) -> isize, ::libloading::Error>,
    pub VFileRead32LE: Result<
        unsafe extern "C" fn(vf: *mut VFile, word: *mut ::std::os::raw::c_void) -> isize,
        ::libloading::Error,
    >,
    pub VFileRead16LE: Result<
        unsafe extern "C" fn(vf: *mut VFile, hword: *mut ::std::os::raw::c_void) -> isize,
        ::libloading::Error,
    >,
}
impl mgba {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let __assert_fail = __library.get(b"__assert_fail\0").map(|sym| *sym);
        let __assert_perror_fail = __library.get(b"__assert_perror_fail\0").map(|sym| *sym);
        let __assert = __library.get(b"__assert\0").map(|sym| *sym);
        let __ctype_b_loc = __library.get(b"__ctype_b_loc\0").map(|sym| *sym);
        let __ctype_tolower_loc = __library.get(b"__ctype_tolower_loc\0").map(|sym| *sym);
        let __ctype_toupper_loc = __library.get(b"__ctype_toupper_loc\0").map(|sym| *sym);
        let isalnum = __library.get(b"isalnum\0").map(|sym| *sym);
        let isalpha = __library.get(b"isalpha\0").map(|sym| *sym);
        let iscntrl = __library.get(b"iscntrl\0").map(|sym| *sym);
        let isdigit = __library.get(b"isdigit\0").map(|sym| *sym);
        let islower = __library.get(b"islower\0").map(|sym| *sym);
        let isgraph = __library.get(b"isgraph\0").map(|sym| *sym);
        let isprint = __library.get(b"isprint\0").map(|sym| *sym);
        let ispunct = __library.get(b"ispunct\0").map(|sym| *sym);
        let isspace = __library.get(b"isspace\0").map(|sym| *sym);
        let isupper = __library.get(b"isupper\0").map(|sym| *sym);
        let isxdigit = __library.get(b"isxdigit\0").map(|sym| *sym);
        let tolower = __library.get(b"tolower\0").map(|sym| *sym);
        let toupper = __library.get(b"toupper\0").map(|sym| *sym);
        let isblank = __library.get(b"isblank\0").map(|sym| *sym);
        let isascii = __library.get(b"isascii\0").map(|sym| *sym);
        let toascii = __library.get(b"toascii\0").map(|sym| *sym);
        let _toupper = __library.get(b"_toupper\0").map(|sym| *sym);
        let _tolower = __library.get(b"_tolower\0").map(|sym| *sym);
        let isalnum_l = __library.get(b"isalnum_l\0").map(|sym| *sym);
        let isalpha_l = __library.get(b"isalpha_l\0").map(|sym| *sym);
        let iscntrl_l = __library.get(b"iscntrl_l\0").map(|sym| *sym);
        let isdigit_l = __library.get(b"isdigit_l\0").map(|sym| *sym);
        let islower_l = __library.get(b"islower_l\0").map(|sym| *sym);
        let isgraph_l = __library.get(b"isgraph_l\0").map(|sym| *sym);
        let isprint_l = __library.get(b"isprint_l\0").map(|sym| *sym);
        let ispunct_l = __library.get(b"ispunct_l\0").map(|sym| *sym);
        let isspace_l = __library.get(b"isspace_l\0").map(|sym| *sym);
        let isupper_l = __library.get(b"isupper_l\0").map(|sym| *sym);
        let isxdigit_l = __library.get(b"isxdigit_l\0").map(|sym| *sym);
        let isblank_l = __library.get(b"isblank_l\0").map(|sym| *sym);
        let __tolower_l = __library.get(b"__tolower_l\0").map(|sym| *sym);
        let tolower_l = __library.get(b"tolower_l\0").map(|sym| *sym);
        let __toupper_l = __library.get(b"__toupper_l\0").map(|sym| *sym);
        let toupper_l = __library.get(b"toupper_l\0").map(|sym| *sym);
        let fcntl = __library.get(b"fcntl\0").map(|sym| *sym);
        let open = __library.get(b"open\0").map(|sym| *sym);
        let openat = __library.get(b"openat\0").map(|sym| *sym);
        let creat = __library.get(b"creat\0").map(|sym| *sym);
        let lockf = __library.get(b"lockf\0").map(|sym| *sym);
        let posix_fadvise = __library.get(b"posix_fadvise\0").map(|sym| *sym);
        let posix_fallocate = __library.get(b"posix_fallocate\0").map(|sym| *sym);
        let imaxabs = __library.get(b"imaxabs\0").map(|sym| *sym);
        let imaxdiv = __library.get(b"imaxdiv\0").map(|sym| *sym);
        let strtoimax = __library.get(b"strtoimax\0").map(|sym| *sym);
        let strtoumax = __library.get(b"strtoumax\0").map(|sym| *sym);
        let wcstoimax = __library.get(b"wcstoimax\0").map(|sym| *sym);
        let wcstoumax = __library.get(b"wcstoumax\0").map(|sym| *sym);
        let __fpclassify = __library.get(b"__fpclassify\0").map(|sym| *sym);
        let __signbit = __library.get(b"__signbit\0").map(|sym| *sym);
        let __isinf = __library.get(b"__isinf\0").map(|sym| *sym);
        let __finite = __library.get(b"__finite\0").map(|sym| *sym);
        let __isnan = __library.get(b"__isnan\0").map(|sym| *sym);
        let __iseqsig = __library.get(b"__iseqsig\0").map(|sym| *sym);
        let __issignaling = __library.get(b"__issignaling\0").map(|sym| *sym);
        let acos = __library.get(b"acos\0").map(|sym| *sym);
        let __acos = __library.get(b"__acos\0").map(|sym| *sym);
        let asin = __library.get(b"asin\0").map(|sym| *sym);
        let __asin = __library.get(b"__asin\0").map(|sym| *sym);
        let atan = __library.get(b"atan\0").map(|sym| *sym);
        let __atan = __library.get(b"__atan\0").map(|sym| *sym);
        let atan2 = __library.get(b"atan2\0").map(|sym| *sym);
        let __atan2 = __library.get(b"__atan2\0").map(|sym| *sym);
        let cos = __library.get(b"cos\0").map(|sym| *sym);
        let __cos = __library.get(b"__cos\0").map(|sym| *sym);
        let sin = __library.get(b"sin\0").map(|sym| *sym);
        let __sin = __library.get(b"__sin\0").map(|sym| *sym);
        let tan = __library.get(b"tan\0").map(|sym| *sym);
        let __tan = __library.get(b"__tan\0").map(|sym| *sym);
        let cosh = __library.get(b"cosh\0").map(|sym| *sym);
        let __cosh = __library.get(b"__cosh\0").map(|sym| *sym);
        let sinh = __library.get(b"sinh\0").map(|sym| *sym);
        let __sinh = __library.get(b"__sinh\0").map(|sym| *sym);
        let tanh = __library.get(b"tanh\0").map(|sym| *sym);
        let __tanh = __library.get(b"__tanh\0").map(|sym| *sym);
        let acosh = __library.get(b"acosh\0").map(|sym| *sym);
        let __acosh = __library.get(b"__acosh\0").map(|sym| *sym);
        let asinh = __library.get(b"asinh\0").map(|sym| *sym);
        let __asinh = __library.get(b"__asinh\0").map(|sym| *sym);
        let atanh = __library.get(b"atanh\0").map(|sym| *sym);
        let __atanh = __library.get(b"__atanh\0").map(|sym| *sym);
        let exp = __library.get(b"exp\0").map(|sym| *sym);
        let __exp = __library.get(b"__exp\0").map(|sym| *sym);
        let frexp = __library.get(b"frexp\0").map(|sym| *sym);
        let __frexp = __library.get(b"__frexp\0").map(|sym| *sym);
        let ldexp = __library.get(b"ldexp\0").map(|sym| *sym);
        let __ldexp = __library.get(b"__ldexp\0").map(|sym| *sym);
        let log = __library.get(b"log\0").map(|sym| *sym);
        let __log = __library.get(b"__log\0").map(|sym| *sym);
        let log10 = __library.get(b"log10\0").map(|sym| *sym);
        let __log10 = __library.get(b"__log10\0").map(|sym| *sym);
        let modf = __library.get(b"modf\0").map(|sym| *sym);
        let __modf = __library.get(b"__modf\0").map(|sym| *sym);
        let expm1 = __library.get(b"expm1\0").map(|sym| *sym);
        let __expm1 = __library.get(b"__expm1\0").map(|sym| *sym);
        let log1p = __library.get(b"log1p\0").map(|sym| *sym);
        let __log1p = __library.get(b"__log1p\0").map(|sym| *sym);
        let logb = __library.get(b"logb\0").map(|sym| *sym);
        let __logb = __library.get(b"__logb\0").map(|sym| *sym);
        let exp2 = __library.get(b"exp2\0").map(|sym| *sym);
        let __exp2 = __library.get(b"__exp2\0").map(|sym| *sym);
        let log2 = __library.get(b"log2\0").map(|sym| *sym);
        let __log2 = __library.get(b"__log2\0").map(|sym| *sym);
        let pow = __library.get(b"pow\0").map(|sym| *sym);
        let __pow = __library.get(b"__pow\0").map(|sym| *sym);
        let sqrt = __library.get(b"sqrt\0").map(|sym| *sym);
        let __sqrt = __library.get(b"__sqrt\0").map(|sym| *sym);
        let hypot = __library.get(b"hypot\0").map(|sym| *sym);
        let __hypot = __library.get(b"__hypot\0").map(|sym| *sym);
        let cbrt = __library.get(b"cbrt\0").map(|sym| *sym);
        let __cbrt = __library.get(b"__cbrt\0").map(|sym| *sym);
        let ceil = __library.get(b"ceil\0").map(|sym| *sym);
        let __ceil = __library.get(b"__ceil\0").map(|sym| *sym);
        let fabs = __library.get(b"fabs\0").map(|sym| *sym);
        let __fabs = __library.get(b"__fabs\0").map(|sym| *sym);
        let floor = __library.get(b"floor\0").map(|sym| *sym);
        let __floor = __library.get(b"__floor\0").map(|sym| *sym);
        let fmod = __library.get(b"fmod\0").map(|sym| *sym);
        let __fmod = __library.get(b"__fmod\0").map(|sym| *sym);
        let isinf = __library.get(b"isinf\0").map(|sym| *sym);
        let finite = __library.get(b"finite\0").map(|sym| *sym);
        let drem = __library.get(b"drem\0").map(|sym| *sym);
        let __drem = __library.get(b"__drem\0").map(|sym| *sym);
        let significand = __library.get(b"significand\0").map(|sym| *sym);
        let __significand = __library.get(b"__significand\0").map(|sym| *sym);
        let copysign = __library.get(b"copysign\0").map(|sym| *sym);
        let __copysign = __library.get(b"__copysign\0").map(|sym| *sym);
        let nan = __library.get(b"nan\0").map(|sym| *sym);
        let __nan = __library.get(b"__nan\0").map(|sym| *sym);
        let isnan = __library.get(b"isnan\0").map(|sym| *sym);
        let j0 = __library.get(b"j0\0").map(|sym| *sym);
        let __j0 = __library.get(b"__j0\0").map(|sym| *sym);
        let j1 = __library.get(b"j1\0").map(|sym| *sym);
        let __j1 = __library.get(b"__j1\0").map(|sym| *sym);
        let jn = __library.get(b"jn\0").map(|sym| *sym);
        let __jn = __library.get(b"__jn\0").map(|sym| *sym);
        let y0 = __library.get(b"y0\0").map(|sym| *sym);
        let __y0 = __library.get(b"__y0\0").map(|sym| *sym);
        let y1 = __library.get(b"y1\0").map(|sym| *sym);
        let __y1 = __library.get(b"__y1\0").map(|sym| *sym);
        let yn = __library.get(b"yn\0").map(|sym| *sym);
        let __yn = __library.get(b"__yn\0").map(|sym| *sym);
        let erf = __library.get(b"erf\0").map(|sym| *sym);
        let __erf = __library.get(b"__erf\0").map(|sym| *sym);
        let erfc = __library.get(b"erfc\0").map(|sym| *sym);
        let __erfc = __library.get(b"__erfc\0").map(|sym| *sym);
        let lgamma = __library.get(b"lgamma\0").map(|sym| *sym);
        let __lgamma = __library.get(b"__lgamma\0").map(|sym| *sym);
        let tgamma = __library.get(b"tgamma\0").map(|sym| *sym);
        let __tgamma = __library.get(b"__tgamma\0").map(|sym| *sym);
        let gamma = __library.get(b"gamma\0").map(|sym| *sym);
        let __gamma = __library.get(b"__gamma\0").map(|sym| *sym);
        let lgamma_r = __library.get(b"lgamma_r\0").map(|sym| *sym);
        let __lgamma_r = __library.get(b"__lgamma_r\0").map(|sym| *sym);
        let rint = __library.get(b"rint\0").map(|sym| *sym);
        let __rint = __library.get(b"__rint\0").map(|sym| *sym);
        let nextafter = __library.get(b"nextafter\0").map(|sym| *sym);
        let __nextafter = __library.get(b"__nextafter\0").map(|sym| *sym);
        let nexttoward = __library.get(b"nexttoward\0").map(|sym| *sym);
        let __nexttoward = __library.get(b"__nexttoward\0").map(|sym| *sym);
        let remainder = __library.get(b"remainder\0").map(|sym| *sym);
        let __remainder = __library.get(b"__remainder\0").map(|sym| *sym);
        let scalbn = __library.get(b"scalbn\0").map(|sym| *sym);
        let __scalbn = __library.get(b"__scalbn\0").map(|sym| *sym);
        let ilogb = __library.get(b"ilogb\0").map(|sym| *sym);
        let __ilogb = __library.get(b"__ilogb\0").map(|sym| *sym);
        let scalbln = __library.get(b"scalbln\0").map(|sym| *sym);
        let __scalbln = __library.get(b"__scalbln\0").map(|sym| *sym);
        let nearbyint = __library.get(b"nearbyint\0").map(|sym| *sym);
        let __nearbyint = __library.get(b"__nearbyint\0").map(|sym| *sym);
        let round = __library.get(b"round\0").map(|sym| *sym);
        let __round = __library.get(b"__round\0").map(|sym| *sym);
        let trunc = __library.get(b"trunc\0").map(|sym| *sym);
        let __trunc = __library.get(b"__trunc\0").map(|sym| *sym);
        let remquo = __library.get(b"remquo\0").map(|sym| *sym);
        let __remquo = __library.get(b"__remquo\0").map(|sym| *sym);
        let lrint = __library.get(b"lrint\0").map(|sym| *sym);
        let __lrint = __library.get(b"__lrint\0").map(|sym| *sym);
        let llrint = __library.get(b"llrint\0").map(|sym| *sym);
        let __llrint = __library.get(b"__llrint\0").map(|sym| *sym);
        let lround = __library.get(b"lround\0").map(|sym| *sym);
        let __lround = __library.get(b"__lround\0").map(|sym| *sym);
        let llround = __library.get(b"llround\0").map(|sym| *sym);
        let __llround = __library.get(b"__llround\0").map(|sym| *sym);
        let fdim = __library.get(b"fdim\0").map(|sym| *sym);
        let __fdim = __library.get(b"__fdim\0").map(|sym| *sym);
        let fmax = __library.get(b"fmax\0").map(|sym| *sym);
        let __fmax = __library.get(b"__fmax\0").map(|sym| *sym);
        let fmin = __library.get(b"fmin\0").map(|sym| *sym);
        let __fmin = __library.get(b"__fmin\0").map(|sym| *sym);
        let fma = __library.get(b"fma\0").map(|sym| *sym);
        let __fma = __library.get(b"__fma\0").map(|sym| *sym);
        let scalb = __library.get(b"scalb\0").map(|sym| *sym);
        let __scalb = __library.get(b"__scalb\0").map(|sym| *sym);
        let __fpclassifyf = __library.get(b"__fpclassifyf\0").map(|sym| *sym);
        let __signbitf = __library.get(b"__signbitf\0").map(|sym| *sym);
        let __isinff = __library.get(b"__isinff\0").map(|sym| *sym);
        let __finitef = __library.get(b"__finitef\0").map(|sym| *sym);
        let __isnanf = __library.get(b"__isnanf\0").map(|sym| *sym);
        let __iseqsigf = __library.get(b"__iseqsigf\0").map(|sym| *sym);
        let __issignalingf = __library.get(b"__issignalingf\0").map(|sym| *sym);
        let acosf = __library.get(b"acosf\0").map(|sym| *sym);
        let __acosf = __library.get(b"__acosf\0").map(|sym| *sym);
        let asinf = __library.get(b"asinf\0").map(|sym| *sym);
        let __asinf = __library.get(b"__asinf\0").map(|sym| *sym);
        let atanf = __library.get(b"atanf\0").map(|sym| *sym);
        let __atanf = __library.get(b"__atanf\0").map(|sym| *sym);
        let atan2f = __library.get(b"atan2f\0").map(|sym| *sym);
        let __atan2f = __library.get(b"__atan2f\0").map(|sym| *sym);
        let cosf = __library.get(b"cosf\0").map(|sym| *sym);
        let __cosf = __library.get(b"__cosf\0").map(|sym| *sym);
        let sinf = __library.get(b"sinf\0").map(|sym| *sym);
        let __sinf = __library.get(b"__sinf\0").map(|sym| *sym);
        let tanf = __library.get(b"tanf\0").map(|sym| *sym);
        let __tanf = __library.get(b"__tanf\0").map(|sym| *sym);
        let coshf = __library.get(b"coshf\0").map(|sym| *sym);
        let __coshf = __library.get(b"__coshf\0").map(|sym| *sym);
        let sinhf = __library.get(b"sinhf\0").map(|sym| *sym);
        let __sinhf = __library.get(b"__sinhf\0").map(|sym| *sym);
        let tanhf = __library.get(b"tanhf\0").map(|sym| *sym);
        let __tanhf = __library.get(b"__tanhf\0").map(|sym| *sym);
        let acoshf = __library.get(b"acoshf\0").map(|sym| *sym);
        let __acoshf = __library.get(b"__acoshf\0").map(|sym| *sym);
        let asinhf = __library.get(b"asinhf\0").map(|sym| *sym);
        let __asinhf = __library.get(b"__asinhf\0").map(|sym| *sym);
        let atanhf = __library.get(b"atanhf\0").map(|sym| *sym);
        let __atanhf = __library.get(b"__atanhf\0").map(|sym| *sym);
        let expf = __library.get(b"expf\0").map(|sym| *sym);
        let __expf = __library.get(b"__expf\0").map(|sym| *sym);
        let frexpf = __library.get(b"frexpf\0").map(|sym| *sym);
        let __frexpf = __library.get(b"__frexpf\0").map(|sym| *sym);
        let ldexpf = __library.get(b"ldexpf\0").map(|sym| *sym);
        let __ldexpf = __library.get(b"__ldexpf\0").map(|sym| *sym);
        let logf = __library.get(b"logf\0").map(|sym| *sym);
        let __logf = __library.get(b"__logf\0").map(|sym| *sym);
        let log10f = __library.get(b"log10f\0").map(|sym| *sym);
        let __log10f = __library.get(b"__log10f\0").map(|sym| *sym);
        let modff = __library.get(b"modff\0").map(|sym| *sym);
        let __modff = __library.get(b"__modff\0").map(|sym| *sym);
        let expm1f = __library.get(b"expm1f\0").map(|sym| *sym);
        let __expm1f = __library.get(b"__expm1f\0").map(|sym| *sym);
        let log1pf = __library.get(b"log1pf\0").map(|sym| *sym);
        let __log1pf = __library.get(b"__log1pf\0").map(|sym| *sym);
        let logbf = __library.get(b"logbf\0").map(|sym| *sym);
        let __logbf = __library.get(b"__logbf\0").map(|sym| *sym);
        let exp2f = __library.get(b"exp2f\0").map(|sym| *sym);
        let __exp2f = __library.get(b"__exp2f\0").map(|sym| *sym);
        let log2f = __library.get(b"log2f\0").map(|sym| *sym);
        let __log2f = __library.get(b"__log2f\0").map(|sym| *sym);
        let powf = __library.get(b"powf\0").map(|sym| *sym);
        let __powf = __library.get(b"__powf\0").map(|sym| *sym);
        let sqrtf = __library.get(b"sqrtf\0").map(|sym| *sym);
        let __sqrtf = __library.get(b"__sqrtf\0").map(|sym| *sym);
        let hypotf = __library.get(b"hypotf\0").map(|sym| *sym);
        let __hypotf = __library.get(b"__hypotf\0").map(|sym| *sym);
        let cbrtf = __library.get(b"cbrtf\0").map(|sym| *sym);
        let __cbrtf = __library.get(b"__cbrtf\0").map(|sym| *sym);
        let ceilf = __library.get(b"ceilf\0").map(|sym| *sym);
        let __ceilf = __library.get(b"__ceilf\0").map(|sym| *sym);
        let fabsf = __library.get(b"fabsf\0").map(|sym| *sym);
        let __fabsf = __library.get(b"__fabsf\0").map(|sym| *sym);
        let floorf = __library.get(b"floorf\0").map(|sym| *sym);
        let __floorf = __library.get(b"__floorf\0").map(|sym| *sym);
        let fmodf = __library.get(b"fmodf\0").map(|sym| *sym);
        let __fmodf = __library.get(b"__fmodf\0").map(|sym| *sym);
        let isinff = __library.get(b"isinff\0").map(|sym| *sym);
        let finitef = __library.get(b"finitef\0").map(|sym| *sym);
        let dremf = __library.get(b"dremf\0").map(|sym| *sym);
        let __dremf = __library.get(b"__dremf\0").map(|sym| *sym);
        let significandf = __library.get(b"significandf\0").map(|sym| *sym);
        let __significandf = __library.get(b"__significandf\0").map(|sym| *sym);
        let copysignf = __library.get(b"copysignf\0").map(|sym| *sym);
        let __copysignf = __library.get(b"__copysignf\0").map(|sym| *sym);
        let nanf = __library.get(b"nanf\0").map(|sym| *sym);
        let __nanf = __library.get(b"__nanf\0").map(|sym| *sym);
        let isnanf = __library.get(b"isnanf\0").map(|sym| *sym);
        let j0f = __library.get(b"j0f\0").map(|sym| *sym);
        let __j0f = __library.get(b"__j0f\0").map(|sym| *sym);
        let j1f = __library.get(b"j1f\0").map(|sym| *sym);
        let __j1f = __library.get(b"__j1f\0").map(|sym| *sym);
        let jnf = __library.get(b"jnf\0").map(|sym| *sym);
        let __jnf = __library.get(b"__jnf\0").map(|sym| *sym);
        let y0f = __library.get(b"y0f\0").map(|sym| *sym);
        let __y0f = __library.get(b"__y0f\0").map(|sym| *sym);
        let y1f = __library.get(b"y1f\0").map(|sym| *sym);
        let __y1f = __library.get(b"__y1f\0").map(|sym| *sym);
        let ynf = __library.get(b"ynf\0").map(|sym| *sym);
        let __ynf = __library.get(b"__ynf\0").map(|sym| *sym);
        let erff = __library.get(b"erff\0").map(|sym| *sym);
        let __erff = __library.get(b"__erff\0").map(|sym| *sym);
        let erfcf = __library.get(b"erfcf\0").map(|sym| *sym);
        let __erfcf = __library.get(b"__erfcf\0").map(|sym| *sym);
        let lgammaf = __library.get(b"lgammaf\0").map(|sym| *sym);
        let __lgammaf = __library.get(b"__lgammaf\0").map(|sym| *sym);
        let tgammaf = __library.get(b"tgammaf\0").map(|sym| *sym);
        let __tgammaf = __library.get(b"__tgammaf\0").map(|sym| *sym);
        let gammaf = __library.get(b"gammaf\0").map(|sym| *sym);
        let __gammaf = __library.get(b"__gammaf\0").map(|sym| *sym);
        let lgammaf_r = __library.get(b"lgammaf_r\0").map(|sym| *sym);
        let __lgammaf_r = __library.get(b"__lgammaf_r\0").map(|sym| *sym);
        let rintf = __library.get(b"rintf\0").map(|sym| *sym);
        let __rintf = __library.get(b"__rintf\0").map(|sym| *sym);
        let nextafterf = __library.get(b"nextafterf\0").map(|sym| *sym);
        let __nextafterf = __library.get(b"__nextafterf\0").map(|sym| *sym);
        let nexttowardf = __library.get(b"nexttowardf\0").map(|sym| *sym);
        let __nexttowardf = __library.get(b"__nexttowardf\0").map(|sym| *sym);
        let remainderf = __library.get(b"remainderf\0").map(|sym| *sym);
        let __remainderf = __library.get(b"__remainderf\0").map(|sym| *sym);
        let scalbnf = __library.get(b"scalbnf\0").map(|sym| *sym);
        let __scalbnf = __library.get(b"__scalbnf\0").map(|sym| *sym);
        let ilogbf = __library.get(b"ilogbf\0").map(|sym| *sym);
        let __ilogbf = __library.get(b"__ilogbf\0").map(|sym| *sym);
        let scalblnf = __library.get(b"scalblnf\0").map(|sym| *sym);
        let __scalblnf = __library.get(b"__scalblnf\0").map(|sym| *sym);
        let nearbyintf = __library.get(b"nearbyintf\0").map(|sym| *sym);
        let __nearbyintf = __library.get(b"__nearbyintf\0").map(|sym| *sym);
        let roundf = __library.get(b"roundf\0").map(|sym| *sym);
        let __roundf = __library.get(b"__roundf\0").map(|sym| *sym);
        let truncf = __library.get(b"truncf\0").map(|sym| *sym);
        let __truncf = __library.get(b"__truncf\0").map(|sym| *sym);
        let remquof = __library.get(b"remquof\0").map(|sym| *sym);
        let __remquof = __library.get(b"__remquof\0").map(|sym| *sym);
        let lrintf = __library.get(b"lrintf\0").map(|sym| *sym);
        let __lrintf = __library.get(b"__lrintf\0").map(|sym| *sym);
        let llrintf = __library.get(b"llrintf\0").map(|sym| *sym);
        let __llrintf = __library.get(b"__llrintf\0").map(|sym| *sym);
        let lroundf = __library.get(b"lroundf\0").map(|sym| *sym);
        let __lroundf = __library.get(b"__lroundf\0").map(|sym| *sym);
        let llroundf = __library.get(b"llroundf\0").map(|sym| *sym);
        let __llroundf = __library.get(b"__llroundf\0").map(|sym| *sym);
        let fdimf = __library.get(b"fdimf\0").map(|sym| *sym);
        let __fdimf = __library.get(b"__fdimf\0").map(|sym| *sym);
        let fmaxf = __library.get(b"fmaxf\0").map(|sym| *sym);
        let __fmaxf = __library.get(b"__fmaxf\0").map(|sym| *sym);
        let fminf = __library.get(b"fminf\0").map(|sym| *sym);
        let __fminf = __library.get(b"__fminf\0").map(|sym| *sym);
        let fmaf = __library.get(b"fmaf\0").map(|sym| *sym);
        let __fmaf = __library.get(b"__fmaf\0").map(|sym| *sym);
        let scalbf = __library.get(b"scalbf\0").map(|sym| *sym);
        let __scalbf = __library.get(b"__scalbf\0").map(|sym| *sym);
        let __fpclassifyl = __library.get(b"__fpclassifyl\0").map(|sym| *sym);
        let __signbitl = __library.get(b"__signbitl\0").map(|sym| *sym);
        let __isinfl = __library.get(b"__isinfl\0").map(|sym| *sym);
        let __finitel = __library.get(b"__finitel\0").map(|sym| *sym);
        let __isnanl = __library.get(b"__isnanl\0").map(|sym| *sym);
        let __iseqsigl = __library.get(b"__iseqsigl\0").map(|sym| *sym);
        let __issignalingl = __library.get(b"__issignalingl\0").map(|sym| *sym);
        let acosl = __library.get(b"acosl\0").map(|sym| *sym);
        let __acosl = __library.get(b"__acosl\0").map(|sym| *sym);
        let asinl = __library.get(b"asinl\0").map(|sym| *sym);
        let __asinl = __library.get(b"__asinl\0").map(|sym| *sym);
        let atanl = __library.get(b"atanl\0").map(|sym| *sym);
        let __atanl = __library.get(b"__atanl\0").map(|sym| *sym);
        let atan2l = __library.get(b"atan2l\0").map(|sym| *sym);
        let __atan2l = __library.get(b"__atan2l\0").map(|sym| *sym);
        let cosl = __library.get(b"cosl\0").map(|sym| *sym);
        let __cosl = __library.get(b"__cosl\0").map(|sym| *sym);
        let sinl = __library.get(b"sinl\0").map(|sym| *sym);
        let __sinl = __library.get(b"__sinl\0").map(|sym| *sym);
        let tanl = __library.get(b"tanl\0").map(|sym| *sym);
        let __tanl = __library.get(b"__tanl\0").map(|sym| *sym);
        let coshl = __library.get(b"coshl\0").map(|sym| *sym);
        let __coshl = __library.get(b"__coshl\0").map(|sym| *sym);
        let sinhl = __library.get(b"sinhl\0").map(|sym| *sym);
        let __sinhl = __library.get(b"__sinhl\0").map(|sym| *sym);
        let tanhl = __library.get(b"tanhl\0").map(|sym| *sym);
        let __tanhl = __library.get(b"__tanhl\0").map(|sym| *sym);
        let acoshl = __library.get(b"acoshl\0").map(|sym| *sym);
        let __acoshl = __library.get(b"__acoshl\0").map(|sym| *sym);
        let asinhl = __library.get(b"asinhl\0").map(|sym| *sym);
        let __asinhl = __library.get(b"__asinhl\0").map(|sym| *sym);
        let atanhl = __library.get(b"atanhl\0").map(|sym| *sym);
        let __atanhl = __library.get(b"__atanhl\0").map(|sym| *sym);
        let expl = __library.get(b"expl\0").map(|sym| *sym);
        let __expl = __library.get(b"__expl\0").map(|sym| *sym);
        let frexpl = __library.get(b"frexpl\0").map(|sym| *sym);
        let __frexpl = __library.get(b"__frexpl\0").map(|sym| *sym);
        let ldexpl = __library.get(b"ldexpl\0").map(|sym| *sym);
        let __ldexpl = __library.get(b"__ldexpl\0").map(|sym| *sym);
        let logl = __library.get(b"logl\0").map(|sym| *sym);
        let __logl = __library.get(b"__logl\0").map(|sym| *sym);
        let log10l = __library.get(b"log10l\0").map(|sym| *sym);
        let __log10l = __library.get(b"__log10l\0").map(|sym| *sym);
        let modfl = __library.get(b"modfl\0").map(|sym| *sym);
        let __modfl = __library.get(b"__modfl\0").map(|sym| *sym);
        let expm1l = __library.get(b"expm1l\0").map(|sym| *sym);
        let __expm1l = __library.get(b"__expm1l\0").map(|sym| *sym);
        let log1pl = __library.get(b"log1pl\0").map(|sym| *sym);
        let __log1pl = __library.get(b"__log1pl\0").map(|sym| *sym);
        let logbl = __library.get(b"logbl\0").map(|sym| *sym);
        let __logbl = __library.get(b"__logbl\0").map(|sym| *sym);
        let exp2l = __library.get(b"exp2l\0").map(|sym| *sym);
        let __exp2l = __library.get(b"__exp2l\0").map(|sym| *sym);
        let log2l = __library.get(b"log2l\0").map(|sym| *sym);
        let __log2l = __library.get(b"__log2l\0").map(|sym| *sym);
        let powl = __library.get(b"powl\0").map(|sym| *sym);
        let __powl = __library.get(b"__powl\0").map(|sym| *sym);
        let sqrtl = __library.get(b"sqrtl\0").map(|sym| *sym);
        let __sqrtl = __library.get(b"__sqrtl\0").map(|sym| *sym);
        let hypotl = __library.get(b"hypotl\0").map(|sym| *sym);
        let __hypotl = __library.get(b"__hypotl\0").map(|sym| *sym);
        let cbrtl = __library.get(b"cbrtl\0").map(|sym| *sym);
        let __cbrtl = __library.get(b"__cbrtl\0").map(|sym| *sym);
        let ceill = __library.get(b"ceill\0").map(|sym| *sym);
        let __ceill = __library.get(b"__ceill\0").map(|sym| *sym);
        let fabsl = __library.get(b"fabsl\0").map(|sym| *sym);
        let __fabsl = __library.get(b"__fabsl\0").map(|sym| *sym);
        let floorl = __library.get(b"floorl\0").map(|sym| *sym);
        let __floorl = __library.get(b"__floorl\0").map(|sym| *sym);
        let fmodl = __library.get(b"fmodl\0").map(|sym| *sym);
        let __fmodl = __library.get(b"__fmodl\0").map(|sym| *sym);
        let isinfl = __library.get(b"isinfl\0").map(|sym| *sym);
        let finitel = __library.get(b"finitel\0").map(|sym| *sym);
        let dreml = __library.get(b"dreml\0").map(|sym| *sym);
        let __dreml = __library.get(b"__dreml\0").map(|sym| *sym);
        let significandl = __library.get(b"significandl\0").map(|sym| *sym);
        let __significandl = __library.get(b"__significandl\0").map(|sym| *sym);
        let copysignl = __library.get(b"copysignl\0").map(|sym| *sym);
        let __copysignl = __library.get(b"__copysignl\0").map(|sym| *sym);
        let nanl = __library.get(b"nanl\0").map(|sym| *sym);
        let __nanl = __library.get(b"__nanl\0").map(|sym| *sym);
        let isnanl = __library.get(b"isnanl\0").map(|sym| *sym);
        let j0l = __library.get(b"j0l\0").map(|sym| *sym);
        let __j0l = __library.get(b"__j0l\0").map(|sym| *sym);
        let j1l = __library.get(b"j1l\0").map(|sym| *sym);
        let __j1l = __library.get(b"__j1l\0").map(|sym| *sym);
        let jnl = __library.get(b"jnl\0").map(|sym| *sym);
        let __jnl = __library.get(b"__jnl\0").map(|sym| *sym);
        let y0l = __library.get(b"y0l\0").map(|sym| *sym);
        let __y0l = __library.get(b"__y0l\0").map(|sym| *sym);
        let y1l = __library.get(b"y1l\0").map(|sym| *sym);
        let __y1l = __library.get(b"__y1l\0").map(|sym| *sym);
        let ynl = __library.get(b"ynl\0").map(|sym| *sym);
        let __ynl = __library.get(b"__ynl\0").map(|sym| *sym);
        let erfl = __library.get(b"erfl\0").map(|sym| *sym);
        let __erfl = __library.get(b"__erfl\0").map(|sym| *sym);
        let erfcl = __library.get(b"erfcl\0").map(|sym| *sym);
        let __erfcl = __library.get(b"__erfcl\0").map(|sym| *sym);
        let lgammal = __library.get(b"lgammal\0").map(|sym| *sym);
        let __lgammal = __library.get(b"__lgammal\0").map(|sym| *sym);
        let tgammal = __library.get(b"tgammal\0").map(|sym| *sym);
        let __tgammal = __library.get(b"__tgammal\0").map(|sym| *sym);
        let gammal = __library.get(b"gammal\0").map(|sym| *sym);
        let __gammal = __library.get(b"__gammal\0").map(|sym| *sym);
        let lgammal_r = __library.get(b"lgammal_r\0").map(|sym| *sym);
        let __lgammal_r = __library.get(b"__lgammal_r\0").map(|sym| *sym);
        let rintl = __library.get(b"rintl\0").map(|sym| *sym);
        let __rintl = __library.get(b"__rintl\0").map(|sym| *sym);
        let nextafterl = __library.get(b"nextafterl\0").map(|sym| *sym);
        let __nextafterl = __library.get(b"__nextafterl\0").map(|sym| *sym);
        let nexttowardl = __library.get(b"nexttowardl\0").map(|sym| *sym);
        let __nexttowardl = __library.get(b"__nexttowardl\0").map(|sym| *sym);
        let remainderl = __library.get(b"remainderl\0").map(|sym| *sym);
        let __remainderl = __library.get(b"__remainderl\0").map(|sym| *sym);
        let scalbnl = __library.get(b"scalbnl\0").map(|sym| *sym);
        let __scalbnl = __library.get(b"__scalbnl\0").map(|sym| *sym);
        let ilogbl = __library.get(b"ilogbl\0").map(|sym| *sym);
        let __ilogbl = __library.get(b"__ilogbl\0").map(|sym| *sym);
        let scalblnl = __library.get(b"scalblnl\0").map(|sym| *sym);
        let __scalblnl = __library.get(b"__scalblnl\0").map(|sym| *sym);
        let nearbyintl = __library.get(b"nearbyintl\0").map(|sym| *sym);
        let __nearbyintl = __library.get(b"__nearbyintl\0").map(|sym| *sym);
        let roundl = __library.get(b"roundl\0").map(|sym| *sym);
        let __roundl = __library.get(b"__roundl\0").map(|sym| *sym);
        let truncl = __library.get(b"truncl\0").map(|sym| *sym);
        let __truncl = __library.get(b"__truncl\0").map(|sym| *sym);
        let remquol = __library.get(b"remquol\0").map(|sym| *sym);
        let __remquol = __library.get(b"__remquol\0").map(|sym| *sym);
        let lrintl = __library.get(b"lrintl\0").map(|sym| *sym);
        let __lrintl = __library.get(b"__lrintl\0").map(|sym| *sym);
        let llrintl = __library.get(b"llrintl\0").map(|sym| *sym);
        let __llrintl = __library.get(b"__llrintl\0").map(|sym| *sym);
        let lroundl = __library.get(b"lroundl\0").map(|sym| *sym);
        let __lroundl = __library.get(b"__lroundl\0").map(|sym| *sym);
        let llroundl = __library.get(b"llroundl\0").map(|sym| *sym);
        let __llroundl = __library.get(b"__llroundl\0").map(|sym| *sym);
        let fdiml = __library.get(b"fdiml\0").map(|sym| *sym);
        let __fdiml = __library.get(b"__fdiml\0").map(|sym| *sym);
        let fmaxl = __library.get(b"fmaxl\0").map(|sym| *sym);
        let __fmaxl = __library.get(b"__fmaxl\0").map(|sym| *sym);
        let fminl = __library.get(b"fminl\0").map(|sym| *sym);
        let __fminl = __library.get(b"__fminl\0").map(|sym| *sym);
        let fmal = __library.get(b"fmal\0").map(|sym| *sym);
        let __fmal = __library.get(b"__fmal\0").map(|sym| *sym);
        let scalbl = __library.get(b"scalbl\0").map(|sym| *sym);
        let __scalbl = __library.get(b"__scalbl\0").map(|sym| *sym);
        let remove = __library.get(b"remove\0").map(|sym| *sym);
        let rename = __library.get(b"rename\0").map(|sym| *sym);
        let renameat = __library.get(b"renameat\0").map(|sym| *sym);
        let fclose = __library.get(b"fclose\0").map(|sym| *sym);
        let tmpfile = __library.get(b"tmpfile\0").map(|sym| *sym);
        let tmpnam = __library.get(b"tmpnam\0").map(|sym| *sym);
        let tmpnam_r = __library.get(b"tmpnam_r\0").map(|sym| *sym);
        let tempnam = __library.get(b"tempnam\0").map(|sym| *sym);
        let fflush = __library.get(b"fflush\0").map(|sym| *sym);
        let fflush_unlocked = __library.get(b"fflush_unlocked\0").map(|sym| *sym);
        let fopen = __library.get(b"fopen\0").map(|sym| *sym);
        let freopen = __library.get(b"freopen\0").map(|sym| *sym);
        let fdopen = __library.get(b"fdopen\0").map(|sym| *sym);
        let fmemopen = __library.get(b"fmemopen\0").map(|sym| *sym);
        let open_memstream = __library.get(b"open_memstream\0").map(|sym| *sym);
        let setbuf = __library.get(b"setbuf\0").map(|sym| *sym);
        let setvbuf = __library.get(b"setvbuf\0").map(|sym| *sym);
        let setbuffer = __library.get(b"setbuffer\0").map(|sym| *sym);
        let setlinebuf = __library.get(b"setlinebuf\0").map(|sym| *sym);
        let fprintf = __library.get(b"fprintf\0").map(|sym| *sym);
        let printf = __library.get(b"printf\0").map(|sym| *sym);
        let sprintf = __library.get(b"sprintf\0").map(|sym| *sym);
        let vfprintf = __library.get(b"vfprintf\0").map(|sym| *sym);
        let vprintf = __library.get(b"vprintf\0").map(|sym| *sym);
        let vsprintf = __library.get(b"vsprintf\0").map(|sym| *sym);
        let snprintf = __library.get(b"snprintf\0").map(|sym| *sym);
        let vsnprintf = __library.get(b"vsnprintf\0").map(|sym| *sym);
        let vdprintf = __library.get(b"vdprintf\0").map(|sym| *sym);
        let dprintf = __library.get(b"dprintf\0").map(|sym| *sym);
        let fscanf = __library.get(b"fscanf\0").map(|sym| *sym);
        let scanf = __library.get(b"scanf\0").map(|sym| *sym);
        let sscanf = __library.get(b"sscanf\0").map(|sym| *sym);
        let fscanf1 = __library.get(b"fscanf1\0").map(|sym| *sym);
        let scanf1 = __library.get(b"scanf1\0").map(|sym| *sym);
        let sscanf1 = __library.get(b"sscanf1\0").map(|sym| *sym);
        let vfscanf = __library.get(b"vfscanf\0").map(|sym| *sym);
        let vscanf = __library.get(b"vscanf\0").map(|sym| *sym);
        let vsscanf = __library.get(b"vsscanf\0").map(|sym| *sym);
        let vfscanf1 = __library.get(b"vfscanf1\0").map(|sym| *sym);
        let vscanf1 = __library.get(b"vscanf1\0").map(|sym| *sym);
        let vsscanf1 = __library.get(b"vsscanf1\0").map(|sym| *sym);
        let fgetc = __library.get(b"fgetc\0").map(|sym| *sym);
        let getc = __library.get(b"getc\0").map(|sym| *sym);
        let getchar = __library.get(b"getchar\0").map(|sym| *sym);
        let getc_unlocked = __library.get(b"getc_unlocked\0").map(|sym| *sym);
        let getchar_unlocked = __library.get(b"getchar_unlocked\0").map(|sym| *sym);
        let fgetc_unlocked = __library.get(b"fgetc_unlocked\0").map(|sym| *sym);
        let fputc = __library.get(b"fputc\0").map(|sym| *sym);
        let putc = __library.get(b"putc\0").map(|sym| *sym);
        let putchar = __library.get(b"putchar\0").map(|sym| *sym);
        let fputc_unlocked = __library.get(b"fputc_unlocked\0").map(|sym| *sym);
        let putc_unlocked = __library.get(b"putc_unlocked\0").map(|sym| *sym);
        let putchar_unlocked = __library.get(b"putchar_unlocked\0").map(|sym| *sym);
        let getw = __library.get(b"getw\0").map(|sym| *sym);
        let putw = __library.get(b"putw\0").map(|sym| *sym);
        let fgets = __library.get(b"fgets\0").map(|sym| *sym);
        let __getdelim = __library.get(b"__getdelim\0").map(|sym| *sym);
        let getdelim = __library.get(b"getdelim\0").map(|sym| *sym);
        let getline = __library.get(b"getline\0").map(|sym| *sym);
        let fputs = __library.get(b"fputs\0").map(|sym| *sym);
        let puts = __library.get(b"puts\0").map(|sym| *sym);
        let ungetc = __library.get(b"ungetc\0").map(|sym| *sym);
        let fread = __library.get(b"fread\0").map(|sym| *sym);
        let fwrite = __library.get(b"fwrite\0").map(|sym| *sym);
        let fread_unlocked = __library.get(b"fread_unlocked\0").map(|sym| *sym);
        let fwrite_unlocked = __library.get(b"fwrite_unlocked\0").map(|sym| *sym);
        let fseek = __library.get(b"fseek\0").map(|sym| *sym);
        let ftell = __library.get(b"ftell\0").map(|sym| *sym);
        let rewind = __library.get(b"rewind\0").map(|sym| *sym);
        let fseeko = __library.get(b"fseeko\0").map(|sym| *sym);
        let ftello = __library.get(b"ftello\0").map(|sym| *sym);
        let fgetpos = __library.get(b"fgetpos\0").map(|sym| *sym);
        let fsetpos = __library.get(b"fsetpos\0").map(|sym| *sym);
        let clearerr = __library.get(b"clearerr\0").map(|sym| *sym);
        let feof = __library.get(b"feof\0").map(|sym| *sym);
        let ferror = __library.get(b"ferror\0").map(|sym| *sym);
        let clearerr_unlocked = __library.get(b"clearerr_unlocked\0").map(|sym| *sym);
        let feof_unlocked = __library.get(b"feof_unlocked\0").map(|sym| *sym);
        let ferror_unlocked = __library.get(b"ferror_unlocked\0").map(|sym| *sym);
        let perror = __library.get(b"perror\0").map(|sym| *sym);
        let fileno = __library.get(b"fileno\0").map(|sym| *sym);
        let fileno_unlocked = __library.get(b"fileno_unlocked\0").map(|sym| *sym);
        let pclose = __library.get(b"pclose\0").map(|sym| *sym);
        let popen = __library.get(b"popen\0").map(|sym| *sym);
        let ctermid = __library.get(b"ctermid\0").map(|sym| *sym);
        let flockfile = __library.get(b"flockfile\0").map(|sym| *sym);
        let ftrylockfile = __library.get(b"ftrylockfile\0").map(|sym| *sym);
        let funlockfile = __library.get(b"funlockfile\0").map(|sym| *sym);
        let __uflow = __library.get(b"__uflow\0").map(|sym| *sym);
        let __overflow = __library.get(b"__overflow\0").map(|sym| *sym);
        let __ctype_get_mb_cur_max = __library.get(b"__ctype_get_mb_cur_max\0").map(|sym| *sym);
        let atof = __library.get(b"atof\0").map(|sym| *sym);
        let atoi = __library.get(b"atoi\0").map(|sym| *sym);
        let atol = __library.get(b"atol\0").map(|sym| *sym);
        let atoll = __library.get(b"atoll\0").map(|sym| *sym);
        let strtod = __library.get(b"strtod\0").map(|sym| *sym);
        let strtof = __library.get(b"strtof\0").map(|sym| *sym);
        let strtold = __library.get(b"strtold\0").map(|sym| *sym);
        let strtol = __library.get(b"strtol\0").map(|sym| *sym);
        let strtoul = __library.get(b"strtoul\0").map(|sym| *sym);
        let strtoq = __library.get(b"strtoq\0").map(|sym| *sym);
        let strtouq = __library.get(b"strtouq\0").map(|sym| *sym);
        let strtoll = __library.get(b"strtoll\0").map(|sym| *sym);
        let strtoull = __library.get(b"strtoull\0").map(|sym| *sym);
        let l64a = __library.get(b"l64a\0").map(|sym| *sym);
        let a64l = __library.get(b"a64l\0").map(|sym| *sym);
        let select = __library.get(b"select\0").map(|sym| *sym);
        let pselect = __library.get(b"pselect\0").map(|sym| *sym);
        let random = __library.get(b"random\0").map(|sym| *sym);
        let srandom = __library.get(b"srandom\0").map(|sym| *sym);
        let initstate = __library.get(b"initstate\0").map(|sym| *sym);
        let setstate = __library.get(b"setstate\0").map(|sym| *sym);
        let random_r = __library.get(b"random_r\0").map(|sym| *sym);
        let srandom_r = __library.get(b"srandom_r\0").map(|sym| *sym);
        let initstate_r = __library.get(b"initstate_r\0").map(|sym| *sym);
        let setstate_r = __library.get(b"setstate_r\0").map(|sym| *sym);
        let rand = __library.get(b"rand\0").map(|sym| *sym);
        let srand = __library.get(b"srand\0").map(|sym| *sym);
        let rand_r = __library.get(b"rand_r\0").map(|sym| *sym);
        let drand48 = __library.get(b"drand48\0").map(|sym| *sym);
        let erand48 = __library.get(b"erand48\0").map(|sym| *sym);
        let lrand48 = __library.get(b"lrand48\0").map(|sym| *sym);
        let nrand48 = __library.get(b"nrand48\0").map(|sym| *sym);
        let mrand48 = __library.get(b"mrand48\0").map(|sym| *sym);
        let jrand48 = __library.get(b"jrand48\0").map(|sym| *sym);
        let srand48 = __library.get(b"srand48\0").map(|sym| *sym);
        let seed48 = __library.get(b"seed48\0").map(|sym| *sym);
        let lcong48 = __library.get(b"lcong48\0").map(|sym| *sym);
        let drand48_r = __library.get(b"drand48_r\0").map(|sym| *sym);
        let erand48_r = __library.get(b"erand48_r\0").map(|sym| *sym);
        let lrand48_r = __library.get(b"lrand48_r\0").map(|sym| *sym);
        let nrand48_r = __library.get(b"nrand48_r\0").map(|sym| *sym);
        let mrand48_r = __library.get(b"mrand48_r\0").map(|sym| *sym);
        let jrand48_r = __library.get(b"jrand48_r\0").map(|sym| *sym);
        let srand48_r = __library.get(b"srand48_r\0").map(|sym| *sym);
        let seed48_r = __library.get(b"seed48_r\0").map(|sym| *sym);
        let lcong48_r = __library.get(b"lcong48_r\0").map(|sym| *sym);
        let malloc = __library.get(b"malloc\0").map(|sym| *sym);
        let calloc = __library.get(b"calloc\0").map(|sym| *sym);
        let realloc = __library.get(b"realloc\0").map(|sym| *sym);
        let free = __library.get(b"free\0").map(|sym| *sym);
        let reallocarray = __library.get(b"reallocarray\0").map(|sym| *sym);
        let alloca = __library.get(b"alloca\0").map(|sym| *sym);
        let valloc = __library.get(b"valloc\0").map(|sym| *sym);
        let posix_memalign = __library.get(b"posix_memalign\0").map(|sym| *sym);
        let aligned_alloc = __library.get(b"aligned_alloc\0").map(|sym| *sym);
        let abort = __library.get(b"abort\0").map(|sym| *sym);
        let atexit = __library.get(b"atexit\0").map(|sym| *sym);
        let at_quick_exit = __library.get(b"at_quick_exit\0").map(|sym| *sym);
        let on_exit = __library.get(b"on_exit\0").map(|sym| *sym);
        let exit = __library.get(b"exit\0").map(|sym| *sym);
        let quick_exit = __library.get(b"quick_exit\0").map(|sym| *sym);
        let _Exit = __library.get(b"_Exit\0").map(|sym| *sym);
        let getenv = __library.get(b"getenv\0").map(|sym| *sym);
        let putenv = __library.get(b"putenv\0").map(|sym| *sym);
        let setenv = __library.get(b"setenv\0").map(|sym| *sym);
        let unsetenv = __library.get(b"unsetenv\0").map(|sym| *sym);
        let clearenv = __library.get(b"clearenv\0").map(|sym| *sym);
        let mktemp = __library.get(b"mktemp\0").map(|sym| *sym);
        let mkstemp = __library.get(b"mkstemp\0").map(|sym| *sym);
        let mkstemps = __library.get(b"mkstemps\0").map(|sym| *sym);
        let mkdtemp = __library.get(b"mkdtemp\0").map(|sym| *sym);
        let system = __library.get(b"system\0").map(|sym| *sym);
        let realpath = __library.get(b"realpath\0").map(|sym| *sym);
        let bsearch = __library.get(b"bsearch\0").map(|sym| *sym);
        let qsort = __library.get(b"qsort\0").map(|sym| *sym);
        let abs = __library.get(b"abs\0").map(|sym| *sym);
        let labs = __library.get(b"labs\0").map(|sym| *sym);
        let llabs = __library.get(b"llabs\0").map(|sym| *sym);
        let div = __library.get(b"div\0").map(|sym| *sym);
        let ldiv = __library.get(b"ldiv\0").map(|sym| *sym);
        let lldiv = __library.get(b"lldiv\0").map(|sym| *sym);
        let ecvt = __library.get(b"ecvt\0").map(|sym| *sym);
        let fcvt = __library.get(b"fcvt\0").map(|sym| *sym);
        let gcvt = __library.get(b"gcvt\0").map(|sym| *sym);
        let qecvt = __library.get(b"qecvt\0").map(|sym| *sym);
        let qfcvt = __library.get(b"qfcvt\0").map(|sym| *sym);
        let qgcvt = __library.get(b"qgcvt\0").map(|sym| *sym);
        let ecvt_r = __library.get(b"ecvt_r\0").map(|sym| *sym);
        let fcvt_r = __library.get(b"fcvt_r\0").map(|sym| *sym);
        let qecvt_r = __library.get(b"qecvt_r\0").map(|sym| *sym);
        let qfcvt_r = __library.get(b"qfcvt_r\0").map(|sym| *sym);
        let mblen = __library.get(b"mblen\0").map(|sym| *sym);
        let mbtowc = __library.get(b"mbtowc\0").map(|sym| *sym);
        let wctomb = __library.get(b"wctomb\0").map(|sym| *sym);
        let mbstowcs = __library.get(b"mbstowcs\0").map(|sym| *sym);
        let wcstombs = __library.get(b"wcstombs\0").map(|sym| *sym);
        let rpmatch = __library.get(b"rpmatch\0").map(|sym| *sym);
        let getsubopt = __library.get(b"getsubopt\0").map(|sym| *sym);
        let getloadavg = __library.get(b"getloadavg\0").map(|sym| *sym);
        let memcpy = __library.get(b"memcpy\0").map(|sym| *sym);
        let memmove = __library.get(b"memmove\0").map(|sym| *sym);
        let memccpy = __library.get(b"memccpy\0").map(|sym| *sym);
        let memset = __library.get(b"memset\0").map(|sym| *sym);
        let memcmp = __library.get(b"memcmp\0").map(|sym| *sym);
        let __memcmpeq = __library.get(b"__memcmpeq\0").map(|sym| *sym);
        let memchr = __library.get(b"memchr\0").map(|sym| *sym);
        let strcpy = __library.get(b"strcpy\0").map(|sym| *sym);
        let strncpy = __library.get(b"strncpy\0").map(|sym| *sym);
        let strcat = __library.get(b"strcat\0").map(|sym| *sym);
        let strncat = __library.get(b"strncat\0").map(|sym| *sym);
        let strcmp = __library.get(b"strcmp\0").map(|sym| *sym);
        let strncmp = __library.get(b"strncmp\0").map(|sym| *sym);
        let strcoll = __library.get(b"strcoll\0").map(|sym| *sym);
        let strxfrm = __library.get(b"strxfrm\0").map(|sym| *sym);
        let strcoll_l = __library.get(b"strcoll_l\0").map(|sym| *sym);
        let strxfrm_l = __library.get(b"strxfrm_l\0").map(|sym| *sym);
        let strdup = __library.get(b"strdup\0").map(|sym| *sym);
        let strndup = __library.get(b"strndup\0").map(|sym| *sym);
        let strchr = __library.get(b"strchr\0").map(|sym| *sym);
        let strrchr = __library.get(b"strrchr\0").map(|sym| *sym);
        let strcspn = __library.get(b"strcspn\0").map(|sym| *sym);
        let strspn = __library.get(b"strspn\0").map(|sym| *sym);
        let strpbrk = __library.get(b"strpbrk\0").map(|sym| *sym);
        let strstr = __library.get(b"strstr\0").map(|sym| *sym);
        let strtok = __library.get(b"strtok\0").map(|sym| *sym);
        let __strtok_r = __library.get(b"__strtok_r\0").map(|sym| *sym);
        let strtok_r = __library.get(b"strtok_r\0").map(|sym| *sym);
        let strlen = __library.get(b"strlen\0").map(|sym| *sym);
        let strnlen = __library.get(b"strnlen\0").map(|sym| *sym);
        let strerror = __library.get(b"strerror\0").map(|sym| *sym);
        let strerror_r = __library.get(b"strerror_r\0").map(|sym| *sym);
        let strerror_l = __library.get(b"strerror_l\0").map(|sym| *sym);
        let bcmp = __library.get(b"bcmp\0").map(|sym| *sym);
        let bcopy = __library.get(b"bcopy\0").map(|sym| *sym);
        let bzero = __library.get(b"bzero\0").map(|sym| *sym);
        let index = __library.get(b"index\0").map(|sym| *sym);
        let rindex = __library.get(b"rindex\0").map(|sym| *sym);
        let ffs = __library.get(b"ffs\0").map(|sym| *sym);
        let ffsl = __library.get(b"ffsl\0").map(|sym| *sym);
        let ffsll = __library.get(b"ffsll\0").map(|sym| *sym);
        let strcasecmp = __library.get(b"strcasecmp\0").map(|sym| *sym);
        let strncasecmp = __library.get(b"strncasecmp\0").map(|sym| *sym);
        let strcasecmp_l = __library.get(b"strcasecmp_l\0").map(|sym| *sym);
        let strncasecmp_l = __library.get(b"strncasecmp_l\0").map(|sym| *sym);
        let explicit_bzero = __library.get(b"explicit_bzero\0").map(|sym| *sym);
        let strsep = __library.get(b"strsep\0").map(|sym| *sym);
        let strsignal = __library.get(b"strsignal\0").map(|sym| *sym);
        let __stpcpy = __library.get(b"__stpcpy\0").map(|sym| *sym);
        let stpcpy = __library.get(b"stpcpy\0").map(|sym| *sym);
        let __stpncpy = __library.get(b"__stpncpy\0").map(|sym| *sym);
        let stpncpy = __library.get(b"stpncpy\0").map(|sym| *sym);
        let clock = __library.get(b"clock\0").map(|sym| *sym);
        let time = __library.get(b"time\0").map(|sym| *sym);
        let difftime = __library.get(b"difftime\0").map(|sym| *sym);
        let mktime = __library.get(b"mktime\0").map(|sym| *sym);
        let strftime = __library.get(b"strftime\0").map(|sym| *sym);
        let strftime_l = __library.get(b"strftime_l\0").map(|sym| *sym);
        let gmtime = __library.get(b"gmtime\0").map(|sym| *sym);
        let localtime = __library.get(b"localtime\0").map(|sym| *sym);
        let gmtime_r = __library.get(b"gmtime_r\0").map(|sym| *sym);
        let localtime_r = __library.get(b"localtime_r\0").map(|sym| *sym);
        let asctime = __library.get(b"asctime\0").map(|sym| *sym);
        let ctime = __library.get(b"ctime\0").map(|sym| *sym);
        let asctime_r = __library.get(b"asctime_r\0").map(|sym| *sym);
        let ctime_r = __library.get(b"ctime_r\0").map(|sym| *sym);
        let tzset = __library.get(b"tzset\0").map(|sym| *sym);
        let timegm = __library.get(b"timegm\0").map(|sym| *sym);
        let timelocal = __library.get(b"timelocal\0").map(|sym| *sym);
        let dysize = __library.get(b"dysize\0").map(|sym| *sym);
        let nanosleep = __library.get(b"nanosleep\0").map(|sym| *sym);
        let clock_getres = __library.get(b"clock_getres\0").map(|sym| *sym);
        let clock_gettime = __library.get(b"clock_gettime\0").map(|sym| *sym);
        let clock_settime = __library.get(b"clock_settime\0").map(|sym| *sym);
        let clock_nanosleep = __library.get(b"clock_nanosleep\0").map(|sym| *sym);
        let clock_getcpuclockid = __library.get(b"clock_getcpuclockid\0").map(|sym| *sym);
        let timer_create = __library.get(b"timer_create\0").map(|sym| *sym);
        let timer_delete = __library.get(b"timer_delete\0").map(|sym| *sym);
        let timer_settime = __library.get(b"timer_settime\0").map(|sym| *sym);
        let timer_gettime = __library.get(b"timer_gettime\0").map(|sym| *sym);
        let timer_getoverrun = __library.get(b"timer_getoverrun\0").map(|sym| *sym);
        let timespec_get = __library.get(b"timespec_get\0").map(|sym| *sym);
        let access = __library.get(b"access\0").map(|sym| *sym);
        let faccessat = __library.get(b"faccessat\0").map(|sym| *sym);
        let lseek = __library.get(b"lseek\0").map(|sym| *sym);
        let close = __library.get(b"close\0").map(|sym| *sym);
        let closefrom = __library.get(b"closefrom\0").map(|sym| *sym);
        let read = __library.get(b"read\0").map(|sym| *sym);
        let write = __library.get(b"write\0").map(|sym| *sym);
        let pread = __library.get(b"pread\0").map(|sym| *sym);
        let pwrite = __library.get(b"pwrite\0").map(|sym| *sym);
        let pipe = __library.get(b"pipe\0").map(|sym| *sym);
        let alarm = __library.get(b"alarm\0").map(|sym| *sym);
        let sleep = __library.get(b"sleep\0").map(|sym| *sym);
        let ualarm = __library.get(b"ualarm\0").map(|sym| *sym);
        let usleep = __library.get(b"usleep\0").map(|sym| *sym);
        let pause = __library.get(b"pause\0").map(|sym| *sym);
        let chown = __library.get(b"chown\0").map(|sym| *sym);
        let fchown = __library.get(b"fchown\0").map(|sym| *sym);
        let lchown = __library.get(b"lchown\0").map(|sym| *sym);
        let fchownat = __library.get(b"fchownat\0").map(|sym| *sym);
        let chdir = __library.get(b"chdir\0").map(|sym| *sym);
        let fchdir = __library.get(b"fchdir\0").map(|sym| *sym);
        let getcwd = __library.get(b"getcwd\0").map(|sym| *sym);
        let getwd = __library.get(b"getwd\0").map(|sym| *sym);
        let dup = __library.get(b"dup\0").map(|sym| *sym);
        let dup2 = __library.get(b"dup2\0").map(|sym| *sym);
        let execve = __library.get(b"execve\0").map(|sym| *sym);
        let fexecve = __library.get(b"fexecve\0").map(|sym| *sym);
        let execv = __library.get(b"execv\0").map(|sym| *sym);
        let execle = __library.get(b"execle\0").map(|sym| *sym);
        let execl = __library.get(b"execl\0").map(|sym| *sym);
        let execvp = __library.get(b"execvp\0").map(|sym| *sym);
        let execlp = __library.get(b"execlp\0").map(|sym| *sym);
        let nice = __library.get(b"nice\0").map(|sym| *sym);
        let _exit = __library.get(b"_exit\0").map(|sym| *sym);
        let pathconf = __library.get(b"pathconf\0").map(|sym| *sym);
        let fpathconf = __library.get(b"fpathconf\0").map(|sym| *sym);
        let sysconf = __library.get(b"sysconf\0").map(|sym| *sym);
        let confstr = __library.get(b"confstr\0").map(|sym| *sym);
        let getpid = __library.get(b"getpid\0").map(|sym| *sym);
        let getppid = __library.get(b"getppid\0").map(|sym| *sym);
        let getpgrp = __library.get(b"getpgrp\0").map(|sym| *sym);
        let __getpgid = __library.get(b"__getpgid\0").map(|sym| *sym);
        let getpgid = __library.get(b"getpgid\0").map(|sym| *sym);
        let setpgid = __library.get(b"setpgid\0").map(|sym| *sym);
        let setpgrp = __library.get(b"setpgrp\0").map(|sym| *sym);
        let setsid = __library.get(b"setsid\0").map(|sym| *sym);
        let getsid = __library.get(b"getsid\0").map(|sym| *sym);
        let getuid = __library.get(b"getuid\0").map(|sym| *sym);
        let geteuid = __library.get(b"geteuid\0").map(|sym| *sym);
        let getgid = __library.get(b"getgid\0").map(|sym| *sym);
        let getegid = __library.get(b"getegid\0").map(|sym| *sym);
        let getgroups = __library.get(b"getgroups\0").map(|sym| *sym);
        let setuid = __library.get(b"setuid\0").map(|sym| *sym);
        let setreuid = __library.get(b"setreuid\0").map(|sym| *sym);
        let seteuid = __library.get(b"seteuid\0").map(|sym| *sym);
        let setgid = __library.get(b"setgid\0").map(|sym| *sym);
        let setregid = __library.get(b"setregid\0").map(|sym| *sym);
        let setegid = __library.get(b"setegid\0").map(|sym| *sym);
        let fork = __library.get(b"fork\0").map(|sym| *sym);
        let vfork = __library.get(b"vfork\0").map(|sym| *sym);
        let ttyname = __library.get(b"ttyname\0").map(|sym| *sym);
        let ttyname_r = __library.get(b"ttyname_r\0").map(|sym| *sym);
        let isatty = __library.get(b"isatty\0").map(|sym| *sym);
        let ttyslot = __library.get(b"ttyslot\0").map(|sym| *sym);
        let link = __library.get(b"link\0").map(|sym| *sym);
        let linkat = __library.get(b"linkat\0").map(|sym| *sym);
        let symlink = __library.get(b"symlink\0").map(|sym| *sym);
        let readlink = __library.get(b"readlink\0").map(|sym| *sym);
        let symlinkat = __library.get(b"symlinkat\0").map(|sym| *sym);
        let readlinkat = __library.get(b"readlinkat\0").map(|sym| *sym);
        let unlink = __library.get(b"unlink\0").map(|sym| *sym);
        let unlinkat = __library.get(b"unlinkat\0").map(|sym| *sym);
        let rmdir = __library.get(b"rmdir\0").map(|sym| *sym);
        let tcgetpgrp = __library.get(b"tcgetpgrp\0").map(|sym| *sym);
        let tcsetpgrp = __library.get(b"tcsetpgrp\0").map(|sym| *sym);
        let getlogin = __library.get(b"getlogin\0").map(|sym| *sym);
        let getlogin_r = __library.get(b"getlogin_r\0").map(|sym| *sym);
        let setlogin = __library.get(b"setlogin\0").map(|sym| *sym);
        let getopt = __library.get(b"getopt\0").map(|sym| *sym);
        let gethostname = __library.get(b"gethostname\0").map(|sym| *sym);
        let sethostname = __library.get(b"sethostname\0").map(|sym| *sym);
        let sethostid = __library.get(b"sethostid\0").map(|sym| *sym);
        let getdomainname = __library.get(b"getdomainname\0").map(|sym| *sym);
        let setdomainname = __library.get(b"setdomainname\0").map(|sym| *sym);
        let vhangup = __library.get(b"vhangup\0").map(|sym| *sym);
        let revoke = __library.get(b"revoke\0").map(|sym| *sym);
        let profil = __library.get(b"profil\0").map(|sym| *sym);
        let acct = __library.get(b"acct\0").map(|sym| *sym);
        let getusershell = __library.get(b"getusershell\0").map(|sym| *sym);
        let endusershell = __library.get(b"endusershell\0").map(|sym| *sym);
        let setusershell = __library.get(b"setusershell\0").map(|sym| *sym);
        let daemon = __library.get(b"daemon\0").map(|sym| *sym);
        let chroot = __library.get(b"chroot\0").map(|sym| *sym);
        let getpass = __library.get(b"getpass\0").map(|sym| *sym);
        let fsync = __library.get(b"fsync\0").map(|sym| *sym);
        let gethostid = __library.get(b"gethostid\0").map(|sym| *sym);
        let sync = __library.get(b"sync\0").map(|sym| *sym);
        let getpagesize = __library.get(b"getpagesize\0").map(|sym| *sym);
        let getdtablesize = __library.get(b"getdtablesize\0").map(|sym| *sym);
        let truncate = __library.get(b"truncate\0").map(|sym| *sym);
        let ftruncate = __library.get(b"ftruncate\0").map(|sym| *sym);
        let brk = __library.get(b"brk\0").map(|sym| *sym);
        let sbrk = __library.get(b"sbrk\0").map(|sym| *sym);
        let syscall = __library.get(b"syscall\0").map(|sym| *sym);
        let fdatasync = __library.get(b"fdatasync\0").map(|sym| *sym);
        let crypt = __library.get(b"crypt\0").map(|sym| *sym);
        let getentropy = __library.get(b"getentropy\0").map(|sym| *sym);
        let gettimeofday = __library.get(b"gettimeofday\0").map(|sym| *sym);
        let settimeofday = __library.get(b"settimeofday\0").map(|sym| *sym);
        let adjtime = __library.get(b"adjtime\0").map(|sym| *sym);
        let getitimer = __library.get(b"getitimer\0").map(|sym| *sym);
        let setitimer = __library.get(b"setitimer\0").map(|sym| *sym);
        let utimes = __library.get(b"utimes\0").map(|sym| *sym);
        let lutimes = __library.get(b"lutimes\0").map(|sym| *sym);
        let futimes = __library.get(b"futimes\0").map(|sym| *sym);
        let TableInit = __library.get(b"TableInit\0").map(|sym| *sym);
        let TableDeinit = __library.get(b"TableDeinit\0").map(|sym| *sym);
        let TableLookup = __library.get(b"TableLookup\0").map(|sym| *sym);
        let TableInsert = __library.get(b"TableInsert\0").map(|sym| *sym);
        let TableRemove = __library.get(b"TableRemove\0").map(|sym| *sym);
        let TableClear = __library.get(b"TableClear\0").map(|sym| *sym);
        let TableEnumerate = __library.get(b"TableEnumerate\0").map(|sym| *sym);
        let TableSize = __library.get(b"TableSize\0").map(|sym| *sym);
        let TableIteratorStart = __library.get(b"TableIteratorStart\0").map(|sym| *sym);
        let TableIteratorNext = __library.get(b"TableIteratorNext\0").map(|sym| *sym);
        let TableIteratorGetKey = __library.get(b"TableIteratorGetKey\0").map(|sym| *sym);
        let TableIteratorGetValue = __library.get(b"TableIteratorGetValue\0").map(|sym| *sym);
        let TableIteratorLookup = __library.get(b"TableIteratorLookup\0").map(|sym| *sym);
        let HashTableInit = __library.get(b"HashTableInit\0").map(|sym| *sym);
        let HashTableInitCustom = __library.get(b"HashTableInitCustom\0").map(|sym| *sym);
        let HashTableDeinit = __library.get(b"HashTableDeinit\0").map(|sym| *sym);
        let HashTableLookup = __library.get(b"HashTableLookup\0").map(|sym| *sym);
        let HashTableLookupBinary = __library.get(b"HashTableLookupBinary\0").map(|sym| *sym);
        let HashTableLookupCustom = __library.get(b"HashTableLookupCustom\0").map(|sym| *sym);
        let HashTableInsert = __library.get(b"HashTableInsert\0").map(|sym| *sym);
        let HashTableInsertBinary = __library.get(b"HashTableInsertBinary\0").map(|sym| *sym);
        let HashTableInsertCustom = __library.get(b"HashTableInsertCustom\0").map(|sym| *sym);
        let HashTableRemove = __library.get(b"HashTableRemove\0").map(|sym| *sym);
        let HashTableRemoveBinary = __library.get(b"HashTableRemoveBinary\0").map(|sym| *sym);
        let HashTableRemoveCustom = __library.get(b"HashTableRemoveCustom\0").map(|sym| *sym);
        let HashTableClear = __library.get(b"HashTableClear\0").map(|sym| *sym);
        let HashTableEnumerate = __library.get(b"HashTableEnumerate\0").map(|sym| *sym);
        let HashTableEnumerateBinary = __library.get(b"HashTableEnumerateBinary\0").map(|sym| *sym);
        let HashTableEnumerateCustom = __library.get(b"HashTableEnumerateCustom\0").map(|sym| *sym);
        let HashTableSearch = __library.get(b"HashTableSearch\0").map(|sym| *sym);
        let HashTableSearchPointer = __library.get(b"HashTableSearchPointer\0").map(|sym| *sym);
        let HashTableSearchData = __library.get(b"HashTableSearchData\0").map(|sym| *sym);
        let HashTableSearchString = __library.get(b"HashTableSearchString\0").map(|sym| *sym);
        let HashTableSize = __library.get(b"HashTableSize\0").map(|sym| *sym);
        let HashTableIteratorStart = __library.get(b"HashTableIteratorStart\0").map(|sym| *sym);
        let HashTableIteratorNext = __library.get(b"HashTableIteratorNext\0").map(|sym| *sym);
        let HashTableIteratorGetKey = __library.get(b"HashTableIteratorGetKey\0").map(|sym| *sym);
        let HashTableIteratorGetBinaryKey = __library
            .get(b"HashTableIteratorGetBinaryKey\0")
            .map(|sym| *sym);
        let HashTableIteratorGetBinaryKeyLen = __library
            .get(b"HashTableIteratorGetBinaryKeyLen\0")
            .map(|sym| *sym);
        let HashTableIteratorGetCustomKey = __library
            .get(b"HashTableIteratorGetCustomKey\0")
            .map(|sym| *sym);
        let HashTableIteratorGetValue = __library
            .get(b"HashTableIteratorGetValue\0")
            .map(|sym| *sym);
        let HashTableIteratorLookup = __library.get(b"HashTableIteratorLookup\0").map(|sym| *sym);
        let HashTableIteratorLookupBinary = __library
            .get(b"HashTableIteratorLookupBinary\0")
            .map(|sym| *sym);
        let HashTableIteratorLookupCustom = __library
            .get(b"HashTableIteratorLookupCustom\0")
            .map(|sym| *sym);
        let ConfigurationInit = __library.get(b"ConfigurationInit\0").map(|sym| *sym);
        let ConfigurationDeinit = __library.get(b"ConfigurationDeinit\0").map(|sym| *sym);
        let ConfigurationSetValue = __library.get(b"ConfigurationSetValue\0").map(|sym| *sym);
        let ConfigurationSetIntValue = __library.get(b"ConfigurationSetIntValue\0").map(|sym| *sym);
        let ConfigurationSetUIntValue = __library
            .get(b"ConfigurationSetUIntValue\0")
            .map(|sym| *sym);
        let ConfigurationSetFloatValue = __library
            .get(b"ConfigurationSetFloatValue\0")
            .map(|sym| *sym);
        let ConfigurationHasSection = __library.get(b"ConfigurationHasSection\0").map(|sym| *sym);
        let ConfigurationDeleteSection = __library
            .get(b"ConfigurationDeleteSection\0")
            .map(|sym| *sym);
        let ConfigurationGetValue = __library.get(b"ConfigurationGetValue\0").map(|sym| *sym);
        let ConfigurationClearValue = __library.get(b"ConfigurationClearValue\0").map(|sym| *sym);
        let ConfigurationRead = __library.get(b"ConfigurationRead\0").map(|sym| *sym);
        let ConfigurationReadVFile = __library.get(b"ConfigurationReadVFile\0").map(|sym| *sym);
        let ConfigurationWrite = __library.get(b"ConfigurationWrite\0").map(|sym| *sym);
        let ConfigurationWriteSection = __library
            .get(b"ConfigurationWriteSection\0")
            .map(|sym| *sym);
        let ConfigurationWriteVFile = __library.get(b"ConfigurationWriteVFile\0").map(|sym| *sym);
        let ConfigurationEnumerateSections = __library
            .get(b"ConfigurationEnumerateSections\0")
            .map(|sym| *sym);
        let ConfigurationEnumerate = __library.get(b"ConfigurationEnumerate\0").map(|sym| *sym);
        let mCoreConfigInit = __library.get(b"mCoreConfigInit\0").map(|sym| *sym);
        let mCoreConfigDeinit = __library.get(b"mCoreConfigDeinit\0").map(|sym| *sym);
        let mCoreConfigLoad = __library.get(b"mCoreConfigLoad\0").map(|sym| *sym);
        let mCoreConfigSave = __library.get(b"mCoreConfigSave\0").map(|sym| *sym);
        let mCoreConfigLoadPath = __library.get(b"mCoreConfigLoadPath\0").map(|sym| *sym);
        let mCoreConfigSavePath = __library.get(b"mCoreConfigSavePath\0").map(|sym| *sym);
        let mCoreConfigLoadVFile = __library.get(b"mCoreConfigLoadVFile\0").map(|sym| *sym);
        let mCoreConfigSaveVFile = __library.get(b"mCoreConfigSaveVFile\0").map(|sym| *sym);
        let mCoreConfigMakePortable = __library.get(b"mCoreConfigMakePortable\0").map(|sym| *sym);
        let mCoreConfigDirectory = __library.get(b"mCoreConfigDirectory\0").map(|sym| *sym);
        let mCoreConfigPortableIniPath = __library
            .get(b"mCoreConfigPortableIniPath\0")
            .map(|sym| *sym);
        let mCoreConfigPortablePath = __library.get(b"mCoreConfigPortablePath\0").map(|sym| *sym);
        let mCoreConfigIsPortable = __library.get(b"mCoreConfigIsPortable\0").map(|sym| *sym);
        let mCoreConfigGetValue = __library.get(b"mCoreConfigGetValue\0").map(|sym| *sym);
        let mCoreConfigGetBoolValue = __library.get(b"mCoreConfigGetBoolValue\0").map(|sym| *sym);
        let mCoreConfigGetIntValue = __library.get(b"mCoreConfigGetIntValue\0").map(|sym| *sym);
        let mCoreConfigGetUIntValue = __library.get(b"mCoreConfigGetUIntValue\0").map(|sym| *sym);
        let mCoreConfigGetFloatValue = __library.get(b"mCoreConfigGetFloatValue\0").map(|sym| *sym);
        let mCoreConfigSetValue = __library.get(b"mCoreConfigSetValue\0").map(|sym| *sym);
        let mCoreConfigSetIntValue = __library.get(b"mCoreConfigSetIntValue\0").map(|sym| *sym);
        let mCoreConfigSetUIntValue = __library.get(b"mCoreConfigSetUIntValue\0").map(|sym| *sym);
        let mCoreConfigSetFloatValue = __library.get(b"mCoreConfigSetFloatValue\0").map(|sym| *sym);
        let mCoreConfigSetDefaultValue = __library
            .get(b"mCoreConfigSetDefaultValue\0")
            .map(|sym| *sym);
        let mCoreConfigSetDefaultIntValue = __library
            .get(b"mCoreConfigSetDefaultIntValue\0")
            .map(|sym| *sym);
        let mCoreConfigSetDefaultUIntValue = __library
            .get(b"mCoreConfigSetDefaultUIntValue\0")
            .map(|sym| *sym);
        let mCoreConfigSetDefaultFloatValue = __library
            .get(b"mCoreConfigSetDefaultFloatValue\0")
            .map(|sym| *sym);
        let mCoreConfigSetOverrideValue = __library
            .get(b"mCoreConfigSetOverrideValue\0")
            .map(|sym| *sym);
        let mCoreConfigSetOverrideIntValue = __library
            .get(b"mCoreConfigSetOverrideIntValue\0")
            .map(|sym| *sym);
        let mCoreConfigSetOverrideUIntValue = __library
            .get(b"mCoreConfigSetOverrideUIntValue\0")
            .map(|sym| *sym);
        let mCoreConfigSetOverrideFloatValue = __library
            .get(b"mCoreConfigSetOverrideFloatValue\0")
            .map(|sym| *sym);
        let mCoreConfigCopyValue = __library.get(b"mCoreConfigCopyValue\0").map(|sym| *sym);
        let mCoreConfigMap = __library.get(b"mCoreConfigMap\0").map(|sym| *sym);
        let mCoreConfigLoadDefaults = __library.get(b"mCoreConfigLoadDefaults\0").map(|sym| *sym);
        let mCoreConfigEnumerate = __library.get(b"mCoreConfigEnumerate\0").map(|sym| *sym);
        let mCoreConfigGetInput = __library.get(b"mCoreConfigGetInput\0").map(|sym| *sym);
        let mCoreConfigGetOverrides = __library.get(b"mCoreConfigGetOverrides\0").map(|sym| *sym);
        let mCoreConfigGetOverridesConst = __library
            .get(b"mCoreConfigGetOverridesConst\0")
            .map(|sym| *sym);
        let mCoreConfigFreeOpts = __library.get(b"mCoreConfigFreeOpts\0").map(|sym| *sym);
        let mDirectorySetInit = __library.get(b"mDirectorySetInit\0").map(|sym| *sym);
        let mDirectorySetDeinit = __library.get(b"mDirectorySetDeinit\0").map(|sym| *sym);
        let mDirectorySetAttachBase = __library.get(b"mDirectorySetAttachBase\0").map(|sym| *sym);
        let mDirectorySetDetachBase = __library.get(b"mDirectorySetDetachBase\0").map(|sym| *sym);
        let mDirectorySetOpenPath = __library.get(b"mDirectorySetOpenPath\0").map(|sym| *sym);
        let mDirectorySetOpenSuffix = __library.get(b"mDirectorySetOpenSuffix\0").map(|sym| *sym);
        let mDirectorySetMapOptions = __library.get(b"mDirectorySetMapOptions\0").map(|sym| *sym);
        let mInputMapInit = __library.get(b"mInputMapInit\0").map(|sym| *sym);
        let mInputMapDeinit = __library.get(b"mInputMapDeinit\0").map(|sym| *sym);
        let mInputMapKey = __library.get(b"mInputMapKey\0").map(|sym| *sym);
        let mInputMapKeyBits = __library.get(b"mInputMapKeyBits\0").map(|sym| *sym);
        let mInputBindKey = __library.get(b"mInputBindKey\0").map(|sym| *sym);
        let mInputQueryBinding = __library.get(b"mInputQueryBinding\0").map(|sym| *sym);
        let mInputUnbindKey = __library.get(b"mInputUnbindKey\0").map(|sym| *sym);
        let mInputUnbindAllKeys = __library.get(b"mInputUnbindAllKeys\0").map(|sym| *sym);
        let mInputMapAxis = __library.get(b"mInputMapAxis\0").map(|sym| *sym);
        let mInputClearAxis = __library.get(b"mInputClearAxis\0").map(|sym| *sym);
        let mInputBindAxis = __library.get(b"mInputBindAxis\0").map(|sym| *sym);
        let mInputUnbindAxis = __library.get(b"mInputUnbindAxis\0").map(|sym| *sym);
        let mInputUnbindAllAxes = __library.get(b"mInputUnbindAllAxes\0").map(|sym| *sym);
        let mInputQueryAxis = __library.get(b"mInputQueryAxis\0").map(|sym| *sym);
        let mInputEnumerateAxes = __library.get(b"mInputEnumerateAxes\0").map(|sym| *sym);
        let mInputMapHat = __library.get(b"mInputMapHat\0").map(|sym| *sym);
        let mInputBindHat = __library.get(b"mInputBindHat\0").map(|sym| *sym);
        let mInputQueryHat = __library.get(b"mInputQueryHat\0").map(|sym| *sym);
        let mInputUnbindHat = __library.get(b"mInputUnbindHat\0").map(|sym| *sym);
        let mInputUnbindAllHats = __library.get(b"mInputUnbindAllHats\0").map(|sym| *sym);
        let mInputEnumerateHats = __library.get(b"mInputEnumerateHats\0").map(|sym| *sym);
        let mInputMapLoad = __library.get(b"mInputMapLoad\0").map(|sym| *sym);
        let mInputMapSave = __library.get(b"mInputMapSave\0").map(|sym| *sym);
        let mInputProfileLoad = __library.get(b"mInputProfileLoad\0").map(|sym| *sym);
        let mInputProfileSave = __library.get(b"mInputProfileSave\0").map(|sym| *sym);
        let mInputGetPreferredDevice = __library.get(b"mInputGetPreferredDevice\0").map(|sym| *sym);
        let mInputSetPreferredDevice = __library.get(b"mInputSetPreferredDevice\0").map(|sym| *sym);
        let mInputGetCustomValue = __library.get(b"mInputGetCustomValue\0").map(|sym| *sym);
        let mInputSetCustomValue = __library.get(b"mInputSetCustomValue\0").map(|sym| *sym);
        let mImageCreate = __library.get(b"mImageCreate\0").map(|sym| *sym);
        let mImageCreateWithStride = __library.get(b"mImageCreateWithStride\0").map(|sym| *sym);
        let mImageCreateFromConstBuffer = __library
            .get(b"mImageCreateFromConstBuffer\0")
            .map(|sym| *sym);
        let mImageLoad = __library.get(b"mImageLoad\0").map(|sym| *sym);
        let mImageLoadVF = __library.get(b"mImageLoadVF\0").map(|sym| *sym);
        let mImageConvertToFormat = __library.get(b"mImageConvertToFormat\0").map(|sym| *sym);
        let mImageDestroy = __library.get(b"mImageDestroy\0").map(|sym| *sym);
        let mImageSave = __library.get(b"mImageSave\0").map(|sym| *sym);
        let mImageSaveVF = __library.get(b"mImageSaveVF\0").map(|sym| *sym);
        let mImageGetPixel = __library.get(b"mImageGetPixel\0").map(|sym| *sym);
        let mImageGetPixelRaw = __library.get(b"mImageGetPixelRaw\0").map(|sym| *sym);
        let mImageSetPixel = __library.get(b"mImageSetPixel\0").map(|sym| *sym);
        let mImageSetPixelRaw = __library.get(b"mImageSetPixelRaw\0").map(|sym| *sym);
        let mImageSetPaletteSize = __library.get(b"mImageSetPaletteSize\0").map(|sym| *sym);
        let mImageSetPaletteEntry = __library.get(b"mImageSetPaletteEntry\0").map(|sym| *sym);
        let mImageBlit = __library.get(b"mImageBlit\0").map(|sym| *sym);
        let mImageComposite = __library.get(b"mImageComposite\0").map(|sym| *sym);
        let mImageCompositeWithAlpha = __library.get(b"mImageCompositeWithAlpha\0").map(|sym| *sym);
        let mPainterInit = __library.get(b"mPainterInit\0").map(|sym| *sym);
        let mPainterDrawRectangle = __library.get(b"mPainterDrawRectangle\0").map(|sym| *sym);
        let mPainterDrawLine = __library.get(b"mPainterDrawLine\0").map(|sym| *sym);
        let mPainterDrawCircle = __library.get(b"mPainterDrawCircle\0").map(|sym| *sym);
        let mColorConvert = __library.get(b"mColorConvert\0").map(|sym| *sym);
        let mImageColorConvert = __library.get(b"mImageColorConvert\0").map(|sym| *sym);
        let IntListInit = __library.get(b"IntListInit\0").map(|sym| *sym);
        let IntListDeinit = __library.get(b"IntListDeinit\0").map(|sym| *sym);
        let IntListGetPointer = __library.get(b"IntListGetPointer\0").map(|sym| *sym);
        let IntListGetConstPointer = __library.get(b"IntListGetConstPointer\0").map(|sym| *sym);
        let IntListAppend = __library.get(b"IntListAppend\0").map(|sym| *sym);
        let IntListClear = __library.get(b"IntListClear\0").map(|sym| *sym);
        let IntListResize = __library.get(b"IntListResize\0").map(|sym| *sym);
        let IntListShift = __library.get(b"IntListShift\0").map(|sym| *sym);
        let IntListUnshift = __library.get(b"IntListUnshift\0").map(|sym| *sym);
        let IntListEnsureCapacity = __library.get(b"IntListEnsureCapacity\0").map(|sym| *sym);
        let IntListSize = __library.get(b"IntListSize\0").map(|sym| *sym);
        let IntListIndex = __library.get(b"IntListIndex\0").map(|sym| *sym);
        let IntListCopy = __library.get(b"IntListCopy\0").map(|sym| *sym);
        let SInt8ListInit = __library.get(b"SInt8ListInit\0").map(|sym| *sym);
        let SInt8ListDeinit = __library.get(b"SInt8ListDeinit\0").map(|sym| *sym);
        let SInt8ListGetPointer = __library.get(b"SInt8ListGetPointer\0").map(|sym| *sym);
        let SInt8ListGetConstPointer = __library.get(b"SInt8ListGetConstPointer\0").map(|sym| *sym);
        let SInt8ListAppend = __library.get(b"SInt8ListAppend\0").map(|sym| *sym);
        let SInt8ListClear = __library.get(b"SInt8ListClear\0").map(|sym| *sym);
        let SInt8ListResize = __library.get(b"SInt8ListResize\0").map(|sym| *sym);
        let SInt8ListShift = __library.get(b"SInt8ListShift\0").map(|sym| *sym);
        let SInt8ListUnshift = __library.get(b"SInt8ListUnshift\0").map(|sym| *sym);
        let SInt8ListEnsureCapacity = __library.get(b"SInt8ListEnsureCapacity\0").map(|sym| *sym);
        let SInt8ListSize = __library.get(b"SInt8ListSize\0").map(|sym| *sym);
        let SInt8ListIndex = __library.get(b"SInt8ListIndex\0").map(|sym| *sym);
        let SInt8ListCopy = __library.get(b"SInt8ListCopy\0").map(|sym| *sym);
        let SInt16ListInit = __library.get(b"SInt16ListInit\0").map(|sym| *sym);
        let SInt16ListDeinit = __library.get(b"SInt16ListDeinit\0").map(|sym| *sym);
        let SInt16ListGetPointer = __library.get(b"SInt16ListGetPointer\0").map(|sym| *sym);
        let SInt16ListGetConstPointer = __library
            .get(b"SInt16ListGetConstPointer\0")
            .map(|sym| *sym);
        let SInt16ListAppend = __library.get(b"SInt16ListAppend\0").map(|sym| *sym);
        let SInt16ListClear = __library.get(b"SInt16ListClear\0").map(|sym| *sym);
        let SInt16ListResize = __library.get(b"SInt16ListResize\0").map(|sym| *sym);
        let SInt16ListShift = __library.get(b"SInt16ListShift\0").map(|sym| *sym);
        let SInt16ListUnshift = __library.get(b"SInt16ListUnshift\0").map(|sym| *sym);
        let SInt16ListEnsureCapacity = __library.get(b"SInt16ListEnsureCapacity\0").map(|sym| *sym);
        let SInt16ListSize = __library.get(b"SInt16ListSize\0").map(|sym| *sym);
        let SInt16ListIndex = __library.get(b"SInt16ListIndex\0").map(|sym| *sym);
        let SInt16ListCopy = __library.get(b"SInt16ListCopy\0").map(|sym| *sym);
        let SInt32ListInit = __library.get(b"SInt32ListInit\0").map(|sym| *sym);
        let SInt32ListDeinit = __library.get(b"SInt32ListDeinit\0").map(|sym| *sym);
        let SInt32ListGetPointer = __library.get(b"SInt32ListGetPointer\0").map(|sym| *sym);
        let SInt32ListGetConstPointer = __library
            .get(b"SInt32ListGetConstPointer\0")
            .map(|sym| *sym);
        let SInt32ListAppend = __library.get(b"SInt32ListAppend\0").map(|sym| *sym);
        let SInt32ListClear = __library.get(b"SInt32ListClear\0").map(|sym| *sym);
        let SInt32ListResize = __library.get(b"SInt32ListResize\0").map(|sym| *sym);
        let SInt32ListShift = __library.get(b"SInt32ListShift\0").map(|sym| *sym);
        let SInt32ListUnshift = __library.get(b"SInt32ListUnshift\0").map(|sym| *sym);
        let SInt32ListEnsureCapacity = __library.get(b"SInt32ListEnsureCapacity\0").map(|sym| *sym);
        let SInt32ListSize = __library.get(b"SInt32ListSize\0").map(|sym| *sym);
        let SInt32ListIndex = __library.get(b"SInt32ListIndex\0").map(|sym| *sym);
        let SInt32ListCopy = __library.get(b"SInt32ListCopy\0").map(|sym| *sym);
        let SIntPtrListInit = __library.get(b"SIntPtrListInit\0").map(|sym| *sym);
        let SIntPtrListDeinit = __library.get(b"SIntPtrListDeinit\0").map(|sym| *sym);
        let SIntPtrListGetPointer = __library.get(b"SIntPtrListGetPointer\0").map(|sym| *sym);
        let SIntPtrListGetConstPointer = __library
            .get(b"SIntPtrListGetConstPointer\0")
            .map(|sym| *sym);
        let SIntPtrListAppend = __library.get(b"SIntPtrListAppend\0").map(|sym| *sym);
        let SIntPtrListClear = __library.get(b"SIntPtrListClear\0").map(|sym| *sym);
        let SIntPtrListResize = __library.get(b"SIntPtrListResize\0").map(|sym| *sym);
        let SIntPtrListShift = __library.get(b"SIntPtrListShift\0").map(|sym| *sym);
        let SIntPtrListUnshift = __library.get(b"SIntPtrListUnshift\0").map(|sym| *sym);
        let SIntPtrListEnsureCapacity = __library
            .get(b"SIntPtrListEnsureCapacity\0")
            .map(|sym| *sym);
        let SIntPtrListSize = __library.get(b"SIntPtrListSize\0").map(|sym| *sym);
        let SIntPtrListIndex = __library.get(b"SIntPtrListIndex\0").map(|sym| *sym);
        let SIntPtrListCopy = __library.get(b"SIntPtrListCopy\0").map(|sym| *sym);
        let UInt8ListInit = __library.get(b"UInt8ListInit\0").map(|sym| *sym);
        let UInt8ListDeinit = __library.get(b"UInt8ListDeinit\0").map(|sym| *sym);
        let UInt8ListGetPointer = __library.get(b"UInt8ListGetPointer\0").map(|sym| *sym);
        let UInt8ListGetConstPointer = __library.get(b"UInt8ListGetConstPointer\0").map(|sym| *sym);
        let UInt8ListAppend = __library.get(b"UInt8ListAppend\0").map(|sym| *sym);
        let UInt8ListClear = __library.get(b"UInt8ListClear\0").map(|sym| *sym);
        let UInt8ListResize = __library.get(b"UInt8ListResize\0").map(|sym| *sym);
        let UInt8ListShift = __library.get(b"UInt8ListShift\0").map(|sym| *sym);
        let UInt8ListUnshift = __library.get(b"UInt8ListUnshift\0").map(|sym| *sym);
        let UInt8ListEnsureCapacity = __library.get(b"UInt8ListEnsureCapacity\0").map(|sym| *sym);
        let UInt8ListSize = __library.get(b"UInt8ListSize\0").map(|sym| *sym);
        let UInt8ListIndex = __library.get(b"UInt8ListIndex\0").map(|sym| *sym);
        let UInt8ListCopy = __library.get(b"UInt8ListCopy\0").map(|sym| *sym);
        let UInt16ListInit = __library.get(b"UInt16ListInit\0").map(|sym| *sym);
        let UInt16ListDeinit = __library.get(b"UInt16ListDeinit\0").map(|sym| *sym);
        let UInt16ListGetPointer = __library.get(b"UInt16ListGetPointer\0").map(|sym| *sym);
        let UInt16ListGetConstPointer = __library
            .get(b"UInt16ListGetConstPointer\0")
            .map(|sym| *sym);
        let UInt16ListAppend = __library.get(b"UInt16ListAppend\0").map(|sym| *sym);
        let UInt16ListClear = __library.get(b"UInt16ListClear\0").map(|sym| *sym);
        let UInt16ListResize = __library.get(b"UInt16ListResize\0").map(|sym| *sym);
        let UInt16ListShift = __library.get(b"UInt16ListShift\0").map(|sym| *sym);
        let UInt16ListUnshift = __library.get(b"UInt16ListUnshift\0").map(|sym| *sym);
        let UInt16ListEnsureCapacity = __library.get(b"UInt16ListEnsureCapacity\0").map(|sym| *sym);
        let UInt16ListSize = __library.get(b"UInt16ListSize\0").map(|sym| *sym);
        let UInt16ListIndex = __library.get(b"UInt16ListIndex\0").map(|sym| *sym);
        let UInt16ListCopy = __library.get(b"UInt16ListCopy\0").map(|sym| *sym);
        let UInt32ListInit = __library.get(b"UInt32ListInit\0").map(|sym| *sym);
        let UInt32ListDeinit = __library.get(b"UInt32ListDeinit\0").map(|sym| *sym);
        let UInt32ListGetPointer = __library.get(b"UInt32ListGetPointer\0").map(|sym| *sym);
        let UInt32ListGetConstPointer = __library
            .get(b"UInt32ListGetConstPointer\0")
            .map(|sym| *sym);
        let UInt32ListAppend = __library.get(b"UInt32ListAppend\0").map(|sym| *sym);
        let UInt32ListClear = __library.get(b"UInt32ListClear\0").map(|sym| *sym);
        let UInt32ListResize = __library.get(b"UInt32ListResize\0").map(|sym| *sym);
        let UInt32ListShift = __library.get(b"UInt32ListShift\0").map(|sym| *sym);
        let UInt32ListUnshift = __library.get(b"UInt32ListUnshift\0").map(|sym| *sym);
        let UInt32ListEnsureCapacity = __library.get(b"UInt32ListEnsureCapacity\0").map(|sym| *sym);
        let UInt32ListSize = __library.get(b"UInt32ListSize\0").map(|sym| *sym);
        let UInt32ListIndex = __library.get(b"UInt32ListIndex\0").map(|sym| *sym);
        let UInt32ListCopy = __library.get(b"UInt32ListCopy\0").map(|sym| *sym);
        let UIntPtrListInit = __library.get(b"UIntPtrListInit\0").map(|sym| *sym);
        let UIntPtrListDeinit = __library.get(b"UIntPtrListDeinit\0").map(|sym| *sym);
        let UIntPtrListGetPointer = __library.get(b"UIntPtrListGetPointer\0").map(|sym| *sym);
        let UIntPtrListGetConstPointer = __library
            .get(b"UIntPtrListGetConstPointer\0")
            .map(|sym| *sym);
        let UIntPtrListAppend = __library.get(b"UIntPtrListAppend\0").map(|sym| *sym);
        let UIntPtrListClear = __library.get(b"UIntPtrListClear\0").map(|sym| *sym);
        let UIntPtrListResize = __library.get(b"UIntPtrListResize\0").map(|sym| *sym);
        let UIntPtrListShift = __library.get(b"UIntPtrListShift\0").map(|sym| *sym);
        let UIntPtrListUnshift = __library.get(b"UIntPtrListUnshift\0").map(|sym| *sym);
        let UIntPtrListEnsureCapacity = __library
            .get(b"UIntPtrListEnsureCapacity\0")
            .map(|sym| *sym);
        let UIntPtrListSize = __library.get(b"UIntPtrListSize\0").map(|sym| *sym);
        let UIntPtrListIndex = __library.get(b"UIntPtrListIndex\0").map(|sym| *sym);
        let UIntPtrListCopy = __library.get(b"UIntPtrListCopy\0").map(|sym| *sym);
        let StringListInit = __library.get(b"StringListInit\0").map(|sym| *sym);
        let StringListDeinit = __library.get(b"StringListDeinit\0").map(|sym| *sym);
        let StringListGetPointer = __library.get(b"StringListGetPointer\0").map(|sym| *sym);
        let StringListGetConstPointer = __library
            .get(b"StringListGetConstPointer\0")
            .map(|sym| *sym);
        let StringListAppend = __library.get(b"StringListAppend\0").map(|sym| *sym);
        let StringListClear = __library.get(b"StringListClear\0").map(|sym| *sym);
        let StringListResize = __library.get(b"StringListResize\0").map(|sym| *sym);
        let StringListShift = __library.get(b"StringListShift\0").map(|sym| *sym);
        let StringListUnshift = __library.get(b"StringListUnshift\0").map(|sym| *sym);
        let StringListEnsureCapacity = __library.get(b"StringListEnsureCapacity\0").map(|sym| *sym);
        let StringListSize = __library.get(b"StringListSize\0").map(|sym| *sym);
        let StringListIndex = __library.get(b"StringListIndex\0").map(|sym| *sym);
        let StringListCopy = __library.get(b"StringListCopy\0").map(|sym| *sym);
        let mCoreCallbacksListInit = __library.get(b"mCoreCallbacksListInit\0").map(|sym| *sym);
        let mCoreCallbacksListDeinit = __library.get(b"mCoreCallbacksListDeinit\0").map(|sym| *sym);
        let mCoreCallbacksListGetPointer = __library
            .get(b"mCoreCallbacksListGetPointer\0")
            .map(|sym| *sym);
        let mCoreCallbacksListGetConstPointer = __library
            .get(b"mCoreCallbacksListGetConstPointer\0")
            .map(|sym| *sym);
        let mCoreCallbacksListAppend = __library.get(b"mCoreCallbacksListAppend\0").map(|sym| *sym);
        let mCoreCallbacksListClear = __library.get(b"mCoreCallbacksListClear\0").map(|sym| *sym);
        let mCoreCallbacksListResize = __library.get(b"mCoreCallbacksListResize\0").map(|sym| *sym);
        let mCoreCallbacksListShift = __library.get(b"mCoreCallbacksListShift\0").map(|sym| *sym);
        let mCoreCallbacksListUnshift = __library
            .get(b"mCoreCallbacksListUnshift\0")
            .map(|sym| *sym);
        let mCoreCallbacksListEnsureCapacity = __library
            .get(b"mCoreCallbacksListEnsureCapacity\0")
            .map(|sym| *sym);
        let mCoreCallbacksListSize = __library.get(b"mCoreCallbacksListSize\0").map(|sym| *sym);
        let mCoreCallbacksListIndex = __library.get(b"mCoreCallbacksListIndex\0").map(|sym| *sym);
        let mCoreCallbacksListCopy = __library.get(b"mCoreCallbacksListCopy\0").map(|sym| *sym);
        let mRTCGenericSourceInit = __library.get(b"mRTCGenericSourceInit\0").map(|sym| *sym);
        let mCoreFind = __library.get(b"mCoreFind\0").map(|sym| *sym);
        let mCoreLoadFile = __library.get(b"mCoreLoadFile\0").map(|sym| *sym);
        let mCorePreloadVF = __library.get(b"mCorePreloadVF\0").map(|sym| *sym);
        let mCorePreloadFile = __library.get(b"mCorePreloadFile\0").map(|sym| *sym);
        let mCorePreloadVFCB = __library.get(b"mCorePreloadVFCB\0").map(|sym| *sym);
        let mCorePreloadFileCB = __library.get(b"mCorePreloadFileCB\0").map(|sym| *sym);
        let mCoreAutoloadSave = __library.get(b"mCoreAutoloadSave\0").map(|sym| *sym);
        let mCoreAutoloadPatch = __library.get(b"mCoreAutoloadPatch\0").map(|sym| *sym);
        let mCoreAutoloadCheats = __library.get(b"mCoreAutoloadCheats\0").map(|sym| *sym);
        let mCoreLoadSaveFile = __library.get(b"mCoreLoadSaveFile\0").map(|sym| *sym);
        let mCoreSaveState = __library.get(b"mCoreSaveState\0").map(|sym| *sym);
        let mCoreLoadState = __library.get(b"mCoreLoadState\0").map(|sym| *sym);
        let mCoreGetState = __library.get(b"mCoreGetState\0").map(|sym| *sym);
        let mCoreDeleteState = __library.get(b"mCoreDeleteState\0").map(|sym| *sym);
        let mCoreTakeScreenshot = __library.get(b"mCoreTakeScreenshot\0").map(|sym| *sym);
        let mCoreTakeScreenshotVF = __library.get(b"mCoreTakeScreenshotVF\0").map(|sym| *sym);
        let mCoreFindVF = __library.get(b"mCoreFindVF\0").map(|sym| *sym);
        let mCoreIsCompatible = __library.get(b"mCoreIsCompatible\0").map(|sym| *sym);
        let mCoreCreate = __library.get(b"mCoreCreate\0").map(|sym| *sym);
        let mCoreSaveStateNamed = __library.get(b"mCoreSaveStateNamed\0").map(|sym| *sym);
        let mCoreLoadStateNamed = __library.get(b"mCoreLoadStateNamed\0").map(|sym| *sym);
        let mCoreInitConfig = __library.get(b"mCoreInitConfig\0").map(|sym| *sym);
        let mCoreLoadConfig = __library.get(b"mCoreLoadConfig\0").map(|sym| *sym);
        let mCoreLoadForeignConfig = __library.get(b"mCoreLoadForeignConfig\0").map(|sym| *sym);
        let mCoreSetRTC = __library.get(b"mCoreSetRTC\0").map(|sym| *sym);
        let mCoreGetMemoryBlock = __library.get(b"mCoreGetMemoryBlock\0").map(|sym| *sym);
        let mCoreGetMemoryBlockMasked = __library
            .get(b"mCoreGetMemoryBlockMasked\0")
            .map(|sym| *sym);
        let mCoreGetMemoryBlockInfo = __library.get(b"mCoreGetMemoryBlockInfo\0").map(|sym| *sym);
        let mLogGetContext = __library.get(b"mLogGetContext\0").map(|sym| *sym);
        let mLogSetDefaultLogger = __library.get(b"mLogSetDefaultLogger\0").map(|sym| *sym);
        let mLogSetThreadLogger = __library.get(b"mLogSetThreadLogger\0").map(|sym| *sym);
        let mLogGetThreadLogger = __library.get(b"mLogGetThreadLogger\0").map(|sym| *sym);
        let mLogGenerateCategory = __library.get(b"mLogGenerateCategory\0").map(|sym| *sym);
        let mLogCategoryName = __library.get(b"mLogCategoryName\0").map(|sym| *sym);
        let mLogCategoryId = __library.get(b"mLogCategoryId\0").map(|sym| *sym);
        let mLogCategoryById = __library.get(b"mLogCategoryById\0").map(|sym| *sym);
        let mStandardLoggerInit = __library.get(b"mStandardLoggerInit\0").map(|sym| *sym);
        let mStandardLoggerDeinit = __library.get(b"mStandardLoggerDeinit\0").map(|sym| *sym);
        let mStandardLoggerConfig = __library.get(b"mStandardLoggerConfig\0").map(|sym| *sym);
        let mLogFilterInit = __library.get(b"mLogFilterInit\0").map(|sym| *sym);
        let mLogFilterDeinit = __library.get(b"mLogFilterDeinit\0").map(|sym| *sym);
        let mLogFilterLoad = __library.get(b"mLogFilterLoad\0").map(|sym| *sym);
        let mLogFilterSave = __library.get(b"mLogFilterSave\0").map(|sym| *sym);
        let mLogFilterSet = __library.get(b"mLogFilterSet\0").map(|sym| *sym);
        let mLogFilterReset = __library.get(b"mLogFilterReset\0").map(|sym| *sym);
        let mLogFilterTest = __library.get(b"mLogFilterTest\0").map(|sym| *sym);
        let mLogFilterLevels = __library.get(b"mLogFilterLevels\0").map(|sym| *sym);
        let mLog = __library.get(b"mLog\0").map(|sym| *sym);
        let mLogExplicit = __library.get(b"mLogExplicit\0").map(|sym| *sym);
        let mBreakpointListInit = __library.get(b"mBreakpointListInit\0").map(|sym| *sym);
        let mBreakpointListDeinit = __library.get(b"mBreakpointListDeinit\0").map(|sym| *sym);
        let mBreakpointListGetPointer = __library
            .get(b"mBreakpointListGetPointer\0")
            .map(|sym| *sym);
        let mBreakpointListGetConstPointer = __library
            .get(b"mBreakpointListGetConstPointer\0")
            .map(|sym| *sym);
        let mBreakpointListAppend = __library.get(b"mBreakpointListAppend\0").map(|sym| *sym);
        let mBreakpointListClear = __library.get(b"mBreakpointListClear\0").map(|sym| *sym);
        let mBreakpointListResize = __library.get(b"mBreakpointListResize\0").map(|sym| *sym);
        let mBreakpointListShift = __library.get(b"mBreakpointListShift\0").map(|sym| *sym);
        let mBreakpointListUnshift = __library.get(b"mBreakpointListUnshift\0").map(|sym| *sym);
        let mBreakpointListEnsureCapacity = __library
            .get(b"mBreakpointListEnsureCapacity\0")
            .map(|sym| *sym);
        let mBreakpointListSize = __library.get(b"mBreakpointListSize\0").map(|sym| *sym);
        let mBreakpointListIndex = __library.get(b"mBreakpointListIndex\0").map(|sym| *sym);
        let mBreakpointListCopy = __library.get(b"mBreakpointListCopy\0").map(|sym| *sym);
        let mWatchpointListInit = __library.get(b"mWatchpointListInit\0").map(|sym| *sym);
        let mWatchpointListDeinit = __library.get(b"mWatchpointListDeinit\0").map(|sym| *sym);
        let mWatchpointListGetPointer = __library
            .get(b"mWatchpointListGetPointer\0")
            .map(|sym| *sym);
        let mWatchpointListGetConstPointer = __library
            .get(b"mWatchpointListGetConstPointer\0")
            .map(|sym| *sym);
        let mWatchpointListAppend = __library.get(b"mWatchpointListAppend\0").map(|sym| *sym);
        let mWatchpointListClear = __library.get(b"mWatchpointListClear\0").map(|sym| *sym);
        let mWatchpointListResize = __library.get(b"mWatchpointListResize\0").map(|sym| *sym);
        let mWatchpointListShift = __library.get(b"mWatchpointListShift\0").map(|sym| *sym);
        let mWatchpointListUnshift = __library.get(b"mWatchpointListUnshift\0").map(|sym| *sym);
        let mWatchpointListEnsureCapacity = __library
            .get(b"mWatchpointListEnsureCapacity\0")
            .map(|sym| *sym);
        let mWatchpointListSize = __library.get(b"mWatchpointListSize\0").map(|sym| *sym);
        let mWatchpointListIndex = __library.get(b"mWatchpointListIndex\0").map(|sym| *sym);
        let mWatchpointListCopy = __library.get(b"mWatchpointListCopy\0").map(|sym| *sym);
        let mDebuggerModuleListInit = __library.get(b"mDebuggerModuleListInit\0").map(|sym| *sym);
        let mDebuggerModuleListDeinit = __library
            .get(b"mDebuggerModuleListDeinit\0")
            .map(|sym| *sym);
        let mDebuggerModuleListGetPointer = __library
            .get(b"mDebuggerModuleListGetPointer\0")
            .map(|sym| *sym);
        let mDebuggerModuleListGetConstPointer = __library
            .get(b"mDebuggerModuleListGetConstPointer\0")
            .map(|sym| *sym);
        let mDebuggerModuleListAppend = __library
            .get(b"mDebuggerModuleListAppend\0")
            .map(|sym| *sym);
        let mDebuggerModuleListClear = __library.get(b"mDebuggerModuleListClear\0").map(|sym| *sym);
        let mDebuggerModuleListResize = __library
            .get(b"mDebuggerModuleListResize\0")
            .map(|sym| *sym);
        let mDebuggerModuleListShift = __library.get(b"mDebuggerModuleListShift\0").map(|sym| *sym);
        let mDebuggerModuleListUnshift = __library
            .get(b"mDebuggerModuleListUnshift\0")
            .map(|sym| *sym);
        let mDebuggerModuleListEnsureCapacity = __library
            .get(b"mDebuggerModuleListEnsureCapacity\0")
            .map(|sym| *sym);
        let mDebuggerModuleListSize = __library.get(b"mDebuggerModuleListSize\0").map(|sym| *sym);
        let mDebuggerModuleListIndex = __library.get(b"mDebuggerModuleListIndex\0").map(|sym| *sym);
        let mDebuggerModuleListCopy = __library.get(b"mDebuggerModuleListCopy\0").map(|sym| *sym);
        let mStackFramesInit = __library.get(b"mStackFramesInit\0").map(|sym| *sym);
        let mStackFramesDeinit = __library.get(b"mStackFramesDeinit\0").map(|sym| *sym);
        let mStackFramesGetPointer = __library.get(b"mStackFramesGetPointer\0").map(|sym| *sym);
        let mStackFramesGetConstPointer = __library
            .get(b"mStackFramesGetConstPointer\0")
            .map(|sym| *sym);
        let mStackFramesAppend = __library.get(b"mStackFramesAppend\0").map(|sym| *sym);
        let mStackFramesClear = __library.get(b"mStackFramesClear\0").map(|sym| *sym);
        let mStackFramesResize = __library.get(b"mStackFramesResize\0").map(|sym| *sym);
        let mStackFramesShift = __library.get(b"mStackFramesShift\0").map(|sym| *sym);
        let mStackFramesUnshift = __library.get(b"mStackFramesUnshift\0").map(|sym| *sym);
        let mStackFramesEnsureCapacity = __library
            .get(b"mStackFramesEnsureCapacity\0")
            .map(|sym| *sym);
        let mStackFramesSize = __library.get(b"mStackFramesSize\0").map(|sym| *sym);
        let mStackFramesIndex = __library.get(b"mStackFramesIndex\0").map(|sym| *sym);
        let mStackFramesCopy = __library.get(b"mStackFramesCopy\0").map(|sym| *sym);
        let mDebuggerInit = __library.get(b"mDebuggerInit\0").map(|sym| *sym);
        let mDebuggerDeinit = __library.get(b"mDebuggerDeinit\0").map(|sym| *sym);
        let mDebuggerAttach = __library.get(b"mDebuggerAttach\0").map(|sym| *sym);
        let mDebuggerAttachModule = __library.get(b"mDebuggerAttachModule\0").map(|sym| *sym);
        let mDebuggerDetachModule = __library.get(b"mDebuggerDetachModule\0").map(|sym| *sym);
        let mDebuggerRunTimeout = __library.get(b"mDebuggerRunTimeout\0").map(|sym| *sym);
        let mDebuggerRun = __library.get(b"mDebuggerRun\0").map(|sym| *sym);
        let mDebuggerRunFrame = __library.get(b"mDebuggerRunFrame\0").map(|sym| *sym);
        let mDebuggerEnter = __library.get(b"mDebuggerEnter\0").map(|sym| *sym);
        let mDebuggerInterrupt = __library.get(b"mDebuggerInterrupt\0").map(|sym| *sym);
        let mDebuggerUpdatePaused = __library.get(b"mDebuggerUpdatePaused\0").map(|sym| *sym);
        let mDebuggerShutdown = __library.get(b"mDebuggerShutdown\0").map(|sym| *sym);
        let mDebuggerUpdate = __library.get(b"mDebuggerUpdate\0").map(|sym| *sym);
        let mDebuggerIsShutdown = __library.get(b"mDebuggerIsShutdown\0").map(|sym| *sym);
        let mDebuggerCreateModule = __library.get(b"mDebuggerCreateModule\0").map(|sym| *sym);
        let mDebuggerModuleSetNeedsCallback = __library
            .get(b"mDebuggerModuleSetNeedsCallback\0")
            .map(|sym| *sym);
        let mDebuggerLookupIdentifier = __library
            .get(b"mDebuggerLookupIdentifier\0")
            .map(|sym| *sym);
        let usage = __library.get(b"usage\0").map(|sym| *sym);
        let version = __library.get(b"version\0").map(|sym| *sym);
        let mArgumentsParse = __library.get(b"mArgumentsParse\0").map(|sym| *sym);
        let mArgumentsApply = __library.get(b"mArgumentsApply\0").map(|sym| *sym);
        let mArgumentsApplyDebugger = __library.get(b"mArgumentsApplyDebugger\0").map(|sym| *sym);
        let mArgumentsApplyFileLoads = __library.get(b"mArgumentsApplyFileLoads\0").map(|sym| *sym);
        let mArgumentsDeinit = __library.get(b"mArgumentsDeinit\0").map(|sym| *sym);
        let mSubParserGraphicsInit = __library.get(b"mSubParserGraphicsInit\0").map(|sym| *sym);
        let __cmsg_nxthdr = __library.get(b"__cmsg_nxthdr\0").map(|sym| *sym);
        let socket = __library.get(b"socket\0").map(|sym| *sym);
        let socketpair = __library.get(b"socketpair\0").map(|sym| *sym);
        let bind = __library.get(b"bind\0").map(|sym| *sym);
        let getsockname = __library.get(b"getsockname\0").map(|sym| *sym);
        let connect = __library.get(b"connect\0").map(|sym| *sym);
        let getpeername = __library.get(b"getpeername\0").map(|sym| *sym);
        let send = __library.get(b"send\0").map(|sym| *sym);
        let recv = __library.get(b"recv\0").map(|sym| *sym);
        let sendto = __library.get(b"sendto\0").map(|sym| *sym);
        let recvfrom = __library.get(b"recvfrom\0").map(|sym| *sym);
        let sendmsg = __library.get(b"sendmsg\0").map(|sym| *sym);
        let recvmsg = __library.get(b"recvmsg\0").map(|sym| *sym);
        let getsockopt = __library.get(b"getsockopt\0").map(|sym| *sym);
        let setsockopt = __library.get(b"setsockopt\0").map(|sym| *sym);
        let listen = __library.get(b"listen\0").map(|sym| *sym);
        let accept = __library.get(b"accept\0").map(|sym| *sym);
        let shutdown = __library.get(b"shutdown\0").map(|sym| *sym);
        let sockatmark = __library.get(b"sockatmark\0").map(|sym| *sym);
        let isfdtype = __library.get(b"isfdtype\0").map(|sym| *sym);
        let ntohl = __library.get(b"ntohl\0").map(|sym| *sym);
        let ntohs = __library.get(b"ntohs\0").map(|sym| *sym);
        let htonl = __library.get(b"htonl\0").map(|sym| *sym);
        let htons = __library.get(b"htons\0").map(|sym| *sym);
        let bindresvport = __library.get(b"bindresvport\0").map(|sym| *sym);
        let bindresvport6 = __library.get(b"bindresvport6\0").map(|sym| *sym);
        let inet_addr = __library.get(b"inet_addr\0").map(|sym| *sym);
        let inet_lnaof = __library.get(b"inet_lnaof\0").map(|sym| *sym);
        let inet_makeaddr = __library.get(b"inet_makeaddr\0").map(|sym| *sym);
        let inet_netof = __library.get(b"inet_netof\0").map(|sym| *sym);
        let inet_network = __library.get(b"inet_network\0").map(|sym| *sym);
        let inet_ntoa = __library.get(b"inet_ntoa\0").map(|sym| *sym);
        let inet_pton = __library.get(b"inet_pton\0").map(|sym| *sym);
        let inet_ntop = __library.get(b"inet_ntop\0").map(|sym| *sym);
        let inet_aton = __library.get(b"inet_aton\0").map(|sym| *sym);
        let inet_neta = __library.get(b"inet_neta\0").map(|sym| *sym);
        let inet_net_ntop = __library.get(b"inet_net_ntop\0").map(|sym| *sym);
        let inet_net_pton = __library.get(b"inet_net_pton\0").map(|sym| *sym);
        let inet_nsap_addr = __library.get(b"inet_nsap_addr\0").map(|sym| *sym);
        let inet_nsap_ntoa = __library.get(b"inet_nsap_ntoa\0").map(|sym| *sym);
        let setrpcent = __library.get(b"setrpcent\0").map(|sym| *sym);
        let endrpcent = __library.get(b"endrpcent\0").map(|sym| *sym);
        let getrpcbyname = __library.get(b"getrpcbyname\0").map(|sym| *sym);
        let getrpcbynumber = __library.get(b"getrpcbynumber\0").map(|sym| *sym);
        let getrpcent = __library.get(b"getrpcent\0").map(|sym| *sym);
        let getrpcbyname_r = __library.get(b"getrpcbyname_r\0").map(|sym| *sym);
        let getrpcbynumber_r = __library.get(b"getrpcbynumber_r\0").map(|sym| *sym);
        let getrpcent_r = __library.get(b"getrpcent_r\0").map(|sym| *sym);
        let __h_errno_location = __library.get(b"__h_errno_location\0").map(|sym| *sym);
        let herror = __library.get(b"herror\0").map(|sym| *sym);
        let hstrerror = __library.get(b"hstrerror\0").map(|sym| *sym);
        let sethostent = __library.get(b"sethostent\0").map(|sym| *sym);
        let endhostent = __library.get(b"endhostent\0").map(|sym| *sym);
        let gethostent = __library.get(b"gethostent\0").map(|sym| *sym);
        let gethostbyaddr = __library.get(b"gethostbyaddr\0").map(|sym| *sym);
        let gethostbyname = __library.get(b"gethostbyname\0").map(|sym| *sym);
        let gethostbyname2 = __library.get(b"gethostbyname2\0").map(|sym| *sym);
        let gethostent_r = __library.get(b"gethostent_r\0").map(|sym| *sym);
        let gethostbyaddr_r = __library.get(b"gethostbyaddr_r\0").map(|sym| *sym);
        let gethostbyname_r = __library.get(b"gethostbyname_r\0").map(|sym| *sym);
        let gethostbyname2_r = __library.get(b"gethostbyname2_r\0").map(|sym| *sym);
        let setnetent = __library.get(b"setnetent\0").map(|sym| *sym);
        let endnetent = __library.get(b"endnetent\0").map(|sym| *sym);
        let getnetent = __library.get(b"getnetent\0").map(|sym| *sym);
        let getnetbyaddr = __library.get(b"getnetbyaddr\0").map(|sym| *sym);
        let getnetbyname = __library.get(b"getnetbyname\0").map(|sym| *sym);
        let getnetent_r = __library.get(b"getnetent_r\0").map(|sym| *sym);
        let getnetbyaddr_r = __library.get(b"getnetbyaddr_r\0").map(|sym| *sym);
        let getnetbyname_r = __library.get(b"getnetbyname_r\0").map(|sym| *sym);
        let setservent = __library.get(b"setservent\0").map(|sym| *sym);
        let endservent = __library.get(b"endservent\0").map(|sym| *sym);
        let getservent = __library.get(b"getservent\0").map(|sym| *sym);
        let getservbyname = __library.get(b"getservbyname\0").map(|sym| *sym);
        let getservbyport = __library.get(b"getservbyport\0").map(|sym| *sym);
        let getservent_r = __library.get(b"getservent_r\0").map(|sym| *sym);
        let getservbyname_r = __library.get(b"getservbyname_r\0").map(|sym| *sym);
        let getservbyport_r = __library.get(b"getservbyport_r\0").map(|sym| *sym);
        let setprotoent = __library.get(b"setprotoent\0").map(|sym| *sym);
        let endprotoent = __library.get(b"endprotoent\0").map(|sym| *sym);
        let getprotoent = __library.get(b"getprotoent\0").map(|sym| *sym);
        let getprotobyname = __library.get(b"getprotobyname\0").map(|sym| *sym);
        let getprotobynumber = __library.get(b"getprotobynumber\0").map(|sym| *sym);
        let getprotoent_r = __library.get(b"getprotoent_r\0").map(|sym| *sym);
        let getprotobyname_r = __library.get(b"getprotobyname_r\0").map(|sym| *sym);
        let getprotobynumber_r = __library.get(b"getprotobynumber_r\0").map(|sym| *sym);
        let setnetgrent = __library.get(b"setnetgrent\0").map(|sym| *sym);
        let endnetgrent = __library.get(b"endnetgrent\0").map(|sym| *sym);
        let getnetgrent = __library.get(b"getnetgrent\0").map(|sym| *sym);
        let innetgr = __library.get(b"innetgr\0").map(|sym| *sym);
        let getnetgrent_r = __library.get(b"getnetgrent_r\0").map(|sym| *sym);
        let rcmd = __library.get(b"rcmd\0").map(|sym| *sym);
        let rcmd_af = __library.get(b"rcmd_af\0").map(|sym| *sym);
        let rexec = __library.get(b"rexec\0").map(|sym| *sym);
        let rexec_af = __library.get(b"rexec_af\0").map(|sym| *sym);
        let ruserok = __library.get(b"ruserok\0").map(|sym| *sym);
        let ruserok_af = __library.get(b"ruserok_af\0").map(|sym| *sym);
        let iruserok = __library.get(b"iruserok\0").map(|sym| *sym);
        let iruserok_af = __library.get(b"iruserok_af\0").map(|sym| *sym);
        let rresvport = __library.get(b"rresvport\0").map(|sym| *sym);
        let rresvport_af = __library.get(b"rresvport_af\0").map(|sym| *sym);
        let getaddrinfo = __library.get(b"getaddrinfo\0").map(|sym| *sym);
        let freeaddrinfo = __library.get(b"freeaddrinfo\0").map(|sym| *sym);
        let gai_strerror = __library.get(b"gai_strerror\0").map(|sym| *sym);
        let getnameinfo = __library.get(b"getnameinfo\0").map(|sym| *sym);
        let __errno_location = __library.get(b"__errno_location\0").map(|sym| *sym);
        let VFileOpen = __library.get(b"VFileOpen\0").map(|sym| *sym);
        let VFileOpenFD = __library.get(b"VFileOpenFD\0").map(|sym| *sym);
        let VFileFromFD = __library.get(b"VFileFromFD\0").map(|sym| *sym);
        let VFileFromMemory = __library.get(b"VFileFromMemory\0").map(|sym| *sym);
        let VFileFromConstMemory = __library.get(b"VFileFromConstMemory\0").map(|sym| *sym);
        let VFileMemChunk = __library.get(b"VFileMemChunk\0").map(|sym| *sym);
        let VFileFIFO = __library.get(b"VFileFIFO\0").map(|sym| *sym);
        let VDirOpen = __library.get(b"VDirOpen\0").map(|sym| *sym);
        let VDirOpenArchive = __library.get(b"VDirOpenArchive\0").map(|sym| *sym);
        let VDirCreate = __library.get(b"VDirCreate\0").map(|sym| *sym);
        let separatePath = __library.get(b"separatePath\0").map(|sym| *sym);
        let isAbsolute = __library.get(b"isAbsolute\0").map(|sym| *sym);
        let makeAbsolute = __library.get(b"makeAbsolute\0").map(|sym| *sym);
        let VDirFindFirst = __library.get(b"VDirFindFirst\0").map(|sym| *sym);
        let VDirFindNextAvailable = __library.get(b"VDirFindNextAvailable\0").map(|sym| *sym);
        let VFileReadline = __library.get(b"VFileReadline\0").map(|sym| *sym);
        let VFileWrite32LE = __library.get(b"VFileWrite32LE\0").map(|sym| *sym);
        let VFileWrite16LE = __library.get(b"VFileWrite16LE\0").map(|sym| *sym);
        let VFileRead32LE = __library.get(b"VFileRead32LE\0").map(|sym| *sym);
        let VFileRead16LE = __library.get(b"VFileRead16LE\0").map(|sym| *sym);
        Ok(mgba {
            __library,
            __assert_fail,
            __assert_perror_fail,
            __assert,
            __ctype_b_loc,
            __ctype_tolower_loc,
            __ctype_toupper_loc,
            isalnum,
            isalpha,
            iscntrl,
            isdigit,
            islower,
            isgraph,
            isprint,
            ispunct,
            isspace,
            isupper,
            isxdigit,
            tolower,
            toupper,
            isblank,
            isascii,
            toascii,
            _toupper,
            _tolower,
            isalnum_l,
            isalpha_l,
            iscntrl_l,
            isdigit_l,
            islower_l,
            isgraph_l,
            isprint_l,
            ispunct_l,
            isspace_l,
            isupper_l,
            isxdigit_l,
            isblank_l,
            __tolower_l,
            tolower_l,
            __toupper_l,
            toupper_l,
            fcntl,
            open,
            openat,
            creat,
            lockf,
            posix_fadvise,
            posix_fallocate,
            imaxabs,
            imaxdiv,
            strtoimax,
            strtoumax,
            wcstoimax,
            wcstoumax,
            __fpclassify,
            __signbit,
            __isinf,
            __finite,
            __isnan,
            __iseqsig,
            __issignaling,
            acos,
            __acos,
            asin,
            __asin,
            atan,
            __atan,
            atan2,
            __atan2,
            cos,
            __cos,
            sin,
            __sin,
            tan,
            __tan,
            cosh,
            __cosh,
            sinh,
            __sinh,
            tanh,
            __tanh,
            acosh,
            __acosh,
            asinh,
            __asinh,
            atanh,
            __atanh,
            exp,
            __exp,
            frexp,
            __frexp,
            ldexp,
            __ldexp,
            log,
            __log,
            log10,
            __log10,
            modf,
            __modf,
            expm1,
            __expm1,
            log1p,
            __log1p,
            logb,
            __logb,
            exp2,
            __exp2,
            log2,
            __log2,
            pow,
            __pow,
            sqrt,
            __sqrt,
            hypot,
            __hypot,
            cbrt,
            __cbrt,
            ceil,
            __ceil,
            fabs,
            __fabs,
            floor,
            __floor,
            fmod,
            __fmod,
            isinf,
            finite,
            drem,
            __drem,
            significand,
            __significand,
            copysign,
            __copysign,
            nan,
            __nan,
            isnan,
            j0,
            __j0,
            j1,
            __j1,
            jn,
            __jn,
            y0,
            __y0,
            y1,
            __y1,
            yn,
            __yn,
            erf,
            __erf,
            erfc,
            __erfc,
            lgamma,
            __lgamma,
            tgamma,
            __tgamma,
            gamma,
            __gamma,
            lgamma_r,
            __lgamma_r,
            rint,
            __rint,
            nextafter,
            __nextafter,
            nexttoward,
            __nexttoward,
            remainder,
            __remainder,
            scalbn,
            __scalbn,
            ilogb,
            __ilogb,
            scalbln,
            __scalbln,
            nearbyint,
            __nearbyint,
            round,
            __round,
            trunc,
            __trunc,
            remquo,
            __remquo,
            lrint,
            __lrint,
            llrint,
            __llrint,
            lround,
            __lround,
            llround,
            __llround,
            fdim,
            __fdim,
            fmax,
            __fmax,
            fmin,
            __fmin,
            fma,
            __fma,
            scalb,
            __scalb,
            __fpclassifyf,
            __signbitf,
            __isinff,
            __finitef,
            __isnanf,
            __iseqsigf,
            __issignalingf,
            acosf,
            __acosf,
            asinf,
            __asinf,
            atanf,
            __atanf,
            atan2f,
            __atan2f,
            cosf,
            __cosf,
            sinf,
            __sinf,
            tanf,
            __tanf,
            coshf,
            __coshf,
            sinhf,
            __sinhf,
            tanhf,
            __tanhf,
            acoshf,
            __acoshf,
            asinhf,
            __asinhf,
            atanhf,
            __atanhf,
            expf,
            __expf,
            frexpf,
            __frexpf,
            ldexpf,
            __ldexpf,
            logf,
            __logf,
            log10f,
            __log10f,
            modff,
            __modff,
            expm1f,
            __expm1f,
            log1pf,
            __log1pf,
            logbf,
            __logbf,
            exp2f,
            __exp2f,
            log2f,
            __log2f,
            powf,
            __powf,
            sqrtf,
            __sqrtf,
            hypotf,
            __hypotf,
            cbrtf,
            __cbrtf,
            ceilf,
            __ceilf,
            fabsf,
            __fabsf,
            floorf,
            __floorf,
            fmodf,
            __fmodf,
            isinff,
            finitef,
            dremf,
            __dremf,
            significandf,
            __significandf,
            copysignf,
            __copysignf,
            nanf,
            __nanf,
            isnanf,
            j0f,
            __j0f,
            j1f,
            __j1f,
            jnf,
            __jnf,
            y0f,
            __y0f,
            y1f,
            __y1f,
            ynf,
            __ynf,
            erff,
            __erff,
            erfcf,
            __erfcf,
            lgammaf,
            __lgammaf,
            tgammaf,
            __tgammaf,
            gammaf,
            __gammaf,
            lgammaf_r,
            __lgammaf_r,
            rintf,
            __rintf,
            nextafterf,
            __nextafterf,
            nexttowardf,
            __nexttowardf,
            remainderf,
            __remainderf,
            scalbnf,
            __scalbnf,
            ilogbf,
            __ilogbf,
            scalblnf,
            __scalblnf,
            nearbyintf,
            __nearbyintf,
            roundf,
            __roundf,
            truncf,
            __truncf,
            remquof,
            __remquof,
            lrintf,
            __lrintf,
            llrintf,
            __llrintf,
            lroundf,
            __lroundf,
            llroundf,
            __llroundf,
            fdimf,
            __fdimf,
            fmaxf,
            __fmaxf,
            fminf,
            __fminf,
            fmaf,
            __fmaf,
            scalbf,
            __scalbf,
            __fpclassifyl,
            __signbitl,
            __isinfl,
            __finitel,
            __isnanl,
            __iseqsigl,
            __issignalingl,
            acosl,
            __acosl,
            asinl,
            __asinl,
            atanl,
            __atanl,
            atan2l,
            __atan2l,
            cosl,
            __cosl,
            sinl,
            __sinl,
            tanl,
            __tanl,
            coshl,
            __coshl,
            sinhl,
            __sinhl,
            tanhl,
            __tanhl,
            acoshl,
            __acoshl,
            asinhl,
            __asinhl,
            atanhl,
            __atanhl,
            expl,
            __expl,
            frexpl,
            __frexpl,
            ldexpl,
            __ldexpl,
            logl,
            __logl,
            log10l,
            __log10l,
            modfl,
            __modfl,
            expm1l,
            __expm1l,
            log1pl,
            __log1pl,
            logbl,
            __logbl,
            exp2l,
            __exp2l,
            log2l,
            __log2l,
            powl,
            __powl,
            sqrtl,
            __sqrtl,
            hypotl,
            __hypotl,
            cbrtl,
            __cbrtl,
            ceill,
            __ceill,
            fabsl,
            __fabsl,
            floorl,
            __floorl,
            fmodl,
            __fmodl,
            isinfl,
            finitel,
            dreml,
            __dreml,
            significandl,
            __significandl,
            copysignl,
            __copysignl,
            nanl,
            __nanl,
            isnanl,
            j0l,
            __j0l,
            j1l,
            __j1l,
            jnl,
            __jnl,
            y0l,
            __y0l,
            y1l,
            __y1l,
            ynl,
            __ynl,
            erfl,
            __erfl,
            erfcl,
            __erfcl,
            lgammal,
            __lgammal,
            tgammal,
            __tgammal,
            gammal,
            __gammal,
            lgammal_r,
            __lgammal_r,
            rintl,
            __rintl,
            nextafterl,
            __nextafterl,
            nexttowardl,
            __nexttowardl,
            remainderl,
            __remainderl,
            scalbnl,
            __scalbnl,
            ilogbl,
            __ilogbl,
            scalblnl,
            __scalblnl,
            nearbyintl,
            __nearbyintl,
            roundl,
            __roundl,
            truncl,
            __truncl,
            remquol,
            __remquol,
            lrintl,
            __lrintl,
            llrintl,
            __llrintl,
            lroundl,
            __lroundl,
            llroundl,
            __llroundl,
            fdiml,
            __fdiml,
            fmaxl,
            __fmaxl,
            fminl,
            __fminl,
            fmal,
            __fmal,
            scalbl,
            __scalbl,
            remove,
            rename,
            renameat,
            fclose,
            tmpfile,
            tmpnam,
            tmpnam_r,
            tempnam,
            fflush,
            fflush_unlocked,
            fopen,
            freopen,
            fdopen,
            fmemopen,
            open_memstream,
            setbuf,
            setvbuf,
            setbuffer,
            setlinebuf,
            fprintf,
            printf,
            sprintf,
            vfprintf,
            vprintf,
            vsprintf,
            snprintf,
            vsnprintf,
            vdprintf,
            dprintf,
            fscanf,
            scanf,
            sscanf,
            fscanf1,
            scanf1,
            sscanf1,
            vfscanf,
            vscanf,
            vsscanf,
            vfscanf1,
            vscanf1,
            vsscanf1,
            fgetc,
            getc,
            getchar,
            getc_unlocked,
            getchar_unlocked,
            fgetc_unlocked,
            fputc,
            putc,
            putchar,
            fputc_unlocked,
            putc_unlocked,
            putchar_unlocked,
            getw,
            putw,
            fgets,
            __getdelim,
            getdelim,
            getline,
            fputs,
            puts,
            ungetc,
            fread,
            fwrite,
            fread_unlocked,
            fwrite_unlocked,
            fseek,
            ftell,
            rewind,
            fseeko,
            ftello,
            fgetpos,
            fsetpos,
            clearerr,
            feof,
            ferror,
            clearerr_unlocked,
            feof_unlocked,
            ferror_unlocked,
            perror,
            fileno,
            fileno_unlocked,
            pclose,
            popen,
            ctermid,
            flockfile,
            ftrylockfile,
            funlockfile,
            __uflow,
            __overflow,
            __ctype_get_mb_cur_max,
            atof,
            atoi,
            atol,
            atoll,
            strtod,
            strtof,
            strtold,
            strtol,
            strtoul,
            strtoq,
            strtouq,
            strtoll,
            strtoull,
            l64a,
            a64l,
            select,
            pselect,
            random,
            srandom,
            initstate,
            setstate,
            random_r,
            srandom_r,
            initstate_r,
            setstate_r,
            rand,
            srand,
            rand_r,
            drand48,
            erand48,
            lrand48,
            nrand48,
            mrand48,
            jrand48,
            srand48,
            seed48,
            lcong48,
            drand48_r,
            erand48_r,
            lrand48_r,
            nrand48_r,
            mrand48_r,
            jrand48_r,
            srand48_r,
            seed48_r,
            lcong48_r,
            malloc,
            calloc,
            realloc,
            free,
            reallocarray,
            alloca,
            valloc,
            posix_memalign,
            aligned_alloc,
            abort,
            atexit,
            at_quick_exit,
            on_exit,
            exit,
            quick_exit,
            _Exit,
            getenv,
            putenv,
            setenv,
            unsetenv,
            clearenv,
            mktemp,
            mkstemp,
            mkstemps,
            mkdtemp,
            system,
            realpath,
            bsearch,
            qsort,
            abs,
            labs,
            llabs,
            div,
            ldiv,
            lldiv,
            ecvt,
            fcvt,
            gcvt,
            qecvt,
            qfcvt,
            qgcvt,
            ecvt_r,
            fcvt_r,
            qecvt_r,
            qfcvt_r,
            mblen,
            mbtowc,
            wctomb,
            mbstowcs,
            wcstombs,
            rpmatch,
            getsubopt,
            getloadavg,
            memcpy,
            memmove,
            memccpy,
            memset,
            memcmp,
            __memcmpeq,
            memchr,
            strcpy,
            strncpy,
            strcat,
            strncat,
            strcmp,
            strncmp,
            strcoll,
            strxfrm,
            strcoll_l,
            strxfrm_l,
            strdup,
            strndup,
            strchr,
            strrchr,
            strcspn,
            strspn,
            strpbrk,
            strstr,
            strtok,
            __strtok_r,
            strtok_r,
            strlen,
            strnlen,
            strerror,
            strerror_r,
            strerror_l,
            bcmp,
            bcopy,
            bzero,
            index,
            rindex,
            ffs,
            ffsl,
            ffsll,
            strcasecmp,
            strncasecmp,
            strcasecmp_l,
            strncasecmp_l,
            explicit_bzero,
            strsep,
            strsignal,
            __stpcpy,
            stpcpy,
            __stpncpy,
            stpncpy,
            clock,
            time,
            difftime,
            mktime,
            strftime,
            strftime_l,
            gmtime,
            localtime,
            gmtime_r,
            localtime_r,
            asctime,
            ctime,
            asctime_r,
            ctime_r,
            tzset,
            timegm,
            timelocal,
            dysize,
            nanosleep,
            clock_getres,
            clock_gettime,
            clock_settime,
            clock_nanosleep,
            clock_getcpuclockid,
            timer_create,
            timer_delete,
            timer_settime,
            timer_gettime,
            timer_getoverrun,
            timespec_get,
            access,
            faccessat,
            lseek,
            close,
            closefrom,
            read,
            write,
            pread,
            pwrite,
            pipe,
            alarm,
            sleep,
            ualarm,
            usleep,
            pause,
            chown,
            fchown,
            lchown,
            fchownat,
            chdir,
            fchdir,
            getcwd,
            getwd,
            dup,
            dup2,
            execve,
            fexecve,
            execv,
            execle,
            execl,
            execvp,
            execlp,
            nice,
            _exit,
            pathconf,
            fpathconf,
            sysconf,
            confstr,
            getpid,
            getppid,
            getpgrp,
            __getpgid,
            getpgid,
            setpgid,
            setpgrp,
            setsid,
            getsid,
            getuid,
            geteuid,
            getgid,
            getegid,
            getgroups,
            setuid,
            setreuid,
            seteuid,
            setgid,
            setregid,
            setegid,
            fork,
            vfork,
            ttyname,
            ttyname_r,
            isatty,
            ttyslot,
            link,
            linkat,
            symlink,
            readlink,
            symlinkat,
            readlinkat,
            unlink,
            unlinkat,
            rmdir,
            tcgetpgrp,
            tcsetpgrp,
            getlogin,
            getlogin_r,
            setlogin,
            getopt,
            gethostname,
            sethostname,
            sethostid,
            getdomainname,
            setdomainname,
            vhangup,
            revoke,
            profil,
            acct,
            getusershell,
            endusershell,
            setusershell,
            daemon,
            chroot,
            getpass,
            fsync,
            gethostid,
            sync,
            getpagesize,
            getdtablesize,
            truncate,
            ftruncate,
            brk,
            sbrk,
            syscall,
            fdatasync,
            crypt,
            getentropy,
            gettimeofday,
            settimeofday,
            adjtime,
            getitimer,
            setitimer,
            utimes,
            lutimes,
            futimes,
            TableInit,
            TableDeinit,
            TableLookup,
            TableInsert,
            TableRemove,
            TableClear,
            TableEnumerate,
            TableSize,
            TableIteratorStart,
            TableIteratorNext,
            TableIteratorGetKey,
            TableIteratorGetValue,
            TableIteratorLookup,
            HashTableInit,
            HashTableInitCustom,
            HashTableDeinit,
            HashTableLookup,
            HashTableLookupBinary,
            HashTableLookupCustom,
            HashTableInsert,
            HashTableInsertBinary,
            HashTableInsertCustom,
            HashTableRemove,
            HashTableRemoveBinary,
            HashTableRemoveCustom,
            HashTableClear,
            HashTableEnumerate,
            HashTableEnumerateBinary,
            HashTableEnumerateCustom,
            HashTableSearch,
            HashTableSearchPointer,
            HashTableSearchData,
            HashTableSearchString,
            HashTableSize,
            HashTableIteratorStart,
            HashTableIteratorNext,
            HashTableIteratorGetKey,
            HashTableIteratorGetBinaryKey,
            HashTableIteratorGetBinaryKeyLen,
            HashTableIteratorGetCustomKey,
            HashTableIteratorGetValue,
            HashTableIteratorLookup,
            HashTableIteratorLookupBinary,
            HashTableIteratorLookupCustom,
            ConfigurationInit,
            ConfigurationDeinit,
            ConfigurationSetValue,
            ConfigurationSetIntValue,
            ConfigurationSetUIntValue,
            ConfigurationSetFloatValue,
            ConfigurationHasSection,
            ConfigurationDeleteSection,
            ConfigurationGetValue,
            ConfigurationClearValue,
            ConfigurationRead,
            ConfigurationReadVFile,
            ConfigurationWrite,
            ConfigurationWriteSection,
            ConfigurationWriteVFile,
            ConfigurationEnumerateSections,
            ConfigurationEnumerate,
            mCoreConfigInit,
            mCoreConfigDeinit,
            mCoreConfigLoad,
            mCoreConfigSave,
            mCoreConfigLoadPath,
            mCoreConfigSavePath,
            mCoreConfigLoadVFile,
            mCoreConfigSaveVFile,
            mCoreConfigMakePortable,
            mCoreConfigDirectory,
            mCoreConfigPortableIniPath,
            mCoreConfigPortablePath,
            mCoreConfigIsPortable,
            mCoreConfigGetValue,
            mCoreConfigGetBoolValue,
            mCoreConfigGetIntValue,
            mCoreConfigGetUIntValue,
            mCoreConfigGetFloatValue,
            mCoreConfigSetValue,
            mCoreConfigSetIntValue,
            mCoreConfigSetUIntValue,
            mCoreConfigSetFloatValue,
            mCoreConfigSetDefaultValue,
            mCoreConfigSetDefaultIntValue,
            mCoreConfigSetDefaultUIntValue,
            mCoreConfigSetDefaultFloatValue,
            mCoreConfigSetOverrideValue,
            mCoreConfigSetOverrideIntValue,
            mCoreConfigSetOverrideUIntValue,
            mCoreConfigSetOverrideFloatValue,
            mCoreConfigCopyValue,
            mCoreConfigMap,
            mCoreConfigLoadDefaults,
            mCoreConfigEnumerate,
            mCoreConfigGetInput,
            mCoreConfigGetOverrides,
            mCoreConfigGetOverridesConst,
            mCoreConfigFreeOpts,
            mDirectorySetInit,
            mDirectorySetDeinit,
            mDirectorySetAttachBase,
            mDirectorySetDetachBase,
            mDirectorySetOpenPath,
            mDirectorySetOpenSuffix,
            mDirectorySetMapOptions,
            mInputMapInit,
            mInputMapDeinit,
            mInputMapKey,
            mInputMapKeyBits,
            mInputBindKey,
            mInputQueryBinding,
            mInputUnbindKey,
            mInputUnbindAllKeys,
            mInputMapAxis,
            mInputClearAxis,
            mInputBindAxis,
            mInputUnbindAxis,
            mInputUnbindAllAxes,
            mInputQueryAxis,
            mInputEnumerateAxes,
            mInputMapHat,
            mInputBindHat,
            mInputQueryHat,
            mInputUnbindHat,
            mInputUnbindAllHats,
            mInputEnumerateHats,
            mInputMapLoad,
            mInputMapSave,
            mInputProfileLoad,
            mInputProfileSave,
            mInputGetPreferredDevice,
            mInputSetPreferredDevice,
            mInputGetCustomValue,
            mInputSetCustomValue,
            mImageCreate,
            mImageCreateWithStride,
            mImageCreateFromConstBuffer,
            mImageLoad,
            mImageLoadVF,
            mImageConvertToFormat,
            mImageDestroy,
            mImageSave,
            mImageSaveVF,
            mImageGetPixel,
            mImageGetPixelRaw,
            mImageSetPixel,
            mImageSetPixelRaw,
            mImageSetPaletteSize,
            mImageSetPaletteEntry,
            mImageBlit,
            mImageComposite,
            mImageCompositeWithAlpha,
            mPainterInit,
            mPainterDrawRectangle,
            mPainterDrawLine,
            mPainterDrawCircle,
            mColorConvert,
            mImageColorConvert,
            IntListInit,
            IntListDeinit,
            IntListGetPointer,
            IntListGetConstPointer,
            IntListAppend,
            IntListClear,
            IntListResize,
            IntListShift,
            IntListUnshift,
            IntListEnsureCapacity,
            IntListSize,
            IntListIndex,
            IntListCopy,
            SInt8ListInit,
            SInt8ListDeinit,
            SInt8ListGetPointer,
            SInt8ListGetConstPointer,
            SInt8ListAppend,
            SInt8ListClear,
            SInt8ListResize,
            SInt8ListShift,
            SInt8ListUnshift,
            SInt8ListEnsureCapacity,
            SInt8ListSize,
            SInt8ListIndex,
            SInt8ListCopy,
            SInt16ListInit,
            SInt16ListDeinit,
            SInt16ListGetPointer,
            SInt16ListGetConstPointer,
            SInt16ListAppend,
            SInt16ListClear,
            SInt16ListResize,
            SInt16ListShift,
            SInt16ListUnshift,
            SInt16ListEnsureCapacity,
            SInt16ListSize,
            SInt16ListIndex,
            SInt16ListCopy,
            SInt32ListInit,
            SInt32ListDeinit,
            SInt32ListGetPointer,
            SInt32ListGetConstPointer,
            SInt32ListAppend,
            SInt32ListClear,
            SInt32ListResize,
            SInt32ListShift,
            SInt32ListUnshift,
            SInt32ListEnsureCapacity,
            SInt32ListSize,
            SInt32ListIndex,
            SInt32ListCopy,
            SIntPtrListInit,
            SIntPtrListDeinit,
            SIntPtrListGetPointer,
            SIntPtrListGetConstPointer,
            SIntPtrListAppend,
            SIntPtrListClear,
            SIntPtrListResize,
            SIntPtrListShift,
            SIntPtrListUnshift,
            SIntPtrListEnsureCapacity,
            SIntPtrListSize,
            SIntPtrListIndex,
            SIntPtrListCopy,
            UInt8ListInit,
            UInt8ListDeinit,
            UInt8ListGetPointer,
            UInt8ListGetConstPointer,
            UInt8ListAppend,
            UInt8ListClear,
            UInt8ListResize,
            UInt8ListShift,
            UInt8ListUnshift,
            UInt8ListEnsureCapacity,
            UInt8ListSize,
            UInt8ListIndex,
            UInt8ListCopy,
            UInt16ListInit,
            UInt16ListDeinit,
            UInt16ListGetPointer,
            UInt16ListGetConstPointer,
            UInt16ListAppend,
            UInt16ListClear,
            UInt16ListResize,
            UInt16ListShift,
            UInt16ListUnshift,
            UInt16ListEnsureCapacity,
            UInt16ListSize,
            UInt16ListIndex,
            UInt16ListCopy,
            UInt32ListInit,
            UInt32ListDeinit,
            UInt32ListGetPointer,
            UInt32ListGetConstPointer,
            UInt32ListAppend,
            UInt32ListClear,
            UInt32ListResize,
            UInt32ListShift,
            UInt32ListUnshift,
            UInt32ListEnsureCapacity,
            UInt32ListSize,
            UInt32ListIndex,
            UInt32ListCopy,
            UIntPtrListInit,
            UIntPtrListDeinit,
            UIntPtrListGetPointer,
            UIntPtrListGetConstPointer,
            UIntPtrListAppend,
            UIntPtrListClear,
            UIntPtrListResize,
            UIntPtrListShift,
            UIntPtrListUnshift,
            UIntPtrListEnsureCapacity,
            UIntPtrListSize,
            UIntPtrListIndex,
            UIntPtrListCopy,
            StringListInit,
            StringListDeinit,
            StringListGetPointer,
            StringListGetConstPointer,
            StringListAppend,
            StringListClear,
            StringListResize,
            StringListShift,
            StringListUnshift,
            StringListEnsureCapacity,
            StringListSize,
            StringListIndex,
            StringListCopy,
            mCoreCallbacksListInit,
            mCoreCallbacksListDeinit,
            mCoreCallbacksListGetPointer,
            mCoreCallbacksListGetConstPointer,
            mCoreCallbacksListAppend,
            mCoreCallbacksListClear,
            mCoreCallbacksListResize,
            mCoreCallbacksListShift,
            mCoreCallbacksListUnshift,
            mCoreCallbacksListEnsureCapacity,
            mCoreCallbacksListSize,
            mCoreCallbacksListIndex,
            mCoreCallbacksListCopy,
            mRTCGenericSourceInit,
            mCoreFind,
            mCoreLoadFile,
            mCorePreloadVF,
            mCorePreloadFile,
            mCorePreloadVFCB,
            mCorePreloadFileCB,
            mCoreAutoloadSave,
            mCoreAutoloadPatch,
            mCoreAutoloadCheats,
            mCoreLoadSaveFile,
            mCoreSaveState,
            mCoreLoadState,
            mCoreGetState,
            mCoreDeleteState,
            mCoreTakeScreenshot,
            mCoreTakeScreenshotVF,
            mCoreFindVF,
            mCoreIsCompatible,
            mCoreCreate,
            mCoreSaveStateNamed,
            mCoreLoadStateNamed,
            mCoreInitConfig,
            mCoreLoadConfig,
            mCoreLoadForeignConfig,
            mCoreSetRTC,
            mCoreGetMemoryBlock,
            mCoreGetMemoryBlockMasked,
            mCoreGetMemoryBlockInfo,
            mLogGetContext,
            mLogSetDefaultLogger,
            mLogSetThreadLogger,
            mLogGetThreadLogger,
            mLogGenerateCategory,
            mLogCategoryName,
            mLogCategoryId,
            mLogCategoryById,
            mStandardLoggerInit,
            mStandardLoggerDeinit,
            mStandardLoggerConfig,
            mLogFilterInit,
            mLogFilterDeinit,
            mLogFilterLoad,
            mLogFilterSave,
            mLogFilterSet,
            mLogFilterReset,
            mLogFilterTest,
            mLogFilterLevels,
            mLog,
            mLogExplicit,
            mBreakpointListInit,
            mBreakpointListDeinit,
            mBreakpointListGetPointer,
            mBreakpointListGetConstPointer,
            mBreakpointListAppend,
            mBreakpointListClear,
            mBreakpointListResize,
            mBreakpointListShift,
            mBreakpointListUnshift,
            mBreakpointListEnsureCapacity,
            mBreakpointListSize,
            mBreakpointListIndex,
            mBreakpointListCopy,
            mWatchpointListInit,
            mWatchpointListDeinit,
            mWatchpointListGetPointer,
            mWatchpointListGetConstPointer,
            mWatchpointListAppend,
            mWatchpointListClear,
            mWatchpointListResize,
            mWatchpointListShift,
            mWatchpointListUnshift,
            mWatchpointListEnsureCapacity,
            mWatchpointListSize,
            mWatchpointListIndex,
            mWatchpointListCopy,
            mDebuggerModuleListInit,
            mDebuggerModuleListDeinit,
            mDebuggerModuleListGetPointer,
            mDebuggerModuleListGetConstPointer,
            mDebuggerModuleListAppend,
            mDebuggerModuleListClear,
            mDebuggerModuleListResize,
            mDebuggerModuleListShift,
            mDebuggerModuleListUnshift,
            mDebuggerModuleListEnsureCapacity,
            mDebuggerModuleListSize,
            mDebuggerModuleListIndex,
            mDebuggerModuleListCopy,
            mStackFramesInit,
            mStackFramesDeinit,
            mStackFramesGetPointer,
            mStackFramesGetConstPointer,
            mStackFramesAppend,
            mStackFramesClear,
            mStackFramesResize,
            mStackFramesShift,
            mStackFramesUnshift,
            mStackFramesEnsureCapacity,
            mStackFramesSize,
            mStackFramesIndex,
            mStackFramesCopy,
            mDebuggerInit,
            mDebuggerDeinit,
            mDebuggerAttach,
            mDebuggerAttachModule,
            mDebuggerDetachModule,
            mDebuggerRunTimeout,
            mDebuggerRun,
            mDebuggerRunFrame,
            mDebuggerEnter,
            mDebuggerInterrupt,
            mDebuggerUpdatePaused,
            mDebuggerShutdown,
            mDebuggerUpdate,
            mDebuggerIsShutdown,
            mDebuggerCreateModule,
            mDebuggerModuleSetNeedsCallback,
            mDebuggerLookupIdentifier,
            usage,
            version,
            mArgumentsParse,
            mArgumentsApply,
            mArgumentsApplyDebugger,
            mArgumentsApplyFileLoads,
            mArgumentsDeinit,
            mSubParserGraphicsInit,
            __cmsg_nxthdr,
            socket,
            socketpair,
            bind,
            getsockname,
            connect,
            getpeername,
            send,
            recv,
            sendto,
            recvfrom,
            sendmsg,
            recvmsg,
            getsockopt,
            setsockopt,
            listen,
            accept,
            shutdown,
            sockatmark,
            isfdtype,
            ntohl,
            ntohs,
            htonl,
            htons,
            bindresvport,
            bindresvport6,
            inet_addr,
            inet_lnaof,
            inet_makeaddr,
            inet_netof,
            inet_network,
            inet_ntoa,
            inet_pton,
            inet_ntop,
            inet_aton,
            inet_neta,
            inet_net_ntop,
            inet_net_pton,
            inet_nsap_addr,
            inet_nsap_ntoa,
            setrpcent,
            endrpcent,
            getrpcbyname,
            getrpcbynumber,
            getrpcent,
            getrpcbyname_r,
            getrpcbynumber_r,
            getrpcent_r,
            __h_errno_location,
            herror,
            hstrerror,
            sethostent,
            endhostent,
            gethostent,
            gethostbyaddr,
            gethostbyname,
            gethostbyname2,
            gethostent_r,
            gethostbyaddr_r,
            gethostbyname_r,
            gethostbyname2_r,
            setnetent,
            endnetent,
            getnetent,
            getnetbyaddr,
            getnetbyname,
            getnetent_r,
            getnetbyaddr_r,
            getnetbyname_r,
            setservent,
            endservent,
            getservent,
            getservbyname,
            getservbyport,
            getservent_r,
            getservbyname_r,
            getservbyport_r,
            setprotoent,
            endprotoent,
            getprotoent,
            getprotobyname,
            getprotobynumber,
            getprotoent_r,
            getprotobyname_r,
            getprotobynumber_r,
            setnetgrent,
            endnetgrent,
            getnetgrent,
            innetgr,
            getnetgrent_r,
            rcmd,
            rcmd_af,
            rexec,
            rexec_af,
            ruserok,
            ruserok_af,
            iruserok,
            iruserok_af,
            rresvport,
            rresvport_af,
            getaddrinfo,
            freeaddrinfo,
            gai_strerror,
            getnameinfo,
            __errno_location,
            VFileOpen,
            VFileOpenFD,
            VFileFromFD,
            VFileFromMemory,
            VFileFromConstMemory,
            VFileMemChunk,
            VFileFIFO,
            VDirOpen,
            VDirOpenArchive,
            VDirCreate,
            separatePath,
            isAbsolute,
            makeAbsolute,
            VDirFindFirst,
            VDirFindNextAvailable,
            VFileReadline,
            VFileWrite32LE,
            VFileWrite16LE,
            VFileRead32LE,
            VFileRead16LE,
        })
    }
    pub unsafe fn __assert_fail(
        &self,
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> ! {
        (self
            .__assert_fail
            .as_ref()
            .expect("Expected function, got error."))(
            __assertion, __file, __line, __function
        )
    }
    pub unsafe fn __assert_perror_fail(
        &self,
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> ! {
        (self
            .__assert_perror_fail
            .as_ref()
            .expect("Expected function, got error."))(__errnum, __file, __line, __function)
    }
    pub unsafe fn __assert(
        &self,
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    ) -> ! {
        (self
            .__assert
            .as_ref()
            .expect("Expected function, got error."))(__assertion, __file, __line)
    }
    pub unsafe fn __ctype_b_loc(&self) -> *mut *const ::std::os::raw::c_ushort {
        (self
            .__ctype_b_loc
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __ctype_tolower_loc(&self) -> *mut *const __int32_t {
        (self
            .__ctype_tolower_loc
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __ctype_toupper_loc(&self) -> *mut *const __int32_t {
        (self
            .__ctype_toupper_loc
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn isalnum(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isalnum
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isalpha(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isalpha
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn iscntrl(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .iscntrl
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isdigit(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isdigit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn islower(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .islower
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isgraph(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isgraph
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isprint(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isprint
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ispunct(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .ispunct
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isspace(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isspace
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isupper(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isupper
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isxdigit(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isxdigit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn tolower(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .tolower
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn toupper(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .toupper
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn isblank(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isblank
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isascii(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isascii
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn toascii(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .toascii
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn _toupper(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            ._toupper
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _tolower(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            ._tolower
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isalnum_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isalnum_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isalpha_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isalpha_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn iscntrl_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .iscntrl_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isdigit_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isdigit_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn islower_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .islower_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isgraph_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isgraph_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isprint_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isprint_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn ispunct_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .ispunct_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isspace_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isspace_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isupper_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isupper_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isxdigit_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isxdigit_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isblank_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isblank_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __tolower_l(
        &self,
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .__tolower_l
            .as_ref()
            .expect("Expected function, got error."))(__c, __l)
    }
    pub unsafe fn tolower_l(
        &self,
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .tolower_l
            .as_ref()
            .expect("Expected function, got error."))(__c, __l)
    }
    pub unsafe fn __toupper_l(
        &self,
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .__toupper_l
            .as_ref()
            .expect("Expected function, got error."))(__c, __l)
    }
    pub unsafe fn toupper_l(
        &self,
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .toupper_l
            .as_ref()
            .expect("Expected function, got error."))(__c, __l)
    }
    pub unsafe fn creat(
        &self,
        __file: *const ::std::os::raw::c_char,
        __mode: mode_t,
    ) -> ::std::os::raw::c_int {
        (self.creat.as_ref().expect("Expected function, got error."))(__file, __mode)
    }
    pub unsafe fn lockf(
        &self,
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: off_t,
    ) -> ::std::os::raw::c_int {
        (self.lockf.as_ref().expect("Expected function, got error."))(__fd, __cmd, __len)
    }
    pub unsafe fn posix_fadvise(
        &self,
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .posix_fadvise
            .as_ref()
            .expect("Expected function, got error."))(__fd, __offset, __len, __advise)
    }
    pub unsafe fn posix_fallocate(
        &self,
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int {
        (self
            .posix_fallocate
            .as_ref()
            .expect("Expected function, got error."))(__fd, __offset, __len)
    }
    pub unsafe fn imaxabs(&self, __n: intmax_t) -> intmax_t {
        (self
            .imaxabs
            .as_ref()
            .expect("Expected function, got error."))(__n)
    }
    pub unsafe fn imaxdiv(&self, __numer: intmax_t, __denom: intmax_t) -> imaxdiv_t {
        (self
            .imaxdiv
            .as_ref()
            .expect("Expected function, got error."))(__numer, __denom)
    }
    pub unsafe fn strtoimax(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t {
        (self
            .strtoimax
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoumax(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t {
        (self
            .strtoumax
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn wcstoimax(
        &self,
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t {
        (self
            .wcstoimax
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn wcstoumax(
        &self,
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t {
        (self
            .wcstoumax
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn __fpclassify(&self, __value: f64) -> ::std::os::raw::c_int {
        (self
            .__fpclassify
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __signbit(&self, __value: f64) -> ::std::os::raw::c_int {
        (self
            .__signbit
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __isinf(&self, __value: f64) -> ::std::os::raw::c_int {
        (self
            .__isinf
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __finite(&self, __value: f64) -> ::std::os::raw::c_int {
        (self
            .__finite
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __isnan(&self, __value: f64) -> ::std::os::raw::c_int {
        (self
            .__isnan
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __iseqsig(&self, __x: f64, __y: f64) -> ::std::os::raw::c_int {
        (self
            .__iseqsig
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __issignaling(&self, __value: f64) -> ::std::os::raw::c_int {
        (self
            .__issignaling
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn acos(&self, __x: f64) -> f64 {
        (self.acos.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __acos(&self, __x: f64) -> f64 {
        (self.__acos.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn asin(&self, __x: f64) -> f64 {
        (self.asin.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __asin(&self, __x: f64) -> f64 {
        (self.__asin.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atan(&self, __x: f64) -> f64 {
        (self.atan.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __atan(&self, __x: f64) -> f64 {
        (self.__atan.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atan2(&self, __y: f64, __x: f64) -> f64 {
        (self.atan2.as_ref().expect("Expected function, got error."))(__y, __x)
    }
    pub unsafe fn __atan2(&self, __y: f64, __x: f64) -> f64 {
        (self
            .__atan2
            .as_ref()
            .expect("Expected function, got error."))(__y, __x)
    }
    pub unsafe fn cos(&self, __x: f64) -> f64 {
        (self.cos.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cos(&self, __x: f64) -> f64 {
        (self.__cos.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn sin(&self, __x: f64) -> f64 {
        (self.sin.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sin(&self, __x: f64) -> f64 {
        (self.__sin.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn tan(&self, __x: f64) -> f64 {
        (self.tan.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __tan(&self, __x: f64) -> f64 {
        (self.__tan.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn cosh(&self, __x: f64) -> f64 {
        (self.cosh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cosh(&self, __x: f64) -> f64 {
        (self.__cosh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn sinh(&self, __x: f64) -> f64 {
        (self.sinh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sinh(&self, __x: f64) -> f64 {
        (self.__sinh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn tanh(&self, __x: f64) -> f64 {
        (self.tanh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __tanh(&self, __x: f64) -> f64 {
        (self.__tanh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn acosh(&self, __x: f64) -> f64 {
        (self.acosh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __acosh(&self, __x: f64) -> f64 {
        (self
            .__acosh
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn asinh(&self, __x: f64) -> f64 {
        (self.asinh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __asinh(&self, __x: f64) -> f64 {
        (self
            .__asinh
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atanh(&self, __x: f64) -> f64 {
        (self.atanh.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __atanh(&self, __x: f64) -> f64 {
        (self
            .__atanh
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn exp(&self, __x: f64) -> f64 {
        (self.exp.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __exp(&self, __x: f64) -> f64 {
        (self.__exp.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn frexp(&self, __x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64 {
        (self.frexp.as_ref().expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn __frexp(&self, __x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64 {
        (self
            .__frexp
            .as_ref()
            .expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn ldexp(&self, __x: f64, __exponent: ::std::os::raw::c_int) -> f64 {
        (self.ldexp.as_ref().expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn __ldexp(&self, __x: f64, __exponent: ::std::os::raw::c_int) -> f64 {
        (self
            .__ldexp
            .as_ref()
            .expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn log(&self, __x: f64) -> f64 {
        (self.log.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log(&self, __x: f64) -> f64 {
        (self.__log.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log10(&self, __x: f64) -> f64 {
        (self.log10.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log10(&self, __x: f64) -> f64 {
        (self
            .__log10
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn modf(&self, __x: f64, __iptr: *mut f64) -> f64 {
        (self.modf.as_ref().expect("Expected function, got error."))(__x, __iptr)
    }
    pub unsafe fn __modf(&self, __x: f64, __iptr: *mut f64) -> f64 {
        (self.__modf.as_ref().expect("Expected function, got error."))(__x, __iptr)
    }
    pub unsafe fn expm1(&self, __x: f64) -> f64 {
        (self.expm1.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __expm1(&self, __x: f64) -> f64 {
        (self
            .__expm1
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log1p(&self, __x: f64) -> f64 {
        (self.log1p.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log1p(&self, __x: f64) -> f64 {
        (self
            .__log1p
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn logb(&self, __x: f64) -> f64 {
        (self.logb.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __logb(&self, __x: f64) -> f64 {
        (self.__logb.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn exp2(&self, __x: f64) -> f64 {
        (self.exp2.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __exp2(&self, __x: f64) -> f64 {
        (self.__exp2.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log2(&self, __x: f64) -> f64 {
        (self.log2.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log2(&self, __x: f64) -> f64 {
        (self.__log2.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn pow(&self, __x: f64, __y: f64) -> f64 {
        (self.pow.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __pow(&self, __x: f64, __y: f64) -> f64 {
        (self.__pow.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn sqrt(&self, __x: f64) -> f64 {
        (self.sqrt.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sqrt(&self, __x: f64) -> f64 {
        (self.__sqrt.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn hypot(&self, __x: f64, __y: f64) -> f64 {
        (self.hypot.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __hypot(&self, __x: f64, __y: f64) -> f64 {
        (self
            .__hypot
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn cbrt(&self, __x: f64) -> f64 {
        (self.cbrt.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cbrt(&self, __x: f64) -> f64 {
        (self.__cbrt.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn ceil(&self, __x: f64) -> f64 {
        (self.ceil.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __ceil(&self, __x: f64) -> f64 {
        (self.__ceil.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fabs(&self, __x: f64) -> f64 {
        (self.fabs.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __fabs(&self, __x: f64) -> f64 {
        (self.__fabs.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn floor(&self, __x: f64) -> f64 {
        (self.floor.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __floor(&self, __x: f64) -> f64 {
        (self
            .__floor
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fmod(&self, __x: f64, __y: f64) -> f64 {
        (self.fmod.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmod(&self, __x: f64, __y: f64) -> f64 {
        (self.__fmod.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn isinf(&self, __value: f64) -> ::std::os::raw::c_int {
        (self.isinf.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn finite(&self, __value: f64) -> ::std::os::raw::c_int {
        (self.finite.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn drem(&self, __x: f64, __y: f64) -> f64 {
        (self.drem.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __drem(&self, __x: f64, __y: f64) -> f64 {
        (self.__drem.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn significand(&self, __x: f64) -> f64 {
        (self
            .significand
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __significand(&self, __x: f64) -> f64 {
        (self
            .__significand
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn copysign(&self, __x: f64, __y: f64) -> f64 {
        (self
            .copysign
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __copysign(&self, __x: f64, __y: f64) -> f64 {
        (self
            .__copysign
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn nan(&self, __tagb: *const ::std::os::raw::c_char) -> f64 {
        (self.nan.as_ref().expect("Expected function, got error."))(__tagb)
    }
    pub unsafe fn __nan(&self, __tagb: *const ::std::os::raw::c_char) -> f64 {
        (self.__nan.as_ref().expect("Expected function, got error."))(__tagb)
    }
    pub unsafe fn isnan(&self, __value: f64) -> ::std::os::raw::c_int {
        (self.isnan.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn j0(&self, arg1: f64) -> f64 {
        (self.j0.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __j0(&self, arg1: f64) -> f64 {
        (self.__j0.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn j1(&self, arg1: f64) -> f64 {
        (self.j1.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __j1(&self, arg1: f64) -> f64 {
        (self.__j1.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn jn(&self, arg1: ::std::os::raw::c_int, arg2: f64) -> f64 {
        (self.jn.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __jn(&self, arg1: ::std::os::raw::c_int, arg2: f64) -> f64 {
        (self.__jn.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn y0(&self, arg1: f64) -> f64 {
        (self.y0.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __y0(&self, arg1: f64) -> f64 {
        (self.__y0.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn y1(&self, arg1: f64) -> f64 {
        (self.y1.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __y1(&self, arg1: f64) -> f64 {
        (self.__y1.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn yn(&self, arg1: ::std::os::raw::c_int, arg2: f64) -> f64 {
        (self.yn.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __yn(&self, arg1: ::std::os::raw::c_int, arg2: f64) -> f64 {
        (self.__yn.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn erf(&self, arg1: f64) -> f64 {
        (self.erf.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __erf(&self, arg1: f64) -> f64 {
        (self.__erf.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn erfc(&self, arg1: f64) -> f64 {
        (self.erfc.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __erfc(&self, arg1: f64) -> f64 {
        (self.__erfc.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn lgamma(&self, arg1: f64) -> f64 {
        (self.lgamma.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __lgamma(&self, arg1: f64) -> f64 {
        (self
            .__lgamma
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn tgamma(&self, arg1: f64) -> f64 {
        (self.tgamma.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __tgamma(&self, arg1: f64) -> f64 {
        (self
            .__tgamma
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn gamma(&self, arg1: f64) -> f64 {
        (self.gamma.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __gamma(&self, arg1: f64) -> f64 {
        (self
            .__gamma
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn lgamma_r(&self, arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64 {
        (self
            .lgamma_r
            .as_ref()
            .expect("Expected function, got error."))(arg1, __signgamp)
    }
    pub unsafe fn __lgamma_r(&self, arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64 {
        (self
            .__lgamma_r
            .as_ref()
            .expect("Expected function, got error."))(arg1, __signgamp)
    }
    pub unsafe fn rint(&self, __x: f64) -> f64 {
        (self.rint.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __rint(&self, __x: f64) -> f64 {
        (self.__rint.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn nextafter(&self, __x: f64, __y: f64) -> f64 {
        (self
            .nextafter
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __nextafter(&self, __x: f64, __y: f64) -> f64 {
        (self
            .__nextafter
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn nexttoward(&self, __x: f64, __y: u128) -> f64 {
        (self
            .nexttoward
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __nexttoward(&self, __x: f64, __y: u128) -> f64 {
        (self
            .__nexttoward
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn remainder(&self, __x: f64, __y: f64) -> f64 {
        (self
            .remainder
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __remainder(&self, __x: f64, __y: f64) -> f64 {
        (self
            .__remainder
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn scalbn(&self, __x: f64, __n: ::std::os::raw::c_int) -> f64 {
        (self.scalbn.as_ref().expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalbn(&self, __x: f64, __n: ::std::os::raw::c_int) -> f64 {
        (self
            .__scalbn
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn ilogb(&self, __x: f64) -> ::std::os::raw::c_int {
        (self.ilogb.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __ilogb(&self, __x: f64) -> ::std::os::raw::c_int {
        (self
            .__ilogb
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn scalbln(&self, __x: f64, __n: ::std::os::raw::c_long) -> f64 {
        (self
            .scalbln
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalbln(&self, __x: f64, __n: ::std::os::raw::c_long) -> f64 {
        (self
            .__scalbln
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn nearbyint(&self, __x: f64) -> f64 {
        (self
            .nearbyint
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __nearbyint(&self, __x: f64) -> f64 {
        (self
            .__nearbyint
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn round(&self, __x: f64) -> f64 {
        (self.round.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __round(&self, __x: f64) -> f64 {
        (self
            .__round
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn trunc(&self, __x: f64) -> f64 {
        (self.trunc.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __trunc(&self, __x: f64) -> f64 {
        (self
            .__trunc
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn remquo(&self, __x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64 {
        (self.remquo.as_ref().expect("Expected function, got error."))(__x, __y, __quo)
    }
    pub unsafe fn __remquo(&self, __x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64 {
        (self
            .__remquo
            .as_ref()
            .expect("Expected function, got error."))(__x, __y, __quo)
    }
    pub unsafe fn lrint(&self, __x: f64) -> ::std::os::raw::c_long {
        (self.lrint.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __lrint(&self, __x: f64) -> ::std::os::raw::c_long {
        (self
            .__lrint
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llrint(&self, __x: f64) -> ::std::os::raw::c_longlong {
        (self.llrint.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __llrint(&self, __x: f64) -> ::std::os::raw::c_longlong {
        (self
            .__llrint
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn lround(&self, __x: f64) -> ::std::os::raw::c_long {
        (self.lround.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __lround(&self, __x: f64) -> ::std::os::raw::c_long {
        (self
            .__lround
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llround(&self, __x: f64) -> ::std::os::raw::c_longlong {
        (self
            .llround
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __llround(&self, __x: f64) -> ::std::os::raw::c_longlong {
        (self
            .__llround
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fdim(&self, __x: f64, __y: f64) -> f64 {
        (self.fdim.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fdim(&self, __x: f64, __y: f64) -> f64 {
        (self.__fdim.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fmax(&self, __x: f64, __y: f64) -> f64 {
        (self.fmax.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmax(&self, __x: f64, __y: f64) -> f64 {
        (self.__fmax.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fmin(&self, __x: f64, __y: f64) -> f64 {
        (self.fmin.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmin(&self, __x: f64, __y: f64) -> f64 {
        (self.__fmin.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fma(&self, __x: f64, __y: f64, __z: f64) -> f64 {
        (self.fma.as_ref().expect("Expected function, got error."))(__x, __y, __z)
    }
    pub unsafe fn __fma(&self, __x: f64, __y: f64, __z: f64) -> f64 {
        (self.__fma.as_ref().expect("Expected function, got error."))(__x, __y, __z)
    }
    pub unsafe fn scalb(&self, __x: f64, __n: f64) -> f64 {
        (self.scalb.as_ref().expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalb(&self, __x: f64, __n: f64) -> f64 {
        (self
            .__scalb
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __fpclassifyf(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .__fpclassifyf
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __signbitf(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .__signbitf
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __isinff(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .__isinff
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __finitef(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .__finitef
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __isnanf(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .__isnanf
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __iseqsigf(&self, __x: f32, __y: f32) -> ::std::os::raw::c_int {
        (self
            .__iseqsigf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __issignalingf(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .__issignalingf
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn acosf(&self, __x: f32) -> f32 {
        (self.acosf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __acosf(&self, __x: f32) -> f32 {
        (self
            .__acosf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn asinf(&self, __x: f32) -> f32 {
        (self.asinf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __asinf(&self, __x: f32) -> f32 {
        (self
            .__asinf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atanf(&self, __x: f32) -> f32 {
        (self.atanf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __atanf(&self, __x: f32) -> f32 {
        (self
            .__atanf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atan2f(&self, __y: f32, __x: f32) -> f32 {
        (self.atan2f.as_ref().expect("Expected function, got error."))(__y, __x)
    }
    pub unsafe fn __atan2f(&self, __y: f32, __x: f32) -> f32 {
        (self
            .__atan2f
            .as_ref()
            .expect("Expected function, got error."))(__y, __x)
    }
    pub unsafe fn cosf(&self, __x: f32) -> f32 {
        (self.cosf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cosf(&self, __x: f32) -> f32 {
        (self.__cosf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn sinf(&self, __x: f32) -> f32 {
        (self.sinf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sinf(&self, __x: f32) -> f32 {
        (self.__sinf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn tanf(&self, __x: f32) -> f32 {
        (self.tanf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __tanf(&self, __x: f32) -> f32 {
        (self.__tanf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn coshf(&self, __x: f32) -> f32 {
        (self.coshf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __coshf(&self, __x: f32) -> f32 {
        (self
            .__coshf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn sinhf(&self, __x: f32) -> f32 {
        (self.sinhf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sinhf(&self, __x: f32) -> f32 {
        (self
            .__sinhf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn tanhf(&self, __x: f32) -> f32 {
        (self.tanhf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __tanhf(&self, __x: f32) -> f32 {
        (self
            .__tanhf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn acoshf(&self, __x: f32) -> f32 {
        (self.acoshf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __acoshf(&self, __x: f32) -> f32 {
        (self
            .__acoshf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn asinhf(&self, __x: f32) -> f32 {
        (self.asinhf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __asinhf(&self, __x: f32) -> f32 {
        (self
            .__asinhf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atanhf(&self, __x: f32) -> f32 {
        (self.atanhf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __atanhf(&self, __x: f32) -> f32 {
        (self
            .__atanhf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn expf(&self, __x: f32) -> f32 {
        (self.expf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __expf(&self, __x: f32) -> f32 {
        (self.__expf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn frexpf(&self, __x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32 {
        (self.frexpf.as_ref().expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn __frexpf(&self, __x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32 {
        (self
            .__frexpf
            .as_ref()
            .expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn ldexpf(&self, __x: f32, __exponent: ::std::os::raw::c_int) -> f32 {
        (self.ldexpf.as_ref().expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn __ldexpf(&self, __x: f32, __exponent: ::std::os::raw::c_int) -> f32 {
        (self
            .__ldexpf
            .as_ref()
            .expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn logf(&self, __x: f32) -> f32 {
        (self.logf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __logf(&self, __x: f32) -> f32 {
        (self.__logf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log10f(&self, __x: f32) -> f32 {
        (self.log10f.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log10f(&self, __x: f32) -> f32 {
        (self
            .__log10f
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn modff(&self, __x: f32, __iptr: *mut f32) -> f32 {
        (self.modff.as_ref().expect("Expected function, got error."))(__x, __iptr)
    }
    pub unsafe fn __modff(&self, __x: f32, __iptr: *mut f32) -> f32 {
        (self
            .__modff
            .as_ref()
            .expect("Expected function, got error."))(__x, __iptr)
    }
    pub unsafe fn expm1f(&self, __x: f32) -> f32 {
        (self.expm1f.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __expm1f(&self, __x: f32) -> f32 {
        (self
            .__expm1f
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log1pf(&self, __x: f32) -> f32 {
        (self.log1pf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log1pf(&self, __x: f32) -> f32 {
        (self
            .__log1pf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn logbf(&self, __x: f32) -> f32 {
        (self.logbf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __logbf(&self, __x: f32) -> f32 {
        (self
            .__logbf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn exp2f(&self, __x: f32) -> f32 {
        (self.exp2f.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __exp2f(&self, __x: f32) -> f32 {
        (self
            .__exp2f
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log2f(&self, __x: f32) -> f32 {
        (self.log2f.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log2f(&self, __x: f32) -> f32 {
        (self
            .__log2f
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn powf(&self, __x: f32, __y: f32) -> f32 {
        (self.powf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __powf(&self, __x: f32, __y: f32) -> f32 {
        (self.__powf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn sqrtf(&self, __x: f32) -> f32 {
        (self.sqrtf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sqrtf(&self, __x: f32) -> f32 {
        (self
            .__sqrtf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn hypotf(&self, __x: f32, __y: f32) -> f32 {
        (self.hypotf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __hypotf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__hypotf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn cbrtf(&self, __x: f32) -> f32 {
        (self.cbrtf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cbrtf(&self, __x: f32) -> f32 {
        (self
            .__cbrtf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn ceilf(&self, __x: f32) -> f32 {
        (self.ceilf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __ceilf(&self, __x: f32) -> f32 {
        (self
            .__ceilf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fabsf(&self, __x: f32) -> f32 {
        (self.fabsf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __fabsf(&self, __x: f32) -> f32 {
        (self
            .__fabsf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn floorf(&self, __x: f32) -> f32 {
        (self.floorf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __floorf(&self, __x: f32) -> f32 {
        (self
            .__floorf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fmodf(&self, __x: f32, __y: f32) -> f32 {
        (self.fmodf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmodf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__fmodf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn isinff(&self, __value: f32) -> ::std::os::raw::c_int {
        (self.isinff.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn finitef(&self, __value: f32) -> ::std::os::raw::c_int {
        (self
            .finitef
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn dremf(&self, __x: f32, __y: f32) -> f32 {
        (self.dremf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __dremf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__dremf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn significandf(&self, __x: f32) -> f32 {
        (self
            .significandf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __significandf(&self, __x: f32) -> f32 {
        (self
            .__significandf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn copysignf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .copysignf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __copysignf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__copysignf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn nanf(&self, __tagb: *const ::std::os::raw::c_char) -> f32 {
        (self.nanf.as_ref().expect("Expected function, got error."))(__tagb)
    }
    pub unsafe fn __nanf(&self, __tagb: *const ::std::os::raw::c_char) -> f32 {
        (self.__nanf.as_ref().expect("Expected function, got error."))(__tagb)
    }
    pub unsafe fn isnanf(&self, __value: f32) -> ::std::os::raw::c_int {
        (self.isnanf.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn j0f(&self, arg1: f32) -> f32 {
        (self.j0f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __j0f(&self, arg1: f32) -> f32 {
        (self.__j0f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn j1f(&self, arg1: f32) -> f32 {
        (self.j1f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __j1f(&self, arg1: f32) -> f32 {
        (self.__j1f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn jnf(&self, arg1: ::std::os::raw::c_int, arg2: f32) -> f32 {
        (self.jnf.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __jnf(&self, arg1: ::std::os::raw::c_int, arg2: f32) -> f32 {
        (self.__jnf.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn y0f(&self, arg1: f32) -> f32 {
        (self.y0f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __y0f(&self, arg1: f32) -> f32 {
        (self.__y0f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn y1f(&self, arg1: f32) -> f32 {
        (self.y1f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __y1f(&self, arg1: f32) -> f32 {
        (self.__y1f.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ynf(&self, arg1: ::std::os::raw::c_int, arg2: f32) -> f32 {
        (self.ynf.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __ynf(&self, arg1: ::std::os::raw::c_int, arg2: f32) -> f32 {
        (self.__ynf.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn erff(&self, arg1: f32) -> f32 {
        (self.erff.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __erff(&self, arg1: f32) -> f32 {
        (self.__erff.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn erfcf(&self, arg1: f32) -> f32 {
        (self.erfcf.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __erfcf(&self, arg1: f32) -> f32 {
        (self
            .__erfcf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn lgammaf(&self, arg1: f32) -> f32 {
        (self
            .lgammaf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __lgammaf(&self, arg1: f32) -> f32 {
        (self
            .__lgammaf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn tgammaf(&self, arg1: f32) -> f32 {
        (self
            .tgammaf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __tgammaf(&self, arg1: f32) -> f32 {
        (self
            .__tgammaf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn gammaf(&self, arg1: f32) -> f32 {
        (self.gammaf.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __gammaf(&self, arg1: f32) -> f32 {
        (self
            .__gammaf
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn lgammaf_r(&self, arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32 {
        (self
            .lgammaf_r
            .as_ref()
            .expect("Expected function, got error."))(arg1, __signgamp)
    }
    pub unsafe fn __lgammaf_r(&self, arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32 {
        (self
            .__lgammaf_r
            .as_ref()
            .expect("Expected function, got error."))(arg1, __signgamp)
    }
    pub unsafe fn rintf(&self, __x: f32) -> f32 {
        (self.rintf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __rintf(&self, __x: f32) -> f32 {
        (self
            .__rintf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn nextafterf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .nextafterf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __nextafterf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__nextafterf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn nexttowardf(&self, __x: f32, __y: u128) -> f32 {
        (self
            .nexttowardf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __nexttowardf(&self, __x: f32, __y: u128) -> f32 {
        (self
            .__nexttowardf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn remainderf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .remainderf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __remainderf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__remainderf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn scalbnf(&self, __x: f32, __n: ::std::os::raw::c_int) -> f32 {
        (self
            .scalbnf
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalbnf(&self, __x: f32, __n: ::std::os::raw::c_int) -> f32 {
        (self
            .__scalbnf
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn ilogbf(&self, __x: f32) -> ::std::os::raw::c_int {
        (self.ilogbf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __ilogbf(&self, __x: f32) -> ::std::os::raw::c_int {
        (self
            .__ilogbf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn scalblnf(&self, __x: f32, __n: ::std::os::raw::c_long) -> f32 {
        (self
            .scalblnf
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalblnf(&self, __x: f32, __n: ::std::os::raw::c_long) -> f32 {
        (self
            .__scalblnf
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn nearbyintf(&self, __x: f32) -> f32 {
        (self
            .nearbyintf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __nearbyintf(&self, __x: f32) -> f32 {
        (self
            .__nearbyintf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn roundf(&self, __x: f32) -> f32 {
        (self.roundf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __roundf(&self, __x: f32) -> f32 {
        (self
            .__roundf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn truncf(&self, __x: f32) -> f32 {
        (self.truncf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __truncf(&self, __x: f32) -> f32 {
        (self
            .__truncf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn remquof(&self, __x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32 {
        (self
            .remquof
            .as_ref()
            .expect("Expected function, got error."))(__x, __y, __quo)
    }
    pub unsafe fn __remquof(&self, __x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32 {
        (self
            .__remquof
            .as_ref()
            .expect("Expected function, got error."))(__x, __y, __quo)
    }
    pub unsafe fn lrintf(&self, __x: f32) -> ::std::os::raw::c_long {
        (self.lrintf.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __lrintf(&self, __x: f32) -> ::std::os::raw::c_long {
        (self
            .__lrintf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llrintf(&self, __x: f32) -> ::std::os::raw::c_longlong {
        (self
            .llrintf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __llrintf(&self, __x: f32) -> ::std::os::raw::c_longlong {
        (self
            .__llrintf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn lroundf(&self, __x: f32) -> ::std::os::raw::c_long {
        (self
            .lroundf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __lroundf(&self, __x: f32) -> ::std::os::raw::c_long {
        (self
            .__lroundf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llroundf(&self, __x: f32) -> ::std::os::raw::c_longlong {
        (self
            .llroundf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __llroundf(&self, __x: f32) -> ::std::os::raw::c_longlong {
        (self
            .__llroundf
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fdimf(&self, __x: f32, __y: f32) -> f32 {
        (self.fdimf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fdimf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__fdimf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fmaxf(&self, __x: f32, __y: f32) -> f32 {
        (self.fmaxf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmaxf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__fmaxf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fminf(&self, __x: f32, __y: f32) -> f32 {
        (self.fminf.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fminf(&self, __x: f32, __y: f32) -> f32 {
        (self
            .__fminf
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fmaf(&self, __x: f32, __y: f32, __z: f32) -> f32 {
        (self.fmaf.as_ref().expect("Expected function, got error."))(__x, __y, __z)
    }
    pub unsafe fn __fmaf(&self, __x: f32, __y: f32, __z: f32) -> f32 {
        (self.__fmaf.as_ref().expect("Expected function, got error."))(__x, __y, __z)
    }
    pub unsafe fn scalbf(&self, __x: f32, __n: f32) -> f32 {
        (self.scalbf.as_ref().expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalbf(&self, __x: f32, __n: f32) -> f32 {
        (self
            .__scalbf
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __fpclassifyl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .__fpclassifyl
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __signbitl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .__signbitl
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __isinfl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .__isinfl
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __finitel(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .__finitel
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __isnanl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .__isnanl
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn __iseqsigl(&self, __x: u128, __y: u128) -> ::std::os::raw::c_int {
        (self
            .__iseqsigl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __issignalingl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .__issignalingl
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn acosl(&self, __x: u128) -> u128 {
        (self.acosl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __acosl(&self, __x: u128) -> u128 {
        (self
            .__acosl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn asinl(&self, __x: u128) -> u128 {
        (self.asinl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __asinl(&self, __x: u128) -> u128 {
        (self
            .__asinl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atanl(&self, __x: u128) -> u128 {
        (self.atanl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __atanl(&self, __x: u128) -> u128 {
        (self
            .__atanl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atan2l(&self, __y: u128, __x: u128) -> u128 {
        (self.atan2l.as_ref().expect("Expected function, got error."))(__y, __x)
    }
    pub unsafe fn __atan2l(&self, __y: u128, __x: u128) -> u128 {
        (self
            .__atan2l
            .as_ref()
            .expect("Expected function, got error."))(__y, __x)
    }
    pub unsafe fn cosl(&self, __x: u128) -> u128 {
        (self.cosl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cosl(&self, __x: u128) -> u128 {
        (self.__cosl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn sinl(&self, __x: u128) -> u128 {
        (self.sinl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sinl(&self, __x: u128) -> u128 {
        (self.__sinl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn tanl(&self, __x: u128) -> u128 {
        (self.tanl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __tanl(&self, __x: u128) -> u128 {
        (self.__tanl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn coshl(&self, __x: u128) -> u128 {
        (self.coshl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __coshl(&self, __x: u128) -> u128 {
        (self
            .__coshl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn sinhl(&self, __x: u128) -> u128 {
        (self.sinhl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sinhl(&self, __x: u128) -> u128 {
        (self
            .__sinhl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn tanhl(&self, __x: u128) -> u128 {
        (self.tanhl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __tanhl(&self, __x: u128) -> u128 {
        (self
            .__tanhl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn acoshl(&self, __x: u128) -> u128 {
        (self.acoshl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __acoshl(&self, __x: u128) -> u128 {
        (self
            .__acoshl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn asinhl(&self, __x: u128) -> u128 {
        (self.asinhl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __asinhl(&self, __x: u128) -> u128 {
        (self
            .__asinhl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn atanhl(&self, __x: u128) -> u128 {
        (self.atanhl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __atanhl(&self, __x: u128) -> u128 {
        (self
            .__atanhl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn expl(&self, __x: u128) -> u128 {
        (self.expl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __expl(&self, __x: u128) -> u128 {
        (self.__expl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn frexpl(&self, __x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128 {
        (self.frexpl.as_ref().expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn __frexpl(&self, __x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128 {
        (self
            .__frexpl
            .as_ref()
            .expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn ldexpl(&self, __x: u128, __exponent: ::std::os::raw::c_int) -> u128 {
        (self.ldexpl.as_ref().expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn __ldexpl(&self, __x: u128, __exponent: ::std::os::raw::c_int) -> u128 {
        (self
            .__ldexpl
            .as_ref()
            .expect("Expected function, got error."))(__x, __exponent)
    }
    pub unsafe fn logl(&self, __x: u128) -> u128 {
        (self.logl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __logl(&self, __x: u128) -> u128 {
        (self.__logl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log10l(&self, __x: u128) -> u128 {
        (self.log10l.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log10l(&self, __x: u128) -> u128 {
        (self
            .__log10l
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn modfl(&self, __x: u128, __iptr: *mut u128) -> u128 {
        (self.modfl.as_ref().expect("Expected function, got error."))(__x, __iptr)
    }
    pub unsafe fn __modfl(&self, __x: u128, __iptr: *mut u128) -> u128 {
        (self
            .__modfl
            .as_ref()
            .expect("Expected function, got error."))(__x, __iptr)
    }
    pub unsafe fn expm1l(&self, __x: u128) -> u128 {
        (self.expm1l.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __expm1l(&self, __x: u128) -> u128 {
        (self
            .__expm1l
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log1pl(&self, __x: u128) -> u128 {
        (self.log1pl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log1pl(&self, __x: u128) -> u128 {
        (self
            .__log1pl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn logbl(&self, __x: u128) -> u128 {
        (self.logbl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __logbl(&self, __x: u128) -> u128 {
        (self
            .__logbl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn exp2l(&self, __x: u128) -> u128 {
        (self.exp2l.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __exp2l(&self, __x: u128) -> u128 {
        (self
            .__exp2l
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn log2l(&self, __x: u128) -> u128 {
        (self.log2l.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __log2l(&self, __x: u128) -> u128 {
        (self
            .__log2l
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn powl(&self, __x: u128, __y: u128) -> u128 {
        (self.powl.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __powl(&self, __x: u128, __y: u128) -> u128 {
        (self.__powl.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn sqrtl(&self, __x: u128) -> u128 {
        (self.sqrtl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __sqrtl(&self, __x: u128) -> u128 {
        (self
            .__sqrtl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn hypotl(&self, __x: u128, __y: u128) -> u128 {
        (self.hypotl.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __hypotl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__hypotl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn cbrtl(&self, __x: u128) -> u128 {
        (self.cbrtl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __cbrtl(&self, __x: u128) -> u128 {
        (self
            .__cbrtl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn ceill(&self, __x: u128) -> u128 {
        (self.ceill.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __ceill(&self, __x: u128) -> u128 {
        (self
            .__ceill
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fabsl(&self, __x: u128) -> u128 {
        (self.fabsl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __fabsl(&self, __x: u128) -> u128 {
        (self
            .__fabsl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn floorl(&self, __x: u128) -> u128 {
        (self.floorl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __floorl(&self, __x: u128) -> u128 {
        (self
            .__floorl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fmodl(&self, __x: u128, __y: u128) -> u128 {
        (self.fmodl.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmodl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__fmodl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn isinfl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self.isinfl.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn finitel(&self, __value: u128) -> ::std::os::raw::c_int {
        (self
            .finitel
            .as_ref()
            .expect("Expected function, got error."))(__value)
    }
    pub unsafe fn dreml(&self, __x: u128, __y: u128) -> u128 {
        (self.dreml.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __dreml(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__dreml
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn significandl(&self, __x: u128) -> u128 {
        (self
            .significandl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __significandl(&self, __x: u128) -> u128 {
        (self
            .__significandl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn copysignl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .copysignl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __copysignl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__copysignl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn nanl(&self, __tagb: *const ::std::os::raw::c_char) -> u128 {
        (self.nanl.as_ref().expect("Expected function, got error."))(__tagb)
    }
    pub unsafe fn __nanl(&self, __tagb: *const ::std::os::raw::c_char) -> u128 {
        (self.__nanl.as_ref().expect("Expected function, got error."))(__tagb)
    }
    pub unsafe fn isnanl(&self, __value: u128) -> ::std::os::raw::c_int {
        (self.isnanl.as_ref().expect("Expected function, got error."))(__value)
    }
    pub unsafe fn j0l(&self, arg1: u128) -> u128 {
        (self.j0l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __j0l(&self, arg1: u128) -> u128 {
        (self.__j0l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn j1l(&self, arg1: u128) -> u128 {
        (self.j1l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __j1l(&self, arg1: u128) -> u128 {
        (self.__j1l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn jnl(&self, arg1: ::std::os::raw::c_int, arg2: u128) -> u128 {
        (self.jnl.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __jnl(&self, arg1: ::std::os::raw::c_int, arg2: u128) -> u128 {
        (self.__jnl.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn y0l(&self, arg1: u128) -> u128 {
        (self.y0l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __y0l(&self, arg1: u128) -> u128 {
        (self.__y0l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn y1l(&self, arg1: u128) -> u128 {
        (self.y1l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __y1l(&self, arg1: u128) -> u128 {
        (self.__y1l.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ynl(&self, arg1: ::std::os::raw::c_int, arg2: u128) -> u128 {
        (self.ynl.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __ynl(&self, arg1: ::std::os::raw::c_int, arg2: u128) -> u128 {
        (self.__ynl.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn erfl(&self, arg1: u128) -> u128 {
        (self.erfl.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __erfl(&self, arg1: u128) -> u128 {
        (self.__erfl.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn erfcl(&self, arg1: u128) -> u128 {
        (self.erfcl.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __erfcl(&self, arg1: u128) -> u128 {
        (self
            .__erfcl
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn lgammal(&self, arg1: u128) -> u128 {
        (self
            .lgammal
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __lgammal(&self, arg1: u128) -> u128 {
        (self
            .__lgammal
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn tgammal(&self, arg1: u128) -> u128 {
        (self
            .tgammal
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __tgammal(&self, arg1: u128) -> u128 {
        (self
            .__tgammal
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn gammal(&self, arg1: u128) -> u128 {
        (self.gammal.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __gammal(&self, arg1: u128) -> u128 {
        (self
            .__gammal
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn lgammal_r(&self, arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128 {
        (self
            .lgammal_r
            .as_ref()
            .expect("Expected function, got error."))(arg1, __signgamp)
    }
    pub unsafe fn __lgammal_r(&self, arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128 {
        (self
            .__lgammal_r
            .as_ref()
            .expect("Expected function, got error."))(arg1, __signgamp)
    }
    pub unsafe fn rintl(&self, __x: u128) -> u128 {
        (self.rintl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __rintl(&self, __x: u128) -> u128 {
        (self
            .__rintl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn nextafterl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .nextafterl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __nextafterl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__nextafterl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn nexttowardl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .nexttowardl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __nexttowardl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__nexttowardl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn remainderl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .remainderl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __remainderl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__remainderl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn scalbnl(&self, __x: u128, __n: ::std::os::raw::c_int) -> u128 {
        (self
            .scalbnl
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalbnl(&self, __x: u128, __n: ::std::os::raw::c_int) -> u128 {
        (self
            .__scalbnl
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn ilogbl(&self, __x: u128) -> ::std::os::raw::c_int {
        (self.ilogbl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __ilogbl(&self, __x: u128) -> ::std::os::raw::c_int {
        (self
            .__ilogbl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn scalblnl(&self, __x: u128, __n: ::std::os::raw::c_long) -> u128 {
        (self
            .scalblnl
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalblnl(&self, __x: u128, __n: ::std::os::raw::c_long) -> u128 {
        (self
            .__scalblnl
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn nearbyintl(&self, __x: u128) -> u128 {
        (self
            .nearbyintl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __nearbyintl(&self, __x: u128) -> u128 {
        (self
            .__nearbyintl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn roundl(&self, __x: u128) -> u128 {
        (self.roundl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __roundl(&self, __x: u128) -> u128 {
        (self
            .__roundl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn truncl(&self, __x: u128) -> u128 {
        (self.truncl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __truncl(&self, __x: u128) -> u128 {
        (self
            .__truncl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn remquol(&self, __x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128 {
        (self
            .remquol
            .as_ref()
            .expect("Expected function, got error."))(__x, __y, __quo)
    }
    pub unsafe fn __remquol(
        &self,
        __x: u128,
        __y: u128,
        __quo: *mut ::std::os::raw::c_int,
    ) -> u128 {
        (self
            .__remquol
            .as_ref()
            .expect("Expected function, got error."))(__x, __y, __quo)
    }
    pub unsafe fn lrintl(&self, __x: u128) -> ::std::os::raw::c_long {
        (self.lrintl.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __lrintl(&self, __x: u128) -> ::std::os::raw::c_long {
        (self
            .__lrintl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llrintl(&self, __x: u128) -> ::std::os::raw::c_longlong {
        (self
            .llrintl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __llrintl(&self, __x: u128) -> ::std::os::raw::c_longlong {
        (self
            .__llrintl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn lroundl(&self, __x: u128) -> ::std::os::raw::c_long {
        (self
            .lroundl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __lroundl(&self, __x: u128) -> ::std::os::raw::c_long {
        (self
            .__lroundl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llroundl(&self, __x: u128) -> ::std::os::raw::c_longlong {
        (self
            .llroundl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn __llroundl(&self, __x: u128) -> ::std::os::raw::c_longlong {
        (self
            .__llroundl
            .as_ref()
            .expect("Expected function, got error."))(__x)
    }
    pub unsafe fn fdiml(&self, __x: u128, __y: u128) -> u128 {
        (self.fdiml.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fdiml(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__fdiml
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fmaxl(&self, __x: u128, __y: u128) -> u128 {
        (self.fmaxl.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fmaxl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__fmaxl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fminl(&self, __x: u128, __y: u128) -> u128 {
        (self.fminl.as_ref().expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn __fminl(&self, __x: u128, __y: u128) -> u128 {
        (self
            .__fminl
            .as_ref()
            .expect("Expected function, got error."))(__x, __y)
    }
    pub unsafe fn fmal(&self, __x: u128, __y: u128, __z: u128) -> u128 {
        (self.fmal.as_ref().expect("Expected function, got error."))(__x, __y, __z)
    }
    pub unsafe fn __fmal(&self, __x: u128, __y: u128, __z: u128) -> u128 {
        (self.__fmal.as_ref().expect("Expected function, got error."))(__x, __y, __z)
    }
    pub unsafe fn scalbl(&self, __x: u128, __n: u128) -> u128 {
        (self.scalbl.as_ref().expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn __scalbl(&self, __x: u128, __n: u128) -> u128 {
        (self
            .__scalbl
            .as_ref()
            .expect("Expected function, got error."))(__x, __n)
    }
    pub unsafe fn remove(
        &self,
        __filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.remove.as_ref().expect("Expected function, got error."))(__filename)
    }
    pub unsafe fn rename(
        &self,
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.rename.as_ref().expect("Expected function, got error."))(__old, __new)
    }
    pub unsafe fn renameat(
        &self,
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .renameat
            .as_ref()
            .expect("Expected function, got error."))(__oldfd, __old, __newfd, __new)
    }
    pub unsafe fn fclose(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.fclose.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn tmpfile(&self) -> *mut FILE {
        (self
            .tmpfile
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn tmpnam(&self, arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self.tmpnam.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn tmpnam_r(&self, __s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self
            .tmpnam_r
            .as_ref()
            .expect("Expected function, got error."))(__s)
    }
    pub unsafe fn tempnam(
        &self,
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .tempnam
            .as_ref()
            .expect("Expected function, got error."))(__dir, __pfx)
    }
    pub unsafe fn fflush(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.fflush.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fflush_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .fflush_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fopen(
        &self,
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self.fopen.as_ref().expect("Expected function, got error."))(__filename, __modes)
    }
    pub unsafe fn freopen(
        &self,
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE {
        (self
            .freopen
            .as_ref()
            .expect("Expected function, got error."))(__filename, __modes, __stream)
    }
    pub unsafe fn fdopen(
        &self,
        __fd: ::std::os::raw::c_int,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self.fdopen.as_ref().expect("Expected function, got error."))(__fd, __modes)
    }
    pub unsafe fn fmemopen(
        &self,
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self
            .fmemopen
            .as_ref()
            .expect("Expected function, got error."))(__s, __len, __modes)
    }
    pub unsafe fn open_memstream(
        &self,
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE {
        (self
            .open_memstream
            .as_ref()
            .expect("Expected function, got error."))(__bufloc, __sizeloc)
    }
    pub unsafe fn setbuf(&self, __stream: *mut FILE, __buf: *mut ::std::os::raw::c_char) {
        (self.setbuf.as_ref().expect("Expected function, got error."))(__stream, __buf)
    }
    pub unsafe fn setvbuf(
        &self,
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .setvbuf
            .as_ref()
            .expect("Expected function, got error."))(__stream, __buf, __modes, __n)
    }
    pub unsafe fn setbuffer(
        &self,
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __size: usize,
    ) {
        (self
            .setbuffer
            .as_ref()
            .expect("Expected function, got error."))(__stream, __buf, __size)
    }
    pub unsafe fn setlinebuf(&self, __stream: *mut FILE) {
        (self
            .setlinebuf
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn vfprintf(
        &self,
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vfprintf
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vprintf(
        &self,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vprintf
            .as_ref()
            .expect("Expected function, got error."))(__format, __arg)
    }
    pub unsafe fn vsprintf(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vsprintf
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vsnprintf(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vsnprintf
            .as_ref()
            .expect("Expected function, got error."))(__s, __maxlen, __format, __arg)
    }
    pub unsafe fn vdprintf(
        &self,
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vdprintf
            .as_ref()
            .expect("Expected function, got error."))(__fd, __fmt, __arg)
    }
    pub unsafe fn vfscanf(
        &self,
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vfscanf
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vscanf(
        &self,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self.vscanf.as_ref().expect("Expected function, got error."))(__format, __arg)
    }
    pub unsafe fn vsscanf(
        &self,
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vsscanf
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vfscanf1(
        &self,
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vfscanf1
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vscanf1(
        &self,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vscanf1
            .as_ref()
            .expect("Expected function, got error."))(__format, __arg)
    }
    pub unsafe fn vsscanf1(
        &self,
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int {
        (self
            .vsscanf1
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn fgetc(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.fgetc.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn getc(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.getc.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn getchar(&self) -> ::std::os::raw::c_int {
        (self
            .getchar
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getc_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .getc_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn getchar_unlocked(&self) -> ::std::os::raw::c_int {
        (self
            .getchar_unlocked
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn fgetc_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .fgetc_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fputc(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.fputc.as_ref().expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn putc(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.putc.as_ref().expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn putchar(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .putchar
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn fputc_unlocked(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self
            .fputc_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn putc_unlocked(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self
            .putc_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn putchar_unlocked(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .putchar_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn getw(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.getw.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn putw(
        &self,
        __w: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.putw.as_ref().expect("Expected function, got error."))(__w, __stream)
    }
    pub unsafe fn fgets(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char {
        (self.fgets.as_ref().expect("Expected function, got error."))(__s, __n, __stream)
    }
    pub unsafe fn __getdelim(
        &self,
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t {
        (self
            .__getdelim
            .as_ref()
            .expect("Expected function, got error."))(__lineptr, __n, __delimiter, __stream)
    }
    pub unsafe fn getdelim(
        &self,
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t {
        (self
            .getdelim
            .as_ref()
            .expect("Expected function, got error."))(__lineptr, __n, __delimiter, __stream)
    }
    pub unsafe fn getline(
        &self,
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t {
        (self
            .getline
            .as_ref()
            .expect("Expected function, got error."))(__lineptr, __n, __stream)
    }
    pub unsafe fn fputs(
        &self,
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.fputs.as_ref().expect("Expected function, got error."))(__s, __stream)
    }
    pub unsafe fn puts(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.puts.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn ungetc(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.ungetc.as_ref().expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn fread(
        &self,
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong {
        (self.fread.as_ref().expect("Expected function, got error."))(__ptr, __size, __n, __stream)
    }
    pub unsafe fn fwrite(
        &self,
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong {
        (self.fwrite.as_ref().expect("Expected function, got error."))(__ptr, __size, __n, __s)
    }
    pub unsafe fn fread_unlocked(
        &self,
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize {
        (self
            .fread_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__ptr, __size, __n, __stream)
    }
    pub unsafe fn fwrite_unlocked(
        &self,
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize {
        (self
            .fwrite_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__ptr, __size, __n, __stream)
    }
    pub unsafe fn fseek(
        &self,
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.fseek.as_ref().expect("Expected function, got error."))(__stream, __off, __whence)
    }
    pub unsafe fn ftell(&self, __stream: *mut FILE) -> ::std::os::raw::c_long {
        (self.ftell.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn rewind(&self, __stream: *mut FILE) {
        (self.rewind.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fseeko(
        &self,
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.fseeko.as_ref().expect("Expected function, got error."))(__stream, __off, __whence)
    }
    pub unsafe fn ftello(&self, __stream: *mut FILE) -> __off_t {
        (self.ftello.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fgetpos(&self, __stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int {
        (self
            .fgetpos
            .as_ref()
            .expect("Expected function, got error."))(__stream, __pos)
    }
    pub unsafe fn fsetpos(
        &self,
        __stream: *mut FILE,
        __pos: *const fpos_t,
    ) -> ::std::os::raw::c_int {
        (self
            .fsetpos
            .as_ref()
            .expect("Expected function, got error."))(__stream, __pos)
    }
    pub unsafe fn clearerr(&self, __stream: *mut FILE) {
        (self
            .clearerr
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn feof(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.feof.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn ferror(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.ferror.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn clearerr_unlocked(&self, __stream: *mut FILE) {
        (self
            .clearerr_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn feof_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .feof_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn ferror_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .ferror_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn perror(&self, __s: *const ::std::os::raw::c_char) {
        (self.perror.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn fileno(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.fileno.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fileno_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .fileno_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn pclose(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.pclose.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn popen(
        &self,
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self.popen.as_ref().expect("Expected function, got error."))(__command, __modes)
    }
    pub unsafe fn ctermid(&self, __s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self
            .ctermid
            .as_ref()
            .expect("Expected function, got error."))(__s)
    }
    pub unsafe fn flockfile(&self, __stream: *mut FILE) {
        (self
            .flockfile
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn ftrylockfile(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .ftrylockfile
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn funlockfile(&self, __stream: *mut FILE) {
        (self
            .funlockfile
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn __uflow(&self, arg1: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .__uflow
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __overflow(
        &self,
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .__overflow
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __ctype_get_mb_cur_max(&self) -> usize {
        (self
            .__ctype_get_mb_cur_max
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn atof(&self, __nptr: *const ::std::os::raw::c_char) -> f64 {
        (self.atof.as_ref().expect("Expected function, got error."))(__nptr)
    }
    pub unsafe fn atoi(&self, __nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.atoi.as_ref().expect("Expected function, got error."))(__nptr)
    }
    pub unsafe fn atol(&self, __nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long {
        (self.atol.as_ref().expect("Expected function, got error."))(__nptr)
    }
    pub unsafe fn atoll(
        &self,
        __nptr: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong {
        (self.atoll.as_ref().expect("Expected function, got error."))(__nptr)
    }
    pub unsafe fn strtod(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64 {
        (self.strtod.as_ref().expect("Expected function, got error."))(__nptr, __endptr)
    }
    pub unsafe fn strtof(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32 {
        (self.strtof.as_ref().expect("Expected function, got error."))(__nptr, __endptr)
    }
    pub unsafe fn strtold(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128 {
        (self
            .strtold
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr)
    }
    pub unsafe fn strtol(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self.strtol.as_ref().expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoul(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong {
        (self
            .strtoul
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoq(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong {
        (self.strtoq.as_ref().expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtouq(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            .strtouq
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoll(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong {
        (self
            .strtoll
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoull(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            .strtoull
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn l64a(&self, __n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char {
        (self.l64a.as_ref().expect("Expected function, got error."))(__n)
    }
    pub unsafe fn a64l(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long {
        (self.a64l.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn select(
        &self,
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int {
        (self.select.as_ref().expect("Expected function, got error."))(
            __nfds,
            __readfds,
            __writefds,
            __exceptfds,
            __timeout,
        )
    }
    pub unsafe fn pselect(
        &self,
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pselect
            .as_ref()
            .expect("Expected function, got error."))(
            __nfds,
            __readfds,
            __writefds,
            __exceptfds,
            __timeout,
            __sigmask,
        )
    }
    pub unsafe fn random(&self) -> ::std::os::raw::c_long {
        (self.random.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn srandom(&self, __seed: ::std::os::raw::c_uint) {
        (self
            .srandom
            .as_ref()
            .expect("Expected function, got error."))(__seed)
    }
    pub unsafe fn initstate(
        &self,
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .initstate
            .as_ref()
            .expect("Expected function, got error."))(__seed, __statebuf, __statelen)
    }
    pub unsafe fn setstate(
        &self,
        __statebuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .setstate
            .as_ref()
            .expect("Expected function, got error."))(__statebuf)
    }
    pub unsafe fn random_r(
        &self,
        __buf: *mut random_data,
        __result: *mut i32,
    ) -> ::std::os::raw::c_int {
        (self
            .random_r
            .as_ref()
            .expect("Expected function, got error."))(__buf, __result)
    }
    pub unsafe fn srandom_r(
        &self,
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int {
        (self
            .srandom_r
            .as_ref()
            .expect("Expected function, got error."))(__seed, __buf)
    }
    pub unsafe fn initstate_r(
        &self,
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int {
        (self
            .initstate_r
            .as_ref()
            .expect("Expected function, got error."))(__seed, __statebuf, __statelen, __buf)
    }
    pub unsafe fn setstate_r(
        &self,
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int {
        (self
            .setstate_r
            .as_ref()
            .expect("Expected function, got error."))(__statebuf, __buf)
    }
    pub unsafe fn rand(&self) -> ::std::os::raw::c_int {
        (self.rand.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn srand(&self, __seed: ::std::os::raw::c_uint) {
        (self.srand.as_ref().expect("Expected function, got error."))(__seed)
    }
    pub unsafe fn rand_r(&self, __seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int {
        (self.rand_r.as_ref().expect("Expected function, got error."))(__seed)
    }
    pub unsafe fn drand48(&self) -> f64 {
        (self
            .drand48
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn erand48(&self, __xsubi: *mut ::std::os::raw::c_ushort) -> f64 {
        (self
            .erand48
            .as_ref()
            .expect("Expected function, got error."))(__xsubi)
    }
    pub unsafe fn lrand48(&self) -> ::std::os::raw::c_long {
        (self
            .lrand48
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn nrand48(&self, __xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long {
        (self
            .nrand48
            .as_ref()
            .expect("Expected function, got error."))(__xsubi)
    }
    pub unsafe fn mrand48(&self) -> ::std::os::raw::c_long {
        (self
            .mrand48
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn jrand48(&self, __xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long {
        (self
            .jrand48
            .as_ref()
            .expect("Expected function, got error."))(__xsubi)
    }
    pub unsafe fn srand48(&self, __seedval: ::std::os::raw::c_long) {
        (self
            .srand48
            .as_ref()
            .expect("Expected function, got error."))(__seedval)
    }
    pub unsafe fn seed48(
        &self,
        __seed16v: *mut ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort {
        (self.seed48.as_ref().expect("Expected function, got error."))(__seed16v)
    }
    pub unsafe fn lcong48(&self, __param: *mut ::std::os::raw::c_ushort) {
        (self
            .lcong48
            .as_ref()
            .expect("Expected function, got error."))(__param)
    }
    pub unsafe fn drand48_r(
        &self,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int {
        (self
            .drand48_r
            .as_ref()
            .expect("Expected function, got error."))(__buffer, __result)
    }
    pub unsafe fn erand48_r(
        &self,
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int {
        (self
            .erand48_r
            .as_ref()
            .expect("Expected function, got error."))(__xsubi, __buffer, __result)
    }
    pub unsafe fn lrand48_r(
        &self,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .lrand48_r
            .as_ref()
            .expect("Expected function, got error."))(__buffer, __result)
    }
    pub unsafe fn nrand48_r(
        &self,
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .nrand48_r
            .as_ref()
            .expect("Expected function, got error."))(__xsubi, __buffer, __result)
    }
    pub unsafe fn mrand48_r(
        &self,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .mrand48_r
            .as_ref()
            .expect("Expected function, got error."))(__buffer, __result)
    }
    pub unsafe fn jrand48_r(
        &self,
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .jrand48_r
            .as_ref()
            .expect("Expected function, got error."))(__xsubi, __buffer, __result)
    }
    pub unsafe fn srand48_r(
        &self,
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int {
        (self
            .srand48_r
            .as_ref()
            .expect("Expected function, got error."))(__seedval, __buffer)
    }
    pub unsafe fn seed48_r(
        &self,
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int {
        (self
            .seed48_r
            .as_ref()
            .expect("Expected function, got error."))(__seed16v, __buffer)
    }
    pub unsafe fn lcong48_r(
        &self,
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int {
        (self
            .lcong48_r
            .as_ref()
            .expect("Expected function, got error."))(__param, __buffer)
    }
    pub unsafe fn malloc(&self, __size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void {
        (self.malloc.as_ref().expect("Expected function, got error."))(__size)
    }
    pub unsafe fn calloc(
        &self,
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self.calloc.as_ref().expect("Expected function, got error."))(__nmemb, __size)
    }
    pub unsafe fn realloc(
        &self,
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .realloc
            .as_ref()
            .expect("Expected function, got error."))(__ptr, __size)
    }
    pub unsafe fn free(&self, __ptr: *mut ::std::os::raw::c_void) {
        (self.free.as_ref().expect("Expected function, got error."))(__ptr)
    }
    pub unsafe fn reallocarray(
        &self,
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .reallocarray
            .as_ref()
            .expect("Expected function, got error."))(__ptr, __nmemb, __size)
    }
    pub unsafe fn alloca(&self, __size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void {
        (self.alloca.as_ref().expect("Expected function, got error."))(__size)
    }
    pub unsafe fn valloc(&self, __size: usize) -> *mut ::std::os::raw::c_void {
        (self.valloc.as_ref().expect("Expected function, got error."))(__size)
    }
    pub unsafe fn posix_memalign(
        &self,
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .posix_memalign
            .as_ref()
            .expect("Expected function, got error."))(__memptr, __alignment, __size)
    }
    pub unsafe fn aligned_alloc(
        &self,
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .aligned_alloc
            .as_ref()
            .expect("Expected function, got error."))(__alignment, __size)
    }
    pub unsafe fn abort(&self) -> ! {
        (self.abort.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn atexit(
        &self,
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int {
        (self.atexit.as_ref().expect("Expected function, got error."))(__func)
    }
    pub unsafe fn at_quick_exit(
        &self,
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int {
        (self
            .at_quick_exit
            .as_ref()
            .expect("Expected function, got error."))(__func)
    }
    pub unsafe fn on_exit(
        &self,
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .on_exit
            .as_ref()
            .expect("Expected function, got error."))(__func, __arg)
    }
    pub unsafe fn exit(&self, __status: ::std::os::raw::c_int) -> ! {
        (self.exit.as_ref().expect("Expected function, got error."))(__status)
    }
    pub unsafe fn quick_exit(&self, __status: ::std::os::raw::c_int) -> ! {
        (self
            .quick_exit
            .as_ref()
            .expect("Expected function, got error."))(__status)
    }
    pub unsafe fn _Exit(&self, __status: ::std::os::raw::c_int) -> ! {
        (self._Exit.as_ref().expect("Expected function, got error."))(__status)
    }
    pub unsafe fn getenv(
        &self,
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.getenv.as_ref().expect("Expected function, got error."))(__name)
    }
    pub unsafe fn putenv(&self, __string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.putenv.as_ref().expect("Expected function, got error."))(__string)
    }
    pub unsafe fn setenv(
        &self,
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.setenv.as_ref().expect("Expected function, got error."))(__name, __value, __replace)
    }
    pub unsafe fn unsetenv(&self, __name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .unsetenv
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn clearenv(&self) -> ::std::os::raw::c_int {
        (self
            .clearenv
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mktemp(
        &self,
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.mktemp.as_ref().expect("Expected function, got error."))(__template)
    }
    pub unsafe fn mkstemp(&self, __template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .mkstemp
            .as_ref()
            .expect("Expected function, got error."))(__template)
    }
    pub unsafe fn mkstemps(
        &self,
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .mkstemps
            .as_ref()
            .expect("Expected function, got error."))(__template, __suffixlen)
    }
    pub unsafe fn mkdtemp(
        &self,
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .mkdtemp
            .as_ref()
            .expect("Expected function, got error."))(__template)
    }
    pub unsafe fn system(&self, __command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.system.as_ref().expect("Expected function, got error."))(__command)
    }
    pub unsafe fn realpath(
        &self,
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .realpath
            .as_ref()
            .expect("Expected function, got error."))(__name, __resolved)
    }
    pub unsafe fn bsearch(
        &self,
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .bsearch
            .as_ref()
            .expect("Expected function, got error."))(
            __key, __base, __nmemb, __size, __compar
        )
    }
    pub unsafe fn qsort(
        &self,
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) {
        (self.qsort.as_ref().expect("Expected function, got error."))(
            __base, __nmemb, __size, __compar,
        )
    }
    pub unsafe fn abs(&self, __x: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.abs.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn labs(&self, __x: ::std::os::raw::c_long) -> ::std::os::raw::c_long {
        (self.labs.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llabs(&self, __x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong {
        (self.llabs.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn div(
        &self,
        __numer: ::std::os::raw::c_int,
        __denom: ::std::os::raw::c_int,
    ) -> div_t {
        (self.div.as_ref().expect("Expected function, got error."))(__numer, __denom)
    }
    pub unsafe fn ldiv(
        &self,
        __numer: ::std::os::raw::c_long,
        __denom: ::std::os::raw::c_long,
    ) -> ldiv_t {
        (self.ldiv.as_ref().expect("Expected function, got error."))(__numer, __denom)
    }
    pub unsafe fn lldiv(
        &self,
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t {
        (self.lldiv.as_ref().expect("Expected function, got error."))(__numer, __denom)
    }
    pub unsafe fn ecvt(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.ecvt.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign,
        )
    }
    pub unsafe fn fcvt(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.fcvt.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign,
        )
    }
    pub unsafe fn gcvt(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.gcvt.as_ref().expect("Expected function, got error."))(__value, __ndigit, __buf)
    }
    pub unsafe fn qecvt(
        &self,
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.qecvt.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign,
        )
    }
    pub unsafe fn qfcvt(
        &self,
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.qfcvt.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign,
        )
    }
    pub unsafe fn qgcvt(
        &self,
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.qgcvt.as_ref().expect("Expected function, got error."))(__value, __ndigit, __buf)
    }
    pub unsafe fn ecvt_r(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self.ecvt_r.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign, __buf, __len,
        )
    }
    pub unsafe fn fcvt_r(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self.fcvt_r.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign, __buf, __len,
        )
    }
    pub unsafe fn qecvt_r(
        &self,
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .qecvt_r
            .as_ref()
            .expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign, __buf, __len,
        )
    }
    pub unsafe fn qfcvt_r(
        &self,
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .qfcvt_r
            .as_ref()
            .expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign, __buf, __len,
        )
    }
    pub unsafe fn mblen(
        &self,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int {
        (self.mblen.as_ref().expect("Expected function, got error."))(__s, __n)
    }
    pub unsafe fn mbtowc(
        &self,
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int {
        (self.mbtowc.as_ref().expect("Expected function, got error."))(__pwc, __s, __n)
    }
    pub unsafe fn wctomb(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __wchar: wchar_t,
    ) -> ::std::os::raw::c_int {
        (self.wctomb.as_ref().expect("Expected function, got error."))(__s, __wchar)
    }
    pub unsafe fn mbstowcs(
        &self,
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize {
        (self
            .mbstowcs
            .as_ref()
            .expect("Expected function, got error."))(__pwcs, __s, __n)
    }
    pub unsafe fn wcstombs(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: usize,
    ) -> usize {
        (self
            .wcstombs
            .as_ref()
            .expect("Expected function, got error."))(__s, __pwcs, __n)
    }
    pub unsafe fn rpmatch(
        &self,
        __response: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .rpmatch
            .as_ref()
            .expect("Expected function, got error."))(__response)
    }
    pub unsafe fn getsubopt(
        &self,
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .getsubopt
            .as_ref()
            .expect("Expected function, got error."))(__optionp, __tokens, __valuep)
    }
    pub unsafe fn getloadavg(
        &self,
        __loadavg: *mut f64,
        __nelem: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .getloadavg
            .as_ref()
            .expect("Expected function, got error."))(__loadavg, __nelem)
    }
    pub unsafe fn memcpy(
        &self,
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self.memcpy.as_ref().expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn memmove(
        &self,
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .memmove
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn memccpy(
        &self,
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .memccpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __c, __n)
    }
    pub unsafe fn memset(
        &self,
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self.memset.as_ref().expect("Expected function, got error."))(__s, __c, __n)
    }
    pub unsafe fn memcmp(
        &self,
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int {
        (self.memcmp.as_ref().expect("Expected function, got error."))(__s1, __s2, __n)
    }
    pub unsafe fn __memcmpeq(
        &self,
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .__memcmpeq
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __n)
    }
    pub unsafe fn memchr(
        &self,
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        (self.memchr.as_ref().expect("Expected function, got error."))(__s, __c, __n)
    }
    pub unsafe fn strcpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strcpy.as_ref().expect("Expected function, got error."))(__dest, __src)
    }
    pub unsafe fn strncpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strncpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn strcat(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strcat.as_ref().expect("Expected function, got error."))(__dest, __src)
    }
    pub unsafe fn strncat(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strncat
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn strcmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.strcmp.as_ref().expect("Expected function, got error."))(__s1, __s2)
    }
    pub unsafe fn strncmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int {
        (self
            .strncmp
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __n)
    }
    pub unsafe fn strcoll(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .strcoll
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2)
    }
    pub unsafe fn strxfrm(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong {
        (self
            .strxfrm
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn strcoll_l(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .strcoll_l
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __l)
    }
    pub unsafe fn strxfrm_l(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize {
        (self
            .strxfrm_l
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n, __l)
    }
    pub unsafe fn strdup(&self, __s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self.strdup.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn strndup(
        &self,
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strndup
            .as_ref()
            .expect("Expected function, got error."))(__string, __n)
    }
    pub unsafe fn strchr(
        &self,
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.strchr.as_ref().expect("Expected function, got error."))(__s, __c)
    }
    pub unsafe fn strrchr(
        &self,
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strrchr
            .as_ref()
            .expect("Expected function, got error."))(__s, __c)
    }
    pub unsafe fn strcspn(
        &self,
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong {
        (self
            .strcspn
            .as_ref()
            .expect("Expected function, got error."))(__s, __reject)
    }
    pub unsafe fn strspn(
        &self,
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong {
        (self.strspn.as_ref().expect("Expected function, got error."))(__s, __accept)
    }
    pub unsafe fn strpbrk(
        &self,
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strpbrk
            .as_ref()
            .expect("Expected function, got error."))(__s, __accept)
    }
    pub unsafe fn strstr(
        &self,
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strstr.as_ref().expect("Expected function, got error."))(__haystack, __needle)
    }
    pub unsafe fn strtok(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strtok.as_ref().expect("Expected function, got error."))(__s, __delim)
    }
    pub unsafe fn __strtok_r(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .__strtok_r
            .as_ref()
            .expect("Expected function, got error."))(__s, __delim, __save_ptr)
    }
    pub unsafe fn strtok_r(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strtok_r
            .as_ref()
            .expect("Expected function, got error."))(__s, __delim, __save_ptr)
    }
    pub unsafe fn strlen(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong {
        (self.strlen.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn strnlen(
        &self,
        __string: *const ::std::os::raw::c_char,
        __maxlen: usize,
    ) -> usize {
        (self
            .strnlen
            .as_ref()
            .expect("Expected function, got error."))(__string, __maxlen)
    }
    pub unsafe fn strerror(&self, __errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char {
        (self
            .strerror
            .as_ref()
            .expect("Expected function, got error."))(__errnum)
    }
    pub unsafe fn strerror_r(
        &self,
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .strerror_r
            .as_ref()
            .expect("Expected function, got error."))(__errnum, __buf, __buflen)
    }
    pub unsafe fn strerror_l(
        &self,
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strerror_l
            .as_ref()
            .expect("Expected function, got error."))(__errnum, __l)
    }
    pub unsafe fn bcmp(
        &self,
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int {
        (self.bcmp.as_ref().expect("Expected function, got error."))(__s1, __s2, __n)
    }
    pub unsafe fn bcopy(
        &self,
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    ) {
        (self.bcopy.as_ref().expect("Expected function, got error."))(__src, __dest, __n)
    }
    pub unsafe fn bzero(&self, __s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong) {
        (self.bzero.as_ref().expect("Expected function, got error."))(__s, __n)
    }
    pub unsafe fn index(
        &self,
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.index.as_ref().expect("Expected function, got error."))(__s, __c)
    }
    pub unsafe fn rindex(
        &self,
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.rindex.as_ref().expect("Expected function, got error."))(__s, __c)
    }
    pub unsafe fn ffs(&self, __i: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.ffs.as_ref().expect("Expected function, got error."))(__i)
    }
    pub unsafe fn ffsl(&self, __l: ::std::os::raw::c_long) -> ::std::os::raw::c_int {
        (self.ffsl.as_ref().expect("Expected function, got error."))(__l)
    }
    pub unsafe fn ffsll(&self, __ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int {
        (self.ffsll.as_ref().expect("Expected function, got error."))(__ll)
    }
    pub unsafe fn strcasecmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .strcasecmp
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2)
    }
    pub unsafe fn strncasecmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int {
        (self
            .strncasecmp
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __n)
    }
    pub unsafe fn strcasecmp_l(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .strcasecmp_l
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __loc)
    }
    pub unsafe fn strncasecmp_l(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .strncasecmp_l
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __n, __loc)
    }
    pub unsafe fn explicit_bzero(&self, __s: *mut ::std::os::raw::c_void, __n: usize) {
        (self
            .explicit_bzero
            .as_ref()
            .expect("Expected function, got error."))(__s, __n)
    }
    pub unsafe fn strsep(
        &self,
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strsep.as_ref().expect("Expected function, got error."))(__stringp, __delim)
    }
    pub unsafe fn strsignal(&self, __sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char {
        (self
            .strsignal
            .as_ref()
            .expect("Expected function, got error."))(__sig)
    }
    pub unsafe fn __stpcpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .__stpcpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src)
    }
    pub unsafe fn stpcpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.stpcpy.as_ref().expect("Expected function, got error."))(__dest, __src)
    }
    pub unsafe fn __stpncpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .__stpncpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn stpncpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .stpncpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn clock(&self) -> clock_t {
        (self.clock.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn time(&self, __timer: *mut time_t) -> time_t {
        (self.time.as_ref().expect("Expected function, got error."))(__timer)
    }
    pub unsafe fn difftime(&self, __time1: time_t, __time0: time_t) -> f64 {
        (self
            .difftime
            .as_ref()
            .expect("Expected function, got error."))(__time1, __time0)
    }
    pub unsafe fn mktime(&self, __tp: *mut tm) -> time_t {
        (self.mktime.as_ref().expect("Expected function, got error."))(__tp)
    }
    pub unsafe fn strftime(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize {
        (self
            .strftime
            .as_ref()
            .expect("Expected function, got error."))(__s, __maxsize, __format, __tp)
    }
    pub unsafe fn strftime_l(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize {
        (self
            .strftime_l
            .as_ref()
            .expect("Expected function, got error."))(__s, __maxsize, __format, __tp, __loc)
    }
    pub unsafe fn gmtime(&self, __timer: *const time_t) -> *mut tm {
        (self.gmtime.as_ref().expect("Expected function, got error."))(__timer)
    }
    pub unsafe fn localtime(&self, __timer: *const time_t) -> *mut tm {
        (self
            .localtime
            .as_ref()
            .expect("Expected function, got error."))(__timer)
    }
    pub unsafe fn gmtime_r(&self, __timer: *const time_t, __tp: *mut tm) -> *mut tm {
        (self
            .gmtime_r
            .as_ref()
            .expect("Expected function, got error."))(__timer, __tp)
    }
    pub unsafe fn localtime_r(&self, __timer: *const time_t, __tp: *mut tm) -> *mut tm {
        (self
            .localtime_r
            .as_ref()
            .expect("Expected function, got error."))(__timer, __tp)
    }
    pub unsafe fn asctime(&self, __tp: *const tm) -> *mut ::std::os::raw::c_char {
        (self
            .asctime
            .as_ref()
            .expect("Expected function, got error."))(__tp)
    }
    pub unsafe fn ctime(&self, __timer: *const time_t) -> *mut ::std::os::raw::c_char {
        (self.ctime.as_ref().expect("Expected function, got error."))(__timer)
    }
    pub unsafe fn asctime_r(
        &self,
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .asctime_r
            .as_ref()
            .expect("Expected function, got error."))(__tp, __buf)
    }
    pub unsafe fn ctime_r(
        &self,
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .ctime_r
            .as_ref()
            .expect("Expected function, got error."))(__timer, __buf)
    }
    pub unsafe fn tzset(&self) {
        (self.tzset.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn timegm(&self, __tp: *mut tm) -> time_t {
        (self.timegm.as_ref().expect("Expected function, got error."))(__tp)
    }
    pub unsafe fn timelocal(&self, __tp: *mut tm) -> time_t {
        (self
            .timelocal
            .as_ref()
            .expect("Expected function, got error."))(__tp)
    }
    pub unsafe fn dysize(&self, __year: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.dysize.as_ref().expect("Expected function, got error."))(__year)
    }
    pub unsafe fn nanosleep(
        &self,
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .nanosleep
            .as_ref()
            .expect("Expected function, got error."))(__requested_time, __remaining)
    }
    pub unsafe fn clock_getres(
        &self,
        __clock_id: clockid_t,
        __res: *mut timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .clock_getres
            .as_ref()
            .expect("Expected function, got error."))(__clock_id, __res)
    }
    pub unsafe fn clock_gettime(
        &self,
        __clock_id: clockid_t,
        __tp: *mut timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .clock_gettime
            .as_ref()
            .expect("Expected function, got error."))(__clock_id, __tp)
    }
    pub unsafe fn clock_settime(
        &self,
        __clock_id: clockid_t,
        __tp: *const timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .clock_settime
            .as_ref()
            .expect("Expected function, got error."))(__clock_id, __tp)
    }
    pub unsafe fn clock_nanosleep(
        &self,
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .clock_nanosleep
            .as_ref()
            .expect("Expected function, got error."))(__clock_id, __flags, __req, __rem)
    }
    pub unsafe fn clock_getcpuclockid(
        &self,
        __pid: pid_t,
        __clock_id: *mut clockid_t,
    ) -> ::std::os::raw::c_int {
        (self
            .clock_getcpuclockid
            .as_ref()
            .expect("Expected function, got error."))(__pid, __clock_id)
    }
    pub unsafe fn timer_create(
        &self,
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int {
        (self
            .timer_create
            .as_ref()
            .expect("Expected function, got error."))(__clock_id, __evp, __timerid)
    }
    pub unsafe fn timer_delete(&self, __timerid: timer_t) -> ::std::os::raw::c_int {
        (self
            .timer_delete
            .as_ref()
            .expect("Expected function, got error."))(__timerid)
    }
    pub unsafe fn timer_settime(
        &self,
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int {
        (self
            .timer_settime
            .as_ref()
            .expect("Expected function, got error."))(__timerid, __flags, __value, __ovalue)
    }
    pub unsafe fn timer_gettime(
        &self,
        __timerid: timer_t,
        __value: *mut itimerspec,
    ) -> ::std::os::raw::c_int {
        (self
            .timer_gettime
            .as_ref()
            .expect("Expected function, got error."))(__timerid, __value)
    }
    pub unsafe fn timer_getoverrun(&self, __timerid: timer_t) -> ::std::os::raw::c_int {
        (self
            .timer_getoverrun
            .as_ref()
            .expect("Expected function, got error."))(__timerid)
    }
    pub unsafe fn timespec_get(
        &self,
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .timespec_get
            .as_ref()
            .expect("Expected function, got error."))(__ts, __base)
    }
    pub unsafe fn access(
        &self,
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.access.as_ref().expect("Expected function, got error."))(__name, __type)
    }
    pub unsafe fn faccessat(
        &self,
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .faccessat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __file, __type, __flag)
    }
    pub unsafe fn lseek(
        &self,
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t {
        (self.lseek.as_ref().expect("Expected function, got error."))(__fd, __offset, __whence)
    }
    pub unsafe fn close(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.close.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn closefrom(&self, __lowfd: ::std::os::raw::c_int) {
        (self
            .closefrom
            .as_ref()
            .expect("Expected function, got error."))(__lowfd)
    }
    pub unsafe fn read(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize {
        (self.read.as_ref().expect("Expected function, got error."))(__fd, __buf, __nbytes)
    }
    pub unsafe fn write(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize {
        (self.write.as_ref().expect("Expected function, got error."))(__fd, __buf, __n)
    }
    pub unsafe fn pread(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize {
        (self.pread.as_ref().expect("Expected function, got error."))(
            __fd, __buf, __nbytes, __offset,
        )
    }
    pub unsafe fn pwrite(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize {
        (self.pwrite.as_ref().expect("Expected function, got error."))(__fd, __buf, __n, __offset)
    }
    pub unsafe fn pipe(&self, __pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.pipe.as_ref().expect("Expected function, got error."))(__pipedes)
    }
    pub unsafe fn alarm(&self, __seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint {
        (self.alarm.as_ref().expect("Expected function, got error."))(__seconds)
    }
    pub unsafe fn sleep(&self, __seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint {
        (self.sleep.as_ref().expect("Expected function, got error."))(__seconds)
    }
    pub unsafe fn ualarm(&self, __value: __useconds_t, __interval: __useconds_t) -> __useconds_t {
        (self.ualarm.as_ref().expect("Expected function, got error."))(__value, __interval)
    }
    pub unsafe fn usleep(&self, __useconds: __useconds_t) -> ::std::os::raw::c_int {
        (self.usleep.as_ref().expect("Expected function, got error."))(__useconds)
    }
    pub unsafe fn pause(&self) -> ::std::os::raw::c_int {
        (self.pause.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn chown(
        &self,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int {
        (self.chown.as_ref().expect("Expected function, got error."))(__file, __owner, __group)
    }
    pub unsafe fn fchown(
        &self,
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int {
        (self.fchown.as_ref().expect("Expected function, got error."))(__fd, __owner, __group)
    }
    pub unsafe fn lchown(
        &self,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int {
        (self.lchown.as_ref().expect("Expected function, got error."))(__file, __owner, __group)
    }
    pub unsafe fn fchownat(
        &self,
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .fchownat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __file, __owner, __group, __flag)
    }
    pub unsafe fn chdir(&self, __path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.chdir.as_ref().expect("Expected function, got error."))(__path)
    }
    pub unsafe fn fchdir(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.fchdir.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn getcwd(
        &self,
        __buf: *mut ::std::os::raw::c_char,
        __size: usize,
    ) -> *mut ::std::os::raw::c_char {
        (self.getcwd.as_ref().expect("Expected function, got error."))(__buf, __size)
    }
    pub unsafe fn getwd(&self, __buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self.getwd.as_ref().expect("Expected function, got error."))(__buf)
    }
    pub unsafe fn dup(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.dup.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn dup2(
        &self,
        __fd: ::std::os::raw::c_int,
        __fd2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.dup2.as_ref().expect("Expected function, got error."))(__fd, __fd2)
    }
    pub unsafe fn execve(
        &self,
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.execve.as_ref().expect("Expected function, got error."))(__path, __argv, __envp)
    }
    pub unsafe fn fexecve(
        &self,
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .fexecve
            .as_ref()
            .expect("Expected function, got error."))(__fd, __argv, __envp)
    }
    pub unsafe fn execv(
        &self,
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.execv.as_ref().expect("Expected function, got error."))(__path, __argv)
    }
    pub unsafe fn execvp(
        &self,
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.execvp.as_ref().expect("Expected function, got error."))(__file, __argv)
    }
    pub unsafe fn nice(&self, __inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.nice.as_ref().expect("Expected function, got error."))(__inc)
    }
    pub unsafe fn _exit(&self, __status: ::std::os::raw::c_int) -> ! {
        (self._exit.as_ref().expect("Expected function, got error."))(__status)
    }
    pub unsafe fn pathconf(
        &self,
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .pathconf
            .as_ref()
            .expect("Expected function, got error."))(__path, __name)
    }
    pub unsafe fn fpathconf(
        &self,
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .fpathconf
            .as_ref()
            .expect("Expected function, got error."))(__fd, __name)
    }
    pub unsafe fn sysconf(&self, __name: ::std::os::raw::c_int) -> ::std::os::raw::c_long {
        (self
            .sysconf
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn confstr(
        &self,
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize {
        (self
            .confstr
            .as_ref()
            .expect("Expected function, got error."))(__name, __buf, __len)
    }
    pub unsafe fn getpid(&self) -> __pid_t {
        (self.getpid.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn getppid(&self) -> __pid_t {
        (self
            .getppid
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getpgrp(&self) -> __pid_t {
        (self
            .getpgrp
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __getpgid(&self, __pid: __pid_t) -> __pid_t {
        (self
            .__getpgid
            .as_ref()
            .expect("Expected function, got error."))(__pid)
    }
    pub unsafe fn getpgid(&self, __pid: __pid_t) -> __pid_t {
        (self
            .getpgid
            .as_ref()
            .expect("Expected function, got error."))(__pid)
    }
    pub unsafe fn setpgid(&self, __pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int {
        (self
            .setpgid
            .as_ref()
            .expect("Expected function, got error."))(__pid, __pgid)
    }
    pub unsafe fn setpgrp(&self) -> ::std::os::raw::c_int {
        (self
            .setpgrp
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn setsid(&self) -> __pid_t {
        (self.setsid.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn getsid(&self, __pid: __pid_t) -> __pid_t {
        (self.getsid.as_ref().expect("Expected function, got error."))(__pid)
    }
    pub unsafe fn getuid(&self) -> __uid_t {
        (self.getuid.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn geteuid(&self) -> __uid_t {
        (self
            .geteuid
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getgid(&self) -> __gid_t {
        (self.getgid.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn getegid(&self) -> __gid_t {
        (self
            .getegid
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getgroups(
        &self,
        __size: ::std::os::raw::c_int,
        __list: *mut __gid_t,
    ) -> ::std::os::raw::c_int {
        (self
            .getgroups
            .as_ref()
            .expect("Expected function, got error."))(__size, __list)
    }
    pub unsafe fn setuid(&self, __uid: __uid_t) -> ::std::os::raw::c_int {
        (self.setuid.as_ref().expect("Expected function, got error."))(__uid)
    }
    pub unsafe fn setreuid(&self, __ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int {
        (self
            .setreuid
            .as_ref()
            .expect("Expected function, got error."))(__ruid, __euid)
    }
    pub unsafe fn seteuid(&self, __uid: __uid_t) -> ::std::os::raw::c_int {
        (self
            .seteuid
            .as_ref()
            .expect("Expected function, got error."))(__uid)
    }
    pub unsafe fn setgid(&self, __gid: __gid_t) -> ::std::os::raw::c_int {
        (self.setgid.as_ref().expect("Expected function, got error."))(__gid)
    }
    pub unsafe fn setregid(&self, __rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int {
        (self
            .setregid
            .as_ref()
            .expect("Expected function, got error."))(__rgid, __egid)
    }
    pub unsafe fn setegid(&self, __gid: __gid_t) -> ::std::os::raw::c_int {
        (self
            .setegid
            .as_ref()
            .expect("Expected function, got error."))(__gid)
    }
    pub unsafe fn fork(&self) -> __pid_t {
        (self.fork.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn vfork(&self) -> ::std::os::raw::c_int {
        (self.vfork.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn ttyname(&self, __fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char {
        (self
            .ttyname
            .as_ref()
            .expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn ttyname_r(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .ttyname_r
            .as_ref()
            .expect("Expected function, got error."))(__fd, __buf, __buflen)
    }
    pub unsafe fn isatty(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.isatty.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn ttyslot(&self) -> ::std::os::raw::c_int {
        (self
            .ttyslot
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn link(
        &self,
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.link.as_ref().expect("Expected function, got error."))(__from, __to)
    }
    pub unsafe fn linkat(
        &self,
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.linkat.as_ref().expect("Expected function, got error."))(
            __fromfd, __from, __tofd, __to, __flags,
        )
    }
    pub unsafe fn symlink(
        &self,
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .symlink
            .as_ref()
            .expect("Expected function, got error."))(__from, __to)
    }
    pub unsafe fn readlink(
        &self,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize {
        (self
            .readlink
            .as_ref()
            .expect("Expected function, got error."))(__path, __buf, __len)
    }
    pub unsafe fn symlinkat(
        &self,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .symlinkat
            .as_ref()
            .expect("Expected function, got error."))(__from, __tofd, __to)
    }
    pub unsafe fn readlinkat(
        &self,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize {
        (self
            .readlinkat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __path, __buf, __len)
    }
    pub unsafe fn unlink(&self, __name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.unlink.as_ref().expect("Expected function, got error."))(__name)
    }
    pub unsafe fn unlinkat(
        &self,
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .unlinkat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __name, __flag)
    }
    pub unsafe fn rmdir(&self, __path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.rmdir.as_ref().expect("Expected function, got error."))(__path)
    }
    pub unsafe fn tcgetpgrp(&self, __fd: ::std::os::raw::c_int) -> __pid_t {
        (self
            .tcgetpgrp
            .as_ref()
            .expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn tcsetpgrp(
        &self,
        __fd: ::std::os::raw::c_int,
        __pgrp_id: __pid_t,
    ) -> ::std::os::raw::c_int {
        (self
            .tcsetpgrp
            .as_ref()
            .expect("Expected function, got error."))(__fd, __pgrp_id)
    }
    pub unsafe fn getlogin(&self) -> *mut ::std::os::raw::c_char {
        (self
            .getlogin
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getlogin_r(
        &self,
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .getlogin_r
            .as_ref()
            .expect("Expected function, got error."))(__name, __name_len)
    }
    pub unsafe fn setlogin(&self, __name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .setlogin
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn getopt(
        &self,
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.getopt.as_ref().expect("Expected function, got error."))(
            ___argc,
            ___argv,
            __shortopts,
        )
    }
    pub unsafe fn gethostname(
        &self,
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .gethostname
            .as_ref()
            .expect("Expected function, got error."))(__name, __len)
    }
    pub unsafe fn sethostname(
        &self,
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .sethostname
            .as_ref()
            .expect("Expected function, got error."))(__name, __len)
    }
    pub unsafe fn sethostid(&self, __id: ::std::os::raw::c_long) -> ::std::os::raw::c_int {
        (self
            .sethostid
            .as_ref()
            .expect("Expected function, got error."))(__id)
    }
    pub unsafe fn getdomainname(
        &self,
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .getdomainname
            .as_ref()
            .expect("Expected function, got error."))(__name, __len)
    }
    pub unsafe fn setdomainname(
        &self,
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .setdomainname
            .as_ref()
            .expect("Expected function, got error."))(__name, __len)
    }
    pub unsafe fn vhangup(&self) -> ::std::os::raw::c_int {
        (self
            .vhangup
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn revoke(&self, __file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.revoke.as_ref().expect("Expected function, got error."))(__file)
    }
    pub unsafe fn profil(
        &self,
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self.profil.as_ref().expect("Expected function, got error."))(
            __sample_buffer,
            __size,
            __offset,
            __scale,
        )
    }
    pub unsafe fn acct(&self, __name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.acct.as_ref().expect("Expected function, got error."))(__name)
    }
    pub unsafe fn getusershell(&self) -> *mut ::std::os::raw::c_char {
        (self
            .getusershell
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn endusershell(&self) {
        (self
            .endusershell
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn setusershell(&self) {
        (self
            .setusershell
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn daemon(
        &self,
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.daemon.as_ref().expect("Expected function, got error."))(__nochdir, __noclose)
    }
    pub unsafe fn chroot(&self, __path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.chroot.as_ref().expect("Expected function, got error."))(__path)
    }
    pub unsafe fn getpass(
        &self,
        __prompt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .getpass
            .as_ref()
            .expect("Expected function, got error."))(__prompt)
    }
    pub unsafe fn fsync(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.fsync.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn gethostid(&self) -> ::std::os::raw::c_long {
        (self
            .gethostid
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn sync(&self) {
        (self.sync.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn getpagesize(&self) -> ::std::os::raw::c_int {
        (self
            .getpagesize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getdtablesize(&self) -> ::std::os::raw::c_int {
        (self
            .getdtablesize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn truncate(
        &self,
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int {
        (self
            .truncate
            .as_ref()
            .expect("Expected function, got error."))(__file, __length)
    }
    pub unsafe fn ftruncate(
        &self,
        __fd: ::std::os::raw::c_int,
        __length: __off_t,
    ) -> ::std::os::raw::c_int {
        (self
            .ftruncate
            .as_ref()
            .expect("Expected function, got error."))(__fd, __length)
    }
    pub unsafe fn brk(&self, __addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int {
        (self.brk.as_ref().expect("Expected function, got error."))(__addr)
    }
    pub unsafe fn sbrk(&self, __delta: isize) -> *mut ::std::os::raw::c_void {
        (self.sbrk.as_ref().expect("Expected function, got error."))(__delta)
    }
    pub unsafe fn fdatasync(&self, __fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .fdatasync
            .as_ref()
            .expect("Expected function, got error."))(__fildes)
    }
    pub unsafe fn crypt(
        &self,
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.crypt.as_ref().expect("Expected function, got error."))(__key, __salt)
    }
    pub unsafe fn getentropy(
        &self,
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .getentropy
            .as_ref()
            .expect("Expected function, got error."))(__buffer, __length)
    }
    pub unsafe fn gettimeofday(
        &self,
        __tv: *mut timeval,
        __tz: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .gettimeofday
            .as_ref()
            .expect("Expected function, got error."))(__tv, __tz)
    }
    pub unsafe fn settimeofday(
        &self,
        __tv: *const timeval,
        __tz: *const timezone,
    ) -> ::std::os::raw::c_int {
        (self
            .settimeofday
            .as_ref()
            .expect("Expected function, got error."))(__tv, __tz)
    }
    pub unsafe fn adjtime(
        &self,
        __delta: *const timeval,
        __olddelta: *mut timeval,
    ) -> ::std::os::raw::c_int {
        (self
            .adjtime
            .as_ref()
            .expect("Expected function, got error."))(__delta, __olddelta)
    }
    pub unsafe fn getitimer(
        &self,
        __which: __itimer_which_t,
        __value: *mut itimerval,
    ) -> ::std::os::raw::c_int {
        (self
            .getitimer
            .as_ref()
            .expect("Expected function, got error."))(__which, __value)
    }
    pub unsafe fn setitimer(
        &self,
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int {
        (self
            .setitimer
            .as_ref()
            .expect("Expected function, got error."))(__which, __new, __old)
    }
    pub unsafe fn utimes(
        &self,
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int {
        (self.utimes.as_ref().expect("Expected function, got error."))(__file, __tvp)
    }
    pub unsafe fn lutimes(
        &self,
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int {
        (self
            .lutimes
            .as_ref()
            .expect("Expected function, got error."))(__file, __tvp)
    }
    pub unsafe fn futimes(
        &self,
        __fd: ::std::os::raw::c_int,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int {
        (self
            .futimes
            .as_ref()
            .expect("Expected function, got error."))(__fd, __tvp)
    }
    pub unsafe fn TableInit(
        &self,
        arg1: *mut Table,
        initialSize: usize,
        deinitializer: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) {
        (self
            .TableInit
            .as_ref()
            .expect("Expected function, got error."))(arg1, initialSize, deinitializer)
    }
    pub unsafe fn TableDeinit(&self, arg1: *mut Table) {
        (self
            .TableDeinit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn TableLookup(&self, arg1: *const Table, key: u32) -> *mut ::std::os::raw::c_void {
        (self
            .TableLookup
            .as_ref()
            .expect("Expected function, got error."))(arg1, key)
    }
    pub unsafe fn TableInsert(
        &self,
        arg1: *mut Table,
        key: u32,
        value: *mut ::std::os::raw::c_void,
    ) {
        (self
            .TableInsert
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn TableRemove(&self, arg1: *mut Table, key: u32) {
        (self
            .TableRemove
            .as_ref()
            .expect("Expected function, got error."))(arg1, key)
    }
    pub unsafe fn TableClear(&self, arg1: *mut Table) {
        (self
            .TableClear
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn TableEnumerate(
        &self,
        arg1: *const Table,
        handler: ::std::option::Option<
            unsafe extern "C" fn(
                key: u32,
                value: *mut ::std::os::raw::c_void,
                user: *mut ::std::os::raw::c_void,
            ),
        >,
        user: *mut ::std::os::raw::c_void,
    ) {
        (self
            .TableEnumerate
            .as_ref()
            .expect("Expected function, got error."))(arg1, handler, user)
    }
    pub unsafe fn TableSize(&self, arg1: *const Table) -> usize {
        (self
            .TableSize
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn TableIteratorStart(&self, arg1: *const Table, arg2: *mut TableIterator) -> bool {
        (self
            .TableIteratorStart
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn TableIteratorNext(&self, arg1: *const Table, arg2: *mut TableIterator) -> bool {
        (self
            .TableIteratorNext
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn TableIteratorGetKey(
        &self,
        arg1: *const Table,
        arg2: *const TableIterator,
    ) -> u32 {
        (self
            .TableIteratorGetKey
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn TableIteratorGetValue(
        &self,
        arg1: *const Table,
        arg2: *const TableIterator,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .TableIteratorGetValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn TableIteratorLookup(
        &self,
        arg1: *const Table,
        arg2: *mut TableIterator,
        key: u32,
    ) -> bool {
        (self
            .TableIteratorLookup
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, key)
    }
    pub unsafe fn HashTableInit(
        &self,
        table: *mut Table,
        initialSize: usize,
        deinitializer: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) {
        (self
            .HashTableInit
            .as_ref()
            .expect("Expected function, got error."))(table, initialSize, deinitializer)
    }
    pub unsafe fn HashTableInitCustom(
        &self,
        table: *mut Table,
        initialSize: usize,
        funcs: *const TableFunctions,
    ) {
        (self
            .HashTableInitCustom
            .as_ref()
            .expect("Expected function, got error."))(table, initialSize, funcs)
    }
    pub unsafe fn HashTableDeinit(&self, table: *mut Table) {
        (self
            .HashTableDeinit
            .as_ref()
            .expect("Expected function, got error."))(table)
    }
    pub unsafe fn HashTableLookup(
        &self,
        arg1: *const Table,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .HashTableLookup
            .as_ref()
            .expect("Expected function, got error."))(arg1, key)
    }
    pub unsafe fn HashTableLookupBinary(
        &self,
        arg1: *const Table,
        key: *const ::std::os::raw::c_void,
        keylen: usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .HashTableLookupBinary
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, keylen)
    }
    pub unsafe fn HashTableLookupCustom(
        &self,
        arg1: *const Table,
        key: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .HashTableLookupCustom
            .as_ref()
            .expect("Expected function, got error."))(arg1, key)
    }
    pub unsafe fn HashTableInsert(
        &self,
        arg1: *mut Table,
        key: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
    ) {
        (self
            .HashTableInsert
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn HashTableInsertBinary(
        &self,
        arg1: *mut Table,
        key: *const ::std::os::raw::c_void,
        keylen: usize,
        value: *mut ::std::os::raw::c_void,
    ) {
        (self
            .HashTableInsertBinary
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, keylen, value)
    }
    pub unsafe fn HashTableInsertCustom(
        &self,
        arg1: *mut Table,
        key: *mut ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
    ) {
        (self
            .HashTableInsertCustom
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn HashTableRemove(&self, arg1: *mut Table, key: *const ::std::os::raw::c_char) {
        (self
            .HashTableRemove
            .as_ref()
            .expect("Expected function, got error."))(arg1, key)
    }
    pub unsafe fn HashTableRemoveBinary(
        &self,
        arg1: *mut Table,
        key: *const ::std::os::raw::c_void,
        keylen: usize,
    ) {
        (self
            .HashTableRemoveBinary
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, keylen)
    }
    pub unsafe fn HashTableRemoveCustom(&self, arg1: *mut Table, key: *mut ::std::os::raw::c_void) {
        (self
            .HashTableRemoveCustom
            .as_ref()
            .expect("Expected function, got error."))(arg1, key)
    }
    pub unsafe fn HashTableClear(&self, arg1: *mut Table) {
        (self
            .HashTableClear
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn HashTableEnumerate(
        &self,
        arg1: *const Table,
        handler: ::std::option::Option<
            unsafe extern "C" fn(
                key: *const ::std::os::raw::c_char,
                value: *mut ::std::os::raw::c_void,
                user: *mut ::std::os::raw::c_void,
            ),
        >,
        user: *mut ::std::os::raw::c_void,
    ) {
        (self
            .HashTableEnumerate
            .as_ref()
            .expect("Expected function, got error."))(arg1, handler, user)
    }
    pub unsafe fn HashTableEnumerateBinary(
        &self,
        arg1: *const Table,
        handler: ::std::option::Option<
            unsafe extern "C" fn(
                key: *const ::std::os::raw::c_char,
                keylen: usize,
                value: *mut ::std::os::raw::c_void,
                user: *mut ::std::os::raw::c_void,
            ),
        >,
        user: *mut ::std::os::raw::c_void,
    ) {
        (self
            .HashTableEnumerateBinary
            .as_ref()
            .expect("Expected function, got error."))(arg1, handler, user)
    }
    pub unsafe fn HashTableEnumerateCustom(
        &self,
        arg1: *const Table,
        handler: ::std::option::Option<
            unsafe extern "C" fn(
                key: *mut ::std::os::raw::c_void,
                value: *mut ::std::os::raw::c_void,
                user: *mut ::std::os::raw::c_void,
            ),
        >,
        user: *mut ::std::os::raw::c_void,
    ) {
        (self
            .HashTableEnumerateCustom
            .as_ref()
            .expect("Expected function, got error."))(arg1, handler, user)
    }
    pub unsafe fn HashTableSearch(
        &self,
        table: *const Table,
        predicate: ::std::option::Option<
            unsafe extern "C" fn(
                key: *const ::std::os::raw::c_char,
                value: *const ::std::os::raw::c_void,
                user: *const ::std::os::raw::c_void,
            ) -> bool,
        >,
        user: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char {
        (self
            .HashTableSearch
            .as_ref()
            .expect("Expected function, got error."))(table, predicate, user)
    }
    pub unsafe fn HashTableSearchPointer(
        &self,
        table: *const Table,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char {
        (self
            .HashTableSearchPointer
            .as_ref()
            .expect("Expected function, got error."))(table, value)
    }
    pub unsafe fn HashTableSearchData(
        &self,
        table: *const Table,
        value: *const ::std::os::raw::c_void,
        bytes: usize,
    ) -> *const ::std::os::raw::c_char {
        (self
            .HashTableSearchData
            .as_ref()
            .expect("Expected function, got error."))(table, value, bytes)
    }
    pub unsafe fn HashTableSearchString(
        &self,
        table: *const Table,
        value: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .HashTableSearchString
            .as_ref()
            .expect("Expected function, got error."))(table, value)
    }
    pub unsafe fn HashTableSize(&self, arg1: *const Table) -> usize {
        (self
            .HashTableSize
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn HashTableIteratorStart(
        &self,
        arg1: *const Table,
        arg2: *mut TableIterator,
    ) -> bool {
        (self
            .HashTableIteratorStart
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn HashTableIteratorNext(
        &self,
        arg1: *const Table,
        arg2: *mut TableIterator,
    ) -> bool {
        (self
            .HashTableIteratorNext
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn HashTableIteratorGetKey(
        &self,
        arg1: *const Table,
        arg2: *const TableIterator,
    ) -> *const ::std::os::raw::c_char {
        (self
            .HashTableIteratorGetKey
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn HashTableIteratorGetBinaryKey(
        &self,
        arg1: *const Table,
        arg2: *const TableIterator,
    ) -> *const ::std::os::raw::c_void {
        (self
            .HashTableIteratorGetBinaryKey
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn HashTableIteratorGetBinaryKeyLen(
        &self,
        arg1: *const Table,
        arg2: *const TableIterator,
    ) -> usize {
        (self
            .HashTableIteratorGetBinaryKeyLen
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn HashTableIteratorGetCustomKey(
        &self,
        arg1: *const Table,
        arg2: *const TableIterator,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .HashTableIteratorGetCustomKey
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn HashTableIteratorGetValue(
        &self,
        arg1: *const Table,
        arg2: *const TableIterator,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .HashTableIteratorGetValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn HashTableIteratorLookup(
        &self,
        arg1: *const Table,
        arg2: *mut TableIterator,
        key: *const ::std::os::raw::c_char,
    ) -> bool {
        (self
            .HashTableIteratorLookup
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, key)
    }
    pub unsafe fn HashTableIteratorLookupBinary(
        &self,
        arg1: *const Table,
        arg2: *mut TableIterator,
        key: *const ::std::os::raw::c_void,
        keylen: usize,
    ) -> bool {
        (self
            .HashTableIteratorLookupBinary
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, key, keylen)
    }
    pub unsafe fn HashTableIteratorLookupCustom(
        &self,
        arg1: *const Table,
        arg2: *mut TableIterator,
        key: *mut ::std::os::raw::c_void,
    ) -> bool {
        (self
            .HashTableIteratorLookupCustom
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, key)
    }
    pub unsafe fn ConfigurationInit(&self, arg1: *mut Configuration) {
        (self
            .ConfigurationInit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ConfigurationDeinit(&self, arg1: *mut Configuration) {
        (self
            .ConfigurationDeinit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ConfigurationSetValue(
        &self,
        arg1: *mut Configuration,
        section: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) {
        (self
            .ConfigurationSetValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, section, key, value)
    }
    pub unsafe fn ConfigurationSetIntValue(
        &self,
        arg1: *mut Configuration,
        section: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) {
        (self
            .ConfigurationSetIntValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, section, key, value)
    }
    pub unsafe fn ConfigurationSetUIntValue(
        &self,
        arg1: *mut Configuration,
        section: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_uint,
    ) {
        (self
            .ConfigurationSetUIntValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, section, key, value)
    }
    pub unsafe fn ConfigurationSetFloatValue(
        &self,
        arg1: *mut Configuration,
        section: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        value: f32,
    ) {
        (self
            .ConfigurationSetFloatValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, section, key, value)
    }
    pub unsafe fn ConfigurationHasSection(
        &self,
        arg1: *const Configuration,
        section: *const ::std::os::raw::c_char,
    ) -> bool {
        (self
            .ConfigurationHasSection
            .as_ref()
            .expect("Expected function, got error."))(arg1, section)
    }
    pub unsafe fn ConfigurationDeleteSection(
        &self,
        arg1: *mut Configuration,
        section: *const ::std::os::raw::c_char,
    ) {
        (self
            .ConfigurationDeleteSection
            .as_ref()
            .expect("Expected function, got error."))(arg1, section)
    }
    pub unsafe fn ConfigurationGetValue(
        &self,
        arg1: *const Configuration,
        section: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .ConfigurationGetValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, section, key)
    }
    pub unsafe fn ConfigurationClearValue(
        &self,
        arg1: *mut Configuration,
        section: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
    ) {
        (self
            .ConfigurationClearValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, section, key)
    }
    pub unsafe fn ConfigurationRead(
        &self,
        arg1: *mut Configuration,
        path: *const ::std::os::raw::c_char,
    ) -> bool {
        (self
            .ConfigurationRead
            .as_ref()
            .expect("Expected function, got error."))(arg1, path)
    }
    pub unsafe fn ConfigurationReadVFile(&self, arg1: *mut Configuration, vf: *mut VFile) -> bool {
        (self
            .ConfigurationReadVFile
            .as_ref()
            .expect("Expected function, got error."))(arg1, vf)
    }
    pub unsafe fn ConfigurationWrite(
        &self,
        arg1: *const Configuration,
        path: *const ::std::os::raw::c_char,
    ) -> bool {
        (self
            .ConfigurationWrite
            .as_ref()
            .expect("Expected function, got error."))(arg1, path)
    }
    pub unsafe fn ConfigurationWriteSection(
        &self,
        arg1: *const Configuration,
        path: *const ::std::os::raw::c_char,
        section: *const ::std::os::raw::c_char,
    ) -> bool {
        (self
            .ConfigurationWriteSection
            .as_ref()
            .expect("Expected function, got error."))(arg1, path, section)
    }
    pub unsafe fn ConfigurationWriteVFile(
        &self,
        arg1: *const Configuration,
        vf: *mut VFile,
    ) -> bool {
        (self
            .ConfigurationWriteVFile
            .as_ref()
            .expect("Expected function, got error."))(arg1, vf)
    }
    pub unsafe fn ConfigurationEnumerateSections(
        &self,
        configuration: *const Configuration,
        handler: ::std::option::Option<
            unsafe extern "C" fn(
                sectionName: *const ::std::os::raw::c_char,
                user: *mut ::std::os::raw::c_void,
            ),
        >,
        user: *mut ::std::os::raw::c_void,
    ) {
        (self
            .ConfigurationEnumerateSections
            .as_ref()
            .expect("Expected function, got error."))(configuration, handler, user)
    }
    pub unsafe fn ConfigurationEnumerate(
        &self,
        configuration: *const Configuration,
        section: *const ::std::os::raw::c_char,
        handler: ::std::option::Option<
            unsafe extern "C" fn(
                key: *const ::std::os::raw::c_char,
                value: *const ::std::os::raw::c_char,
                user: *mut ::std::os::raw::c_void,
            ),
        >,
        user: *mut ::std::os::raw::c_void,
    ) {
        (self
            .ConfigurationEnumerate
            .as_ref()
            .expect("Expected function, got error."))(configuration, section, handler, user)
    }
    pub unsafe fn mCoreConfigInit(
        &self,
        arg1: *mut mCoreConfig,
        port: *const ::std::os::raw::c_char,
    ) {
        (self
            .mCoreConfigInit
            .as_ref()
            .expect("Expected function, got error."))(arg1, port)
    }
    pub unsafe fn mCoreConfigDeinit(&self, arg1: *mut mCoreConfig) {
        (self
            .mCoreConfigDeinit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mCoreConfigLoad(&self, arg1: *mut mCoreConfig) -> bool {
        (self
            .mCoreConfigLoad
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mCoreConfigSave(&self, arg1: *const mCoreConfig) -> bool {
        (self
            .mCoreConfigSave
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mCoreConfigLoadPath(
        &self,
        arg1: *mut mCoreConfig,
        path: *const ::std::os::raw::c_char,
    ) -> bool {
        (self
            .mCoreConfigLoadPath
            .as_ref()
            .expect("Expected function, got error."))(arg1, path)
    }
    pub unsafe fn mCoreConfigSavePath(
        &self,
        arg1: *const mCoreConfig,
        path: *const ::std::os::raw::c_char,
    ) -> bool {
        (self
            .mCoreConfigSavePath
            .as_ref()
            .expect("Expected function, got error."))(arg1, path)
    }
    pub unsafe fn mCoreConfigLoadVFile(&self, arg1: *mut mCoreConfig, vf: *mut VFile) -> bool {
        (self
            .mCoreConfigLoadVFile
            .as_ref()
            .expect("Expected function, got error."))(arg1, vf)
    }
    pub unsafe fn mCoreConfigSaveVFile(&self, arg1: *const mCoreConfig, vf: *mut VFile) -> bool {
        (self
            .mCoreConfigSaveVFile
            .as_ref()
            .expect("Expected function, got error."))(arg1, vf)
    }
    pub unsafe fn mCoreConfigMakePortable(
        &self,
        arg1: *const mCoreConfig,
        path: *const ::std::os::raw::c_char,
    ) {
        (self
            .mCoreConfigMakePortable
            .as_ref()
            .expect("Expected function, got error."))(arg1, path)
    }
    pub unsafe fn mCoreConfigDirectory(&self, out: *mut ::std::os::raw::c_char, outLength: usize) {
        (self
            .mCoreConfigDirectory
            .as_ref()
            .expect("Expected function, got error."))(out, outLength)
    }
    pub unsafe fn mCoreConfigPortableIniPath(
        &self,
        out: *mut ::std::os::raw::c_char,
        outLength: usize,
    ) {
        (self
            .mCoreConfigPortableIniPath
            .as_ref()
            .expect("Expected function, got error."))(out, outLength)
    }
    pub unsafe fn mCoreConfigPortablePath(
        &self,
        out: *mut ::std::os::raw::c_char,
        outLength: usize,
    ) {
        (self
            .mCoreConfigPortablePath
            .as_ref()
            .expect("Expected function, got error."))(out, outLength)
    }
    pub unsafe fn mCoreConfigIsPortable(&self) -> bool {
        (self
            .mCoreConfigIsPortable
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mCoreConfigGetValue(
        &self,
        arg1: *const mCoreConfig,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .mCoreConfigGetValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key)
    }
    pub unsafe fn mCoreConfigGetBoolValue(
        &self,
        arg1: *const mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: *mut bool,
    ) -> bool {
        (self
            .mCoreConfigGetBoolValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigGetIntValue(
        &self,
        arg1: *const mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_int,
    ) -> bool {
        (self
            .mCoreConfigGetIntValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigGetUIntValue(
        &self,
        arg1: *const mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_uint,
    ) -> bool {
        (self
            .mCoreConfigGetUIntValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigGetFloatValue(
        &self,
        arg1: *const mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: *mut f32,
    ) -> bool {
        (self
            .mCoreConfigGetFloatValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigSetValue(
        &self,
        arg1: *mut mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) {
        (self
            .mCoreConfigSetValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigSetIntValue(
        &self,
        arg1: *mut mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) {
        (self
            .mCoreConfigSetIntValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigSetUIntValue(
        &self,
        arg1: *mut mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_uint,
    ) {
        (self
            .mCoreConfigSetUIntValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigSetFloatValue(
        &self,
        arg1: *mut mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: f32,
    ) {
        (self
            .mCoreConfigSetFloatValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigSetDefaultValue(
        &self,
        arg1: *mut mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) {
        (self
            .mCoreConfigSetDefaultValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigSetDefaultIntValue(
        &self,
        arg1: *mut mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) {
        (self
            .mCoreConfigSetDefaultIntValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigSetDefaultUIntValue(
        &self,
        arg1: *mut mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_uint,
    ) {
        (self
            .mCoreConfigSetDefaultUIntValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigSetDefaultFloatValue(
        &self,
        arg1: *mut mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: f32,
    ) {
        (self
            .mCoreConfigSetDefaultFloatValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigSetOverrideValue(
        &self,
        arg1: *mut mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) {
        (self
            .mCoreConfigSetOverrideValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigSetOverrideIntValue(
        &self,
        arg1: *mut mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) {
        (self
            .mCoreConfigSetOverrideIntValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigSetOverrideUIntValue(
        &self,
        arg1: *mut mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_uint,
    ) {
        (self
            .mCoreConfigSetOverrideUIntValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigSetOverrideFloatValue(
        &self,
        arg1: *mut mCoreConfig,
        key: *const ::std::os::raw::c_char,
        value: f32,
    ) {
        (self
            .mCoreConfigSetOverrideFloatValue
            .as_ref()
            .expect("Expected function, got error."))(arg1, key, value)
    }
    pub unsafe fn mCoreConfigCopyValue(
        &self,
        config: *mut mCoreConfig,
        src: *const mCoreConfig,
        key: *const ::std::os::raw::c_char,
    ) {
        (self
            .mCoreConfigCopyValue
            .as_ref()
            .expect("Expected function, got error."))(config, src, key)
    }
    pub unsafe fn mCoreConfigMap(&self, config: *const mCoreConfig, opts: *mut mCoreOptions) {
        (self
            .mCoreConfigMap
            .as_ref()
            .expect("Expected function, got error."))(config, opts)
    }
    pub unsafe fn mCoreConfigLoadDefaults(
        &self,
        config: *mut mCoreConfig,
        opts: *const mCoreOptions,
    ) {
        (self
            .mCoreConfigLoadDefaults
            .as_ref()
            .expect("Expected function, got error."))(config, opts)
    }
    pub unsafe fn mCoreConfigEnumerate(
        &self,
        config: *const mCoreConfig,
        prefix: *const ::std::os::raw::c_char,
        handler: ::std::option::Option<
            unsafe extern "C" fn(
                key: *const ::std::os::raw::c_char,
                value: *const ::std::os::raw::c_char,
                type_: mCoreConfigLevel,
                user: *mut ::std::os::raw::c_void,
            ),
        >,
        user: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mCoreConfigEnumerate
            .as_ref()
            .expect("Expected function, got error."))(config, prefix, handler, user)
    }
    pub unsafe fn mCoreConfigGetInput(&self, arg1: *mut mCoreConfig) -> *mut Configuration {
        (self
            .mCoreConfigGetInput
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mCoreConfigGetOverrides(&self, arg1: *mut mCoreConfig) -> *mut Configuration {
        (self
            .mCoreConfigGetOverrides
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mCoreConfigGetOverridesConst(
        &self,
        arg1: *const mCoreConfig,
    ) -> *const Configuration {
        (self
            .mCoreConfigGetOverridesConst
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mCoreConfigFreeOpts(&self, opts: *mut mCoreOptions) {
        (self
            .mCoreConfigFreeOpts
            .as_ref()
            .expect("Expected function, got error."))(opts)
    }
    pub unsafe fn mDirectorySetInit(&self, dirs: *mut mDirectorySet) {
        (self
            .mDirectorySetInit
            .as_ref()
            .expect("Expected function, got error."))(dirs)
    }
    pub unsafe fn mDirectorySetDeinit(&self, dirs: *mut mDirectorySet) {
        (self
            .mDirectorySetDeinit
            .as_ref()
            .expect("Expected function, got error."))(dirs)
    }
    pub unsafe fn mDirectorySetAttachBase(&self, dirs: *mut mDirectorySet, base: *mut VDir) {
        (self
            .mDirectorySetAttachBase
            .as_ref()
            .expect("Expected function, got error."))(dirs, base)
    }
    pub unsafe fn mDirectorySetDetachBase(&self, dirs: *mut mDirectorySet) {
        (self
            .mDirectorySetDetachBase
            .as_ref()
            .expect("Expected function, got error."))(dirs)
    }
    pub unsafe fn mDirectorySetOpenPath(
        &self,
        dirs: *mut mDirectorySet,
        path: *const ::std::os::raw::c_char,
        filter: ::std::option::Option<unsafe extern "C" fn(arg1: *mut VFile) -> bool>,
    ) -> *mut VFile {
        (self
            .mDirectorySetOpenPath
            .as_ref()
            .expect("Expected function, got error."))(dirs, path, filter)
    }
    pub unsafe fn mDirectorySetOpenSuffix(
        &self,
        dirs: *mut mDirectorySet,
        dir: *mut VDir,
        suffix: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> *mut VFile {
        (self
            .mDirectorySetOpenSuffix
            .as_ref()
            .expect("Expected function, got error."))(dirs, dir, suffix, mode)
    }
    pub unsafe fn mDirectorySetMapOptions(
        &self,
        dirs: *mut mDirectorySet,
        opts: *const mCoreOptions,
    ) {
        (self
            .mDirectorySetMapOptions
            .as_ref()
            .expect("Expected function, got error."))(dirs, opts)
    }
    pub unsafe fn mInputMapInit(&self, arg1: *mut mInputMap, info: *const mInputPlatformInfo) {
        (self
            .mInputMapInit
            .as_ref()
            .expect("Expected function, got error."))(arg1, info)
    }
    pub unsafe fn mInputMapDeinit(&self, arg1: *mut mInputMap) {
        (self
            .mInputMapDeinit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mInputMapKey(
        &self,
        arg1: *const mInputMap,
        type_: u32,
        key: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .mInputMapKey
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, key)
    }
    pub unsafe fn mInputMapKeyBits(
        &self,
        map: *const mInputMap,
        type_: u32,
        bits: u32,
        offset: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .mInputMapKeyBits
            .as_ref()
            .expect("Expected function, got error."))(map, type_, bits, offset)
    }
    pub unsafe fn mInputBindKey(
        &self,
        arg1: *mut mInputMap,
        type_: u32,
        key: ::std::os::raw::c_int,
        input: ::std::os::raw::c_int,
    ) {
        (self
            .mInputBindKey
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, key, input)
    }
    pub unsafe fn mInputQueryBinding(
        &self,
        arg1: *const mInputMap,
        type_: u32,
        input: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .mInputQueryBinding
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, input)
    }
    pub unsafe fn mInputUnbindKey(
        &self,
        arg1: *mut mInputMap,
        type_: u32,
        input: ::std::os::raw::c_int,
    ) {
        (self
            .mInputUnbindKey
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, input)
    }
    pub unsafe fn mInputUnbindAllKeys(&self, arg1: *mut mInputMap, type_: u32) {
        (self
            .mInputUnbindAllKeys
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_)
    }
    pub unsafe fn mInputMapAxis(
        &self,
        arg1: *const mInputMap,
        type_: u32,
        axis: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .mInputMapAxis
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, axis, value)
    }
    pub unsafe fn mInputClearAxis(
        &self,
        arg1: *const mInputMap,
        type_: u32,
        axis: ::std::os::raw::c_int,
        keys: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .mInputClearAxis
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, axis, keys)
    }
    pub unsafe fn mInputBindAxis(
        &self,
        arg1: *mut mInputMap,
        type_: u32,
        axis: ::std::os::raw::c_int,
        description: *const mInputAxis,
    ) {
        (self
            .mInputBindAxis
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, axis, description)
    }
    pub unsafe fn mInputUnbindAxis(
        &self,
        arg1: *mut mInputMap,
        type_: u32,
        axis: ::std::os::raw::c_int,
    ) {
        (self
            .mInputUnbindAxis
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, axis)
    }
    pub unsafe fn mInputUnbindAllAxes(&self, arg1: *mut mInputMap, type_: u32) {
        (self
            .mInputUnbindAllAxes
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_)
    }
    pub unsafe fn mInputQueryAxis(
        &self,
        arg1: *const mInputMap,
        type_: u32,
        axis: ::std::os::raw::c_int,
    ) -> *const mInputAxis {
        (self
            .mInputQueryAxis
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, axis)
    }
    pub unsafe fn mInputEnumerateAxes(
        &self,
        arg1: *const mInputMap,
        type_: u32,
        handler: ::std::option::Option<
            unsafe extern "C" fn(
                axis: ::std::os::raw::c_int,
                description: *const mInputAxis,
                user: *mut ::std::os::raw::c_void,
            ),
        >,
        user: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mInputEnumerateAxes
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, handler, user)
    }
    pub unsafe fn mInputMapHat(
        &self,
        arg1: *const mInputMap,
        type_: u32,
        id: ::std::os::raw::c_int,
        direction: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .mInputMapHat
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, id, direction)
    }
    pub unsafe fn mInputBindHat(
        &self,
        arg1: *mut mInputMap,
        type_: u32,
        id: ::std::os::raw::c_int,
        bindings: *const mInputHatBindings,
    ) {
        (self
            .mInputBindHat
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, id, bindings)
    }
    pub unsafe fn mInputQueryHat(
        &self,
        arg1: *const mInputMap,
        type_: u32,
        id: ::std::os::raw::c_int,
        bindings: *mut mInputHatBindings,
    ) -> bool {
        (self
            .mInputQueryHat
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, id, bindings)
    }
    pub unsafe fn mInputUnbindHat(
        &self,
        arg1: *mut mInputMap,
        type_: u32,
        id: ::std::os::raw::c_int,
    ) {
        (self
            .mInputUnbindHat
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, id)
    }
    pub unsafe fn mInputUnbindAllHats(&self, arg1: *mut mInputMap, type_: u32) {
        (self
            .mInputUnbindAllHats
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_)
    }
    pub unsafe fn mInputEnumerateHats(
        &self,
        arg1: *const mInputMap,
        type_: u32,
        handler: ::std::option::Option<
            unsafe extern "C" fn(
                hat: ::std::os::raw::c_int,
                bindings: *const mInputHatBindings,
                user: *mut ::std::os::raw::c_void,
            ),
        >,
        user: *mut ::std::os::raw::c_void,
    ) {
        (self
            .mInputEnumerateHats
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, handler, user)
    }
    pub unsafe fn mInputMapLoad(
        &self,
        arg1: *mut mInputMap,
        type_: u32,
        arg2: *const Configuration,
    ) -> bool {
        (self
            .mInputMapLoad
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, arg2)
    }
    pub unsafe fn mInputMapSave(
        &self,
        arg1: *const mInputMap,
        type_: u32,
        arg2: *mut Configuration,
    ) {
        (self
            .mInputMapSave
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, arg2)
    }
    pub unsafe fn mInputProfileLoad(
        &self,
        arg1: *mut mInputMap,
        type_: u32,
        arg2: *const Configuration,
        profile: *const ::std::os::raw::c_char,
    ) -> bool {
        (self
            .mInputProfileLoad
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, arg2, profile)
    }
    pub unsafe fn mInputProfileSave(
        &self,
        arg1: *const mInputMap,
        type_: u32,
        arg2: *mut Configuration,
        profile: *const ::std::os::raw::c_char,
    ) {
        (self
            .mInputProfileSave
            .as_ref()
            .expect("Expected function, got error."))(arg1, type_, arg2, profile)
    }
    pub unsafe fn mInputGetPreferredDevice(
        &self,
        arg1: *const Configuration,
        platformName: *const ::std::os::raw::c_char,
        type_: u32,
        playerId: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char {
        (self
            .mInputGetPreferredDevice
            .as_ref()
            .expect("Expected function, got error."))(arg1, platformName, type_, playerId)
    }
    pub unsafe fn mInputSetPreferredDevice(
        &self,
        arg1: *mut Configuration,
        platformName: *const ::std::os::raw::c_char,
        type_: u32,
        playerId: ::std::os::raw::c_int,
        deviceName: *const ::std::os::raw::c_char,
    ) {
        (self
            .mInputSetPreferredDevice
            .as_ref()
            .expect("Expected function, got error."))(
            arg1,
            platformName,
            type_,
            playerId,
            deviceName,
        )
    }
    pub unsafe fn mInputGetCustomValue(
        &self,
        config: *const Configuration,
        platformName: *const ::std::os::raw::c_char,
        type_: u32,
        key: *const ::std::os::raw::c_char,
        profile: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .mInputGetCustomValue
            .as_ref()
            .expect("Expected function, got error."))(
            config, platformName, type_, key, profile
        )
    }
    pub unsafe fn mInputSetCustomValue(
        &self,
        config: *mut Configuration,
        platformName: *const ::std::os::raw::c_char,
        type_: u32,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        profile: *const ::std::os::raw::c_char,
    ) {
        (self
            .mInputSetCustomValue
            .as_ref()
            .expect("Expected function, got error."))(
            config,
            platformName,
            type_,
            key,
            value,
            profile,
        )
    }
    pub unsafe fn mImageCreate(
        &self,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        format: mColorFormat,
    ) -> *mut mImage {
        (self
            .mImageCreate
            .as_ref()
            .expect("Expected function, got error."))(width, height, format)
    }
    pub unsafe fn mImageCreateWithStride(
        &self,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        stride: ::std::os::raw::c_uint,
        format: mColorFormat,
    ) -> *mut mImage {
        (self
            .mImageCreateWithStride
            .as_ref()
            .expect("Expected function, got error."))(width, height, stride, format)
    }
    pub unsafe fn mImageCreateFromConstBuffer(
        &self,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        stride: ::std::os::raw::c_uint,
        format: mColorFormat,
        pixels: *const ::std::os::raw::c_void,
    ) -> *mut mImage {
        (self
            .mImageCreateFromConstBuffer
            .as_ref()
            .expect("Expected function, got error."))(width, height, stride, format, pixels)
    }
    pub unsafe fn mImageLoad(&self, path: *const ::std::os::raw::c_char) -> *mut mImage {
        (self
            .mImageLoad
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn mImageLoadVF(&self, vf: *mut VFile) -> *mut mImage {
        (self
            .mImageLoadVF
            .as_ref()
            .expect("Expected function, got error."))(vf)
    }
    pub unsafe fn mImageConvertToFormat(
        &self,
        arg1: *const mImage,
        format: mColorFormat,
    ) -> *mut mImage {
        (self
            .mImageConvertToFormat
            .as_ref()
            .expect("Expected function, got error."))(arg1, format)
    }
    pub unsafe fn mImageDestroy(&self, arg1: *mut mImage) {
        (self
            .mImageDestroy
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mImageSave(
        &self,
        arg1: *const mImage,
        path: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
    ) -> bool {
        (self
            .mImageSave
            .as_ref()
            .expect("Expected function, got error."))(arg1, path, format)
    }
    pub unsafe fn mImageSaveVF(
        &self,
        arg1: *const mImage,
        vf: *mut VFile,
        format: *const ::std::os::raw::c_char,
    ) -> bool {
        (self
            .mImageSaveVF
            .as_ref()
            .expect("Expected function, got error."))(arg1, vf, format)
    }
    pub unsafe fn mImageGetPixel(
        &self,
        image: *const mImage,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    ) -> u32 {
        (self
            .mImageGetPixel
            .as_ref()
            .expect("Expected function, got error."))(image, x, y)
    }
    pub unsafe fn mImageGetPixelRaw(
        &self,
        image: *const mImage,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    ) -> u32 {
        (self
            .mImageGetPixelRaw
            .as_ref()
            .expect("Expected function, got error."))(image, x, y)
    }
    pub unsafe fn mImageSetPixel(
        &self,
        image: *mut mImage,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
        color: u32,
    ) {
        (self
            .mImageSetPixel
            .as_ref()
            .expect("Expected function, got error."))(image, x, y, color)
    }
    pub unsafe fn mImageSetPixelRaw(
        &self,
        image: *mut mImage,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
        color: u32,
    ) {
        (self
            .mImageSetPixelRaw
            .as_ref()
            .expect("Expected function, got error."))(image, x, y, color)
    }
    pub unsafe fn mImageSetPaletteSize(&self, image: *mut mImage, count: ::std::os::raw::c_uint) {
        (self
            .mImageSetPaletteSize
            .as_ref()
            .expect("Expected function, got error."))(image, count)
    }
    pub unsafe fn mImageSetPaletteEntry(
        &self,
        image: *mut mImage,
        index: ::std::os::raw::c_uint,
        color: u32,
    ) {
        (self
            .mImageSetPaletteEntry
            .as_ref()
            .expect("Expected function, got error."))(image, index, color)
    }
    pub unsafe fn mImageBlit(
        &self,
        image: *mut mImage,
        source: *const mImage,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) {
        (self
            .mImageBlit
            .as_ref()
            .expect("Expected function, got error."))(image, source, x, y)
    }
    pub unsafe fn mImageComposite(
        &self,
        image: *mut mImage,
        source: *const mImage,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) {
        (self
            .mImageComposite
            .as_ref()
            .expect("Expected function, got error."))(image, source, x, y)
    }
    pub unsafe fn mImageCompositeWithAlpha(
        &self,
        image: *mut mImage,
        source: *const mImage,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        alpha: f32,
    ) {
        (self
            .mImageCompositeWithAlpha
            .as_ref()
            .expect("Expected function, got error."))(image, source, x, y, alpha)
    }
    pub unsafe fn mPainterInit(&self, arg1: *mut mPainter, backing: *mut mImage) {
        (self
            .mPainterInit
            .as_ref()
            .expect("Expected function, got error."))(arg1, backing)
    }
    pub unsafe fn mPainterDrawRectangle(
        &self,
        arg1: *mut mPainter,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        (self
            .mPainterDrawRectangle
            .as_ref()
            .expect("Expected function, got error."))(arg1, x, y, width, height)
    }
    pub unsafe fn mPainterDrawLine(
        &self,
        arg1: *mut mPainter,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
    ) {
        (self
            .mPainterDrawLine
            .as_ref()
            .expect("Expected function, got error."))(arg1, x1, y1, x2, y2)
    }
    pub unsafe fn mPainterDrawCircle(
        &self,
        arg1: *mut mPainter,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        diameter: ::std::os::raw::c_int,
    ) {
        (self
            .mPainterDrawCircle
            .as_ref()
            .expect("Expected function, got error."))(arg1, x, y, diameter)
    }
    pub unsafe fn mColorConvert(&self, color: u32, from: mColorFormat, to: mColorFormat) -> u32 {
        (self
            .mColorConvert
            .as_ref()
            .expect("Expected function, got error."))(color, from, to)
    }
    pub unsafe fn mImageColorConvert(
        &self,
        color: u32,
        from: *const mImage,
        to: mColorFormat,
    ) -> u32 {
        (self
            .mImageColorConvert
            .as_ref()
            .expect("Expected function, got error."))(color, from, to)
    }
    pub unsafe fn IntListInit(&self, vector: *mut IntList, capacity: usize) {
        (self
            .IntListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn IntListDeinit(&self, vector: *mut IntList) {
        (self
            .IntListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn IntListGetPointer(
        &self,
        vector: *mut IntList,
        location: usize,
    ) -> *mut ::std::os::raw::c_int {
        (self
            .IntListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn IntListGetConstPointer(
        &self,
        vector: *const IntList,
        location: usize,
    ) -> *const ::std::os::raw::c_int {
        (self
            .IntListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn IntListAppend(&self, vector: *mut IntList) -> *mut ::std::os::raw::c_int {
        (self
            .IntListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn IntListClear(&self, vector: *mut IntList) {
        (self
            .IntListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn IntListResize(&self, vector: *mut IntList, change: isize) {
        (self
            .IntListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn IntListShift(&self, vector: *mut IntList, location: usize, difference: usize) {
        (self
            .IntListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn IntListUnshift(&self, vector: *mut IntList, location: usize, difference: usize) {
        (self
            .IntListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn IntListEnsureCapacity(&self, vector: *mut IntList, capacity: usize) {
        (self
            .IntListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn IntListSize(&self, vector: *const IntList) -> usize {
        (self
            .IntListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn IntListIndex(
        &self,
        vector: *const IntList,
        member: *const ::std::os::raw::c_int,
    ) -> usize {
        (self
            .IntListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn IntListCopy(&self, dest: *mut IntList, src: *const IntList) {
        (self
            .IntListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn SInt8ListInit(&self, vector: *mut SInt8List, capacity: usize) {
        (self
            .SInt8ListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn SInt8ListDeinit(&self, vector: *mut SInt8List) {
        (self
            .SInt8ListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SInt8ListGetPointer(&self, vector: *mut SInt8List, location: usize) -> *mut i8 {
        (self
            .SInt8ListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn SInt8ListGetConstPointer(
        &self,
        vector: *const SInt8List,
        location: usize,
    ) -> *const i8 {
        (self
            .SInt8ListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn SInt8ListAppend(&self, vector: *mut SInt8List) -> *mut i8 {
        (self
            .SInt8ListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SInt8ListClear(&self, vector: *mut SInt8List) {
        (self
            .SInt8ListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SInt8ListResize(&self, vector: *mut SInt8List, change: isize) {
        (self
            .SInt8ListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn SInt8ListShift(
        &self,
        vector: *mut SInt8List,
        location: usize,
        difference: usize,
    ) {
        (self
            .SInt8ListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn SInt8ListUnshift(
        &self,
        vector: *mut SInt8List,
        location: usize,
        difference: usize,
    ) {
        (self
            .SInt8ListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn SInt8ListEnsureCapacity(&self, vector: *mut SInt8List, capacity: usize) {
        (self
            .SInt8ListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn SInt8ListSize(&self, vector: *const SInt8List) -> usize {
        (self
            .SInt8ListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SInt8ListIndex(&self, vector: *const SInt8List, member: *const i8) -> usize {
        (self
            .SInt8ListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn SInt8ListCopy(&self, dest: *mut SInt8List, src: *const SInt8List) {
        (self
            .SInt8ListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn SInt16ListInit(&self, vector: *mut SInt16List, capacity: usize) {
        (self
            .SInt16ListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn SInt16ListDeinit(&self, vector: *mut SInt16List) {
        (self
            .SInt16ListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SInt16ListGetPointer(
        &self,
        vector: *mut SInt16List,
        location: usize,
    ) -> *mut i16 {
        (self
            .SInt16ListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn SInt16ListGetConstPointer(
        &self,
        vector: *const SInt16List,
        location: usize,
    ) -> *const i16 {
        (self
            .SInt16ListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn SInt16ListAppend(&self, vector: *mut SInt16List) -> *mut i16 {
        (self
            .SInt16ListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SInt16ListClear(&self, vector: *mut SInt16List) {
        (self
            .SInt16ListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SInt16ListResize(&self, vector: *mut SInt16List, change: isize) {
        (self
            .SInt16ListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn SInt16ListShift(
        &self,
        vector: *mut SInt16List,
        location: usize,
        difference: usize,
    ) {
        (self
            .SInt16ListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn SInt16ListUnshift(
        &self,
        vector: *mut SInt16List,
        location: usize,
        difference: usize,
    ) {
        (self
            .SInt16ListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn SInt16ListEnsureCapacity(&self, vector: *mut SInt16List, capacity: usize) {
        (self
            .SInt16ListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn SInt16ListSize(&self, vector: *const SInt16List) -> usize {
        (self
            .SInt16ListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SInt16ListIndex(&self, vector: *const SInt16List, member: *const i16) -> usize {
        (self
            .SInt16ListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn SInt16ListCopy(&self, dest: *mut SInt16List, src: *const SInt16List) {
        (self
            .SInt16ListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn SInt32ListInit(&self, vector: *mut SInt32List, capacity: usize) {
        (self
            .SInt32ListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn SInt32ListDeinit(&self, vector: *mut SInt32List) {
        (self
            .SInt32ListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SInt32ListGetPointer(
        &self,
        vector: *mut SInt32List,
        location: usize,
    ) -> *mut i32 {
        (self
            .SInt32ListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn SInt32ListGetConstPointer(
        &self,
        vector: *const SInt32List,
        location: usize,
    ) -> *const i32 {
        (self
            .SInt32ListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn SInt32ListAppend(&self, vector: *mut SInt32List) -> *mut i32 {
        (self
            .SInt32ListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SInt32ListClear(&self, vector: *mut SInt32List) {
        (self
            .SInt32ListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SInt32ListResize(&self, vector: *mut SInt32List, change: isize) {
        (self
            .SInt32ListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn SInt32ListShift(
        &self,
        vector: *mut SInt32List,
        location: usize,
        difference: usize,
    ) {
        (self
            .SInt32ListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn SInt32ListUnshift(
        &self,
        vector: *mut SInt32List,
        location: usize,
        difference: usize,
    ) {
        (self
            .SInt32ListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn SInt32ListEnsureCapacity(&self, vector: *mut SInt32List, capacity: usize) {
        (self
            .SInt32ListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn SInt32ListSize(&self, vector: *const SInt32List) -> usize {
        (self
            .SInt32ListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SInt32ListIndex(&self, vector: *const SInt32List, member: *const i32) -> usize {
        (self
            .SInt32ListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn SInt32ListCopy(&self, dest: *mut SInt32List, src: *const SInt32List) {
        (self
            .SInt32ListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn SIntPtrListInit(&self, vector: *mut SIntPtrList, capacity: usize) {
        (self
            .SIntPtrListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn SIntPtrListDeinit(&self, vector: *mut SIntPtrList) {
        (self
            .SIntPtrListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SIntPtrListGetPointer(
        &self,
        vector: *mut SIntPtrList,
        location: usize,
    ) -> *mut isize {
        (self
            .SIntPtrListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn SIntPtrListGetConstPointer(
        &self,
        vector: *const SIntPtrList,
        location: usize,
    ) -> *const isize {
        (self
            .SIntPtrListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn SIntPtrListAppend(&self, vector: *mut SIntPtrList) -> *mut isize {
        (self
            .SIntPtrListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SIntPtrListClear(&self, vector: *mut SIntPtrList) {
        (self
            .SIntPtrListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SIntPtrListResize(&self, vector: *mut SIntPtrList, change: isize) {
        (self
            .SIntPtrListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn SIntPtrListShift(
        &self,
        vector: *mut SIntPtrList,
        location: usize,
        difference: usize,
    ) {
        (self
            .SIntPtrListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn SIntPtrListUnshift(
        &self,
        vector: *mut SIntPtrList,
        location: usize,
        difference: usize,
    ) {
        (self
            .SIntPtrListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn SIntPtrListEnsureCapacity(&self, vector: *mut SIntPtrList, capacity: usize) {
        (self
            .SIntPtrListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn SIntPtrListSize(&self, vector: *const SIntPtrList) -> usize {
        (self
            .SIntPtrListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn SIntPtrListIndex(
        &self,
        vector: *const SIntPtrList,
        member: *const isize,
    ) -> usize {
        (self
            .SIntPtrListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn SIntPtrListCopy(&self, dest: *mut SIntPtrList, src: *const SIntPtrList) {
        (self
            .SIntPtrListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn UInt8ListInit(&self, vector: *mut UInt8List, capacity: usize) {
        (self
            .UInt8ListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn UInt8ListDeinit(&self, vector: *mut UInt8List) {
        (self
            .UInt8ListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UInt8ListGetPointer(&self, vector: *mut UInt8List, location: usize) -> *mut u8 {
        (self
            .UInt8ListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn UInt8ListGetConstPointer(
        &self,
        vector: *const UInt8List,
        location: usize,
    ) -> *const u8 {
        (self
            .UInt8ListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn UInt8ListAppend(&self, vector: *mut UInt8List) -> *mut u8 {
        (self
            .UInt8ListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UInt8ListClear(&self, vector: *mut UInt8List) {
        (self
            .UInt8ListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UInt8ListResize(&self, vector: *mut UInt8List, change: isize) {
        (self
            .UInt8ListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn UInt8ListShift(
        &self,
        vector: *mut UInt8List,
        location: usize,
        difference: usize,
    ) {
        (self
            .UInt8ListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn UInt8ListUnshift(
        &self,
        vector: *mut UInt8List,
        location: usize,
        difference: usize,
    ) {
        (self
            .UInt8ListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn UInt8ListEnsureCapacity(&self, vector: *mut UInt8List, capacity: usize) {
        (self
            .UInt8ListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn UInt8ListSize(&self, vector: *const UInt8List) -> usize {
        (self
            .UInt8ListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UInt8ListIndex(&self, vector: *const UInt8List, member: *const u8) -> usize {
        (self
            .UInt8ListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn UInt8ListCopy(&self, dest: *mut UInt8List, src: *const UInt8List) {
        (self
            .UInt8ListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn UInt16ListInit(&self, vector: *mut UInt16List, capacity: usize) {
        (self
            .UInt16ListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn UInt16ListDeinit(&self, vector: *mut UInt16List) {
        (self
            .UInt16ListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UInt16ListGetPointer(
        &self,
        vector: *mut UInt16List,
        location: usize,
    ) -> *mut u16 {
        (self
            .UInt16ListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn UInt16ListGetConstPointer(
        &self,
        vector: *const UInt16List,
        location: usize,
    ) -> *const u16 {
        (self
            .UInt16ListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn UInt16ListAppend(&self, vector: *mut UInt16List) -> *mut u16 {
        (self
            .UInt16ListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UInt16ListClear(&self, vector: *mut UInt16List) {
        (self
            .UInt16ListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UInt16ListResize(&self, vector: *mut UInt16List, change: isize) {
        (self
            .UInt16ListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn UInt16ListShift(
        &self,
        vector: *mut UInt16List,
        location: usize,
        difference: usize,
    ) {
        (self
            .UInt16ListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn UInt16ListUnshift(
        &self,
        vector: *mut UInt16List,
        location: usize,
        difference: usize,
    ) {
        (self
            .UInt16ListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn UInt16ListEnsureCapacity(&self, vector: *mut UInt16List, capacity: usize) {
        (self
            .UInt16ListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn UInt16ListSize(&self, vector: *const UInt16List) -> usize {
        (self
            .UInt16ListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UInt16ListIndex(&self, vector: *const UInt16List, member: *const u16) -> usize {
        (self
            .UInt16ListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn UInt16ListCopy(&self, dest: *mut UInt16List, src: *const UInt16List) {
        (self
            .UInt16ListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn UInt32ListInit(&self, vector: *mut UInt32List, capacity: usize) {
        (self
            .UInt32ListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn UInt32ListDeinit(&self, vector: *mut UInt32List) {
        (self
            .UInt32ListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UInt32ListGetPointer(
        &self,
        vector: *mut UInt32List,
        location: usize,
    ) -> *mut u32 {
        (self
            .UInt32ListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn UInt32ListGetConstPointer(
        &self,
        vector: *const UInt32List,
        location: usize,
    ) -> *const u32 {
        (self
            .UInt32ListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn UInt32ListAppend(&self, vector: *mut UInt32List) -> *mut u32 {
        (self
            .UInt32ListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UInt32ListClear(&self, vector: *mut UInt32List) {
        (self
            .UInt32ListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UInt32ListResize(&self, vector: *mut UInt32List, change: isize) {
        (self
            .UInt32ListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn UInt32ListShift(
        &self,
        vector: *mut UInt32List,
        location: usize,
        difference: usize,
    ) {
        (self
            .UInt32ListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn UInt32ListUnshift(
        &self,
        vector: *mut UInt32List,
        location: usize,
        difference: usize,
    ) {
        (self
            .UInt32ListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn UInt32ListEnsureCapacity(&self, vector: *mut UInt32List, capacity: usize) {
        (self
            .UInt32ListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn UInt32ListSize(&self, vector: *const UInt32List) -> usize {
        (self
            .UInt32ListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UInt32ListIndex(&self, vector: *const UInt32List, member: *const u32) -> usize {
        (self
            .UInt32ListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn UInt32ListCopy(&self, dest: *mut UInt32List, src: *const UInt32List) {
        (self
            .UInt32ListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn UIntPtrListInit(&self, vector: *mut UIntPtrList, capacity: usize) {
        (self
            .UIntPtrListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn UIntPtrListDeinit(&self, vector: *mut UIntPtrList) {
        (self
            .UIntPtrListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UIntPtrListGetPointer(
        &self,
        vector: *mut UIntPtrList,
        location: usize,
    ) -> *mut usize {
        (self
            .UIntPtrListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn UIntPtrListGetConstPointer(
        &self,
        vector: *const UIntPtrList,
        location: usize,
    ) -> *const usize {
        (self
            .UIntPtrListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn UIntPtrListAppend(&self, vector: *mut UIntPtrList) -> *mut usize {
        (self
            .UIntPtrListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UIntPtrListClear(&self, vector: *mut UIntPtrList) {
        (self
            .UIntPtrListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UIntPtrListResize(&self, vector: *mut UIntPtrList, change: isize) {
        (self
            .UIntPtrListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn UIntPtrListShift(
        &self,
        vector: *mut UIntPtrList,
        location: usize,
        difference: usize,
    ) {
        (self
            .UIntPtrListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn UIntPtrListUnshift(
        &self,
        vector: *mut UIntPtrList,
        location: usize,
        difference: usize,
    ) {
        (self
            .UIntPtrListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn UIntPtrListEnsureCapacity(&self, vector: *mut UIntPtrList, capacity: usize) {
        (self
            .UIntPtrListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn UIntPtrListSize(&self, vector: *const UIntPtrList) -> usize {
        (self
            .UIntPtrListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn UIntPtrListIndex(
        &self,
        vector: *const UIntPtrList,
        member: *const usize,
    ) -> usize {
        (self
            .UIntPtrListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn UIntPtrListCopy(&self, dest: *mut UIntPtrList, src: *const UIntPtrList) {
        (self
            .UIntPtrListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn StringListInit(&self, vector: *mut StringList, capacity: usize) {
        (self
            .StringListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn StringListDeinit(&self, vector: *mut StringList) {
        (self
            .StringListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn StringListGetPointer(
        &self,
        vector: *mut StringList,
        location: usize,
    ) -> *mut *mut ::std::os::raw::c_char {
        (self
            .StringListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn StringListGetConstPointer(
        &self,
        vector: *const StringList,
        location: usize,
    ) -> *const *mut ::std::os::raw::c_char {
        (self
            .StringListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn StringListAppend(
        &self,
        vector: *mut StringList,
    ) -> *mut *mut ::std::os::raw::c_char {
        (self
            .StringListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn StringListClear(&self, vector: *mut StringList) {
        (self
            .StringListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn StringListResize(&self, vector: *mut StringList, change: isize) {
        (self
            .StringListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn StringListShift(
        &self,
        vector: *mut StringList,
        location: usize,
        difference: usize,
    ) {
        (self
            .StringListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn StringListUnshift(
        &self,
        vector: *mut StringList,
        location: usize,
        difference: usize,
    ) {
        (self
            .StringListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn StringListEnsureCapacity(&self, vector: *mut StringList, capacity: usize) {
        (self
            .StringListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn StringListSize(&self, vector: *const StringList) -> usize {
        (self
            .StringListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn StringListIndex(
        &self,
        vector: *const StringList,
        member: *mut *const ::std::os::raw::c_char,
    ) -> usize {
        (self
            .StringListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn StringListCopy(&self, dest: *mut StringList, src: *const StringList) {
        (self
            .StringListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn mCoreCallbacksListInit(&self, vector: *mut mCoreCallbacksList, capacity: usize) {
        (self
            .mCoreCallbacksListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn mCoreCallbacksListDeinit(&self, vector: *mut mCoreCallbacksList) {
        (self
            .mCoreCallbacksListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mCoreCallbacksListGetPointer(
        &self,
        vector: *mut mCoreCallbacksList,
        location: usize,
    ) -> *mut mCoreCallbacks {
        (self
            .mCoreCallbacksListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn mCoreCallbacksListGetConstPointer(
        &self,
        vector: *const mCoreCallbacksList,
        location: usize,
    ) -> *const mCoreCallbacks {
        (self
            .mCoreCallbacksListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn mCoreCallbacksListAppend(
        &self,
        vector: *mut mCoreCallbacksList,
    ) -> *mut mCoreCallbacks {
        (self
            .mCoreCallbacksListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mCoreCallbacksListClear(&self, vector: *mut mCoreCallbacksList) {
        (self
            .mCoreCallbacksListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mCoreCallbacksListResize(&self, vector: *mut mCoreCallbacksList, change: isize) {
        (self
            .mCoreCallbacksListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn mCoreCallbacksListShift(
        &self,
        vector: *mut mCoreCallbacksList,
        location: usize,
        difference: usize,
    ) {
        (self
            .mCoreCallbacksListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn mCoreCallbacksListUnshift(
        &self,
        vector: *mut mCoreCallbacksList,
        location: usize,
        difference: usize,
    ) {
        (self
            .mCoreCallbacksListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn mCoreCallbacksListEnsureCapacity(
        &self,
        vector: *mut mCoreCallbacksList,
        capacity: usize,
    ) {
        (self
            .mCoreCallbacksListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn mCoreCallbacksListSize(&self, vector: *const mCoreCallbacksList) -> usize {
        (self
            .mCoreCallbacksListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mCoreCallbacksListIndex(
        &self,
        vector: *const mCoreCallbacksList,
        member: *const mCoreCallbacks,
    ) -> usize {
        (self
            .mCoreCallbacksListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn mCoreCallbacksListCopy(
        &self,
        dest: *mut mCoreCallbacksList,
        src: *const mCoreCallbacksList,
    ) {
        (self
            .mCoreCallbacksListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn mRTCGenericSourceInit(&self, rtc: *mut mRTCGenericSource, core: *mut mCore) {
        (self
            .mRTCGenericSourceInit
            .as_ref()
            .expect("Expected function, got error."))(rtc, core)
    }
    pub unsafe fn mCoreFind(&self, path: *const ::std::os::raw::c_char) -> *mut mCore {
        (self
            .mCoreFind
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn mCoreLoadFile(
        &self,
        core: *mut mCore,
        path: *const ::std::os::raw::c_char,
    ) -> bool {
        (self
            .mCoreLoadFile
            .as_ref()
            .expect("Expected function, got error."))(core, path)
    }
    pub unsafe fn mCorePreloadVF(&self, core: *mut mCore, vf: *mut VFile) -> bool {
        (self
            .mCorePreloadVF
            .as_ref()
            .expect("Expected function, got error."))(core, vf)
    }
    pub unsafe fn mCorePreloadFile(
        &self,
        core: *mut mCore,
        path: *const ::std::os::raw::c_char,
    ) -> bool {
        (self
            .mCorePreloadFile
            .as_ref()
            .expect("Expected function, got error."))(core, path)
    }
    pub unsafe fn mCorePreloadVFCB(
        &self,
        core: *mut mCore,
        vf: *mut VFile,
        cb: ::std::option::Option<
            unsafe extern "C" fn(arg1: usize, arg2: usize, arg3: *mut ::std::os::raw::c_void),
        >,
        context: *mut ::std::os::raw::c_void,
    ) -> bool {
        (self
            .mCorePreloadVFCB
            .as_ref()
            .expect("Expected function, got error."))(core, vf, cb, context)
    }
    pub unsafe fn mCorePreloadFileCB(
        &self,
        core: *mut mCore,
        path: *const ::std::os::raw::c_char,
        cb: ::std::option::Option<
            unsafe extern "C" fn(arg1: usize, arg2: usize, arg3: *mut ::std::os::raw::c_void),
        >,
        context: *mut ::std::os::raw::c_void,
    ) -> bool {
        (self
            .mCorePreloadFileCB
            .as_ref()
            .expect("Expected function, got error."))(core, path, cb, context)
    }
    pub unsafe fn mCoreAutoloadSave(&self, core: *mut mCore) -> bool {
        (self
            .mCoreAutoloadSave
            .as_ref()
            .expect("Expected function, got error."))(core)
    }
    pub unsafe fn mCoreAutoloadPatch(&self, core: *mut mCore) -> bool {
        (self
            .mCoreAutoloadPatch
            .as_ref()
            .expect("Expected function, got error."))(core)
    }
    pub unsafe fn mCoreAutoloadCheats(&self, core: *mut mCore) -> bool {
        (self
            .mCoreAutoloadCheats
            .as_ref()
            .expect("Expected function, got error."))(core)
    }
    pub unsafe fn mCoreLoadSaveFile(
        &self,
        core: *mut mCore,
        path: *const ::std::os::raw::c_char,
        temporary: bool,
    ) -> bool {
        (self
            .mCoreLoadSaveFile
            .as_ref()
            .expect("Expected function, got error."))(core, path, temporary)
    }
    pub unsafe fn mCoreSaveState(
        &self,
        core: *mut mCore,
        slot: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> bool {
        (self
            .mCoreSaveState
            .as_ref()
            .expect("Expected function, got error."))(core, slot, flags)
    }
    pub unsafe fn mCoreLoadState(
        &self,
        core: *mut mCore,
        slot: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> bool {
        (self
            .mCoreLoadState
            .as_ref()
            .expect("Expected function, got error."))(core, slot, flags)
    }
    pub unsafe fn mCoreGetState(
        &self,
        core: *mut mCore,
        slot: ::std::os::raw::c_int,
        write: bool,
    ) -> *mut VFile {
        (self
            .mCoreGetState
            .as_ref()
            .expect("Expected function, got error."))(core, slot, write)
    }
    pub unsafe fn mCoreDeleteState(&self, core: *mut mCore, slot: ::std::os::raw::c_int) {
        (self
            .mCoreDeleteState
            .as_ref()
            .expect("Expected function, got error."))(core, slot)
    }
    pub unsafe fn mCoreTakeScreenshot(&self, core: *mut mCore) {
        (self
            .mCoreTakeScreenshot
            .as_ref()
            .expect("Expected function, got error."))(core)
    }
    pub unsafe fn mCoreTakeScreenshotVF(&self, core: *mut mCore, vf: *mut VFile) -> bool {
        (self
            .mCoreTakeScreenshotVF
            .as_ref()
            .expect("Expected function, got error."))(core, vf)
    }
    pub unsafe fn mCoreFindVF(&self, vf: *mut VFile) -> *mut mCore {
        (self
            .mCoreFindVF
            .as_ref()
            .expect("Expected function, got error."))(vf)
    }
    pub unsafe fn mCoreIsCompatible(&self, vf: *mut VFile) -> mPlatform {
        (self
            .mCoreIsCompatible
            .as_ref()
            .expect("Expected function, got error."))(vf)
    }
    pub unsafe fn mCoreCreate(&self, arg1: mPlatform) -> *mut mCore {
        (self
            .mCoreCreate
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mCoreSaveStateNamed(
        &self,
        core: *mut mCore,
        vf: *mut VFile,
        flags: ::std::os::raw::c_int,
    ) -> bool {
        (self
            .mCoreSaveStateNamed
            .as_ref()
            .expect("Expected function, got error."))(core, vf, flags)
    }
    pub unsafe fn mCoreLoadStateNamed(
        &self,
        core: *mut mCore,
        vf: *mut VFile,
        flags: ::std::os::raw::c_int,
    ) -> bool {
        (self
            .mCoreLoadStateNamed
            .as_ref()
            .expect("Expected function, got error."))(core, vf, flags)
    }
    pub unsafe fn mCoreInitConfig(&self, core: *mut mCore, port: *const ::std::os::raw::c_char) {
        (self
            .mCoreInitConfig
            .as_ref()
            .expect("Expected function, got error."))(core, port)
    }
    pub unsafe fn mCoreLoadConfig(&self, core: *mut mCore) {
        (self
            .mCoreLoadConfig
            .as_ref()
            .expect("Expected function, got error."))(core)
    }
    pub unsafe fn mCoreLoadForeignConfig(&self, core: *mut mCore, config: *const mCoreConfig) {
        (self
            .mCoreLoadForeignConfig
            .as_ref()
            .expect("Expected function, got error."))(core, config)
    }
    pub unsafe fn mCoreSetRTC(&self, core: *mut mCore, rtc: *mut mRTCSource) {
        (self
            .mCoreSetRTC
            .as_ref()
            .expect("Expected function, got error."))(core, rtc)
    }
    pub unsafe fn mCoreGetMemoryBlock(
        &self,
        core: *mut mCore,
        start: u32,
        size: *mut usize,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .mCoreGetMemoryBlock
            .as_ref()
            .expect("Expected function, got error."))(core, start, size)
    }
    pub unsafe fn mCoreGetMemoryBlockMasked(
        &self,
        core: *mut mCore,
        start: u32,
        size: *mut usize,
        mask: u32,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .mCoreGetMemoryBlockMasked
            .as_ref()
            .expect("Expected function, got error."))(core, start, size, mask)
    }
    pub unsafe fn mCoreGetMemoryBlockInfo(
        &self,
        core: *mut mCore,
        address: u32,
    ) -> *const mCoreMemoryBlock {
        (self
            .mCoreGetMemoryBlockInfo
            .as_ref()
            .expect("Expected function, got error."))(core, address)
    }
    pub unsafe fn mLogGetContext(&self) -> *mut mLogger {
        (self
            .mLogGetContext
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mLogSetDefaultLogger(&self, arg1: *mut mLogger) {
        (self
            .mLogSetDefaultLogger
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mLogSetThreadLogger(&self, arg1: *mut mLogger) {
        (self
            .mLogSetThreadLogger
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mLogGetThreadLogger(&self) -> *mut mLogger {
        (self
            .mLogGetThreadLogger
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mLogGenerateCategory(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .mLogGenerateCategory
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn mLogCategoryName(
        &self,
        arg1: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char {
        (self
            .mLogCategoryName
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mLogCategoryId(
        &self,
        arg1: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char {
        (self
            .mLogCategoryId
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mLogCategoryById(
        &self,
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .mLogCategoryById
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mStandardLoggerInit(&self, arg1: *mut mStandardLogger) {
        (self
            .mStandardLoggerInit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mStandardLoggerDeinit(&self, arg1: *mut mStandardLogger) {
        (self
            .mStandardLoggerDeinit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mStandardLoggerConfig(
        &self,
        arg1: *mut mStandardLogger,
        config: *mut mCoreConfig,
    ) {
        (self
            .mStandardLoggerConfig
            .as_ref()
            .expect("Expected function, got error."))(arg1, config)
    }
    pub unsafe fn mLogFilterInit(&self, arg1: *mut mLogFilter) {
        (self
            .mLogFilterInit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mLogFilterDeinit(&self, arg1: *mut mLogFilter) {
        (self
            .mLogFilterDeinit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mLogFilterLoad(&self, arg1: *mut mLogFilter, arg2: *const mCoreConfig) {
        (self
            .mLogFilterLoad
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn mLogFilterSave(&self, arg1: *const mLogFilter, arg2: *mut mCoreConfig) {
        (self
            .mLogFilterSave
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn mLogFilterSet(
        &self,
        arg1: *mut mLogFilter,
        category: *const ::std::os::raw::c_char,
        levels: ::std::os::raw::c_int,
    ) {
        (self
            .mLogFilterSet
            .as_ref()
            .expect("Expected function, got error."))(arg1, category, levels)
    }
    pub unsafe fn mLogFilterReset(
        &self,
        arg1: *mut mLogFilter,
        category: *const ::std::os::raw::c_char,
    ) {
        (self
            .mLogFilterReset
            .as_ref()
            .expect("Expected function, got error."))(arg1, category)
    }
    pub unsafe fn mLogFilterTest(
        &self,
        arg1: *const mLogFilter,
        category: ::std::os::raw::c_int,
        level: mLogLevel,
    ) -> bool {
        (self
            .mLogFilterTest
            .as_ref()
            .expect("Expected function, got error."))(arg1, category, level)
    }
    pub unsafe fn mLogFilterLevels(
        &self,
        arg1: *const mLogFilter,
        category: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .mLogFilterLevels
            .as_ref()
            .expect("Expected function, got error."))(arg1, category)
    }
    pub unsafe fn mBreakpointListInit(&self, vector: *mut mBreakpointList, capacity: usize) {
        (self
            .mBreakpointListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn mBreakpointListDeinit(&self, vector: *mut mBreakpointList) {
        (self
            .mBreakpointListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mBreakpointListGetPointer(
        &self,
        vector: *mut mBreakpointList,
        location: usize,
    ) -> *mut mBreakpoint {
        (self
            .mBreakpointListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn mBreakpointListGetConstPointer(
        &self,
        vector: *const mBreakpointList,
        location: usize,
    ) -> *const mBreakpoint {
        (self
            .mBreakpointListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn mBreakpointListAppend(&self, vector: *mut mBreakpointList) -> *mut mBreakpoint {
        (self
            .mBreakpointListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mBreakpointListClear(&self, vector: *mut mBreakpointList) {
        (self
            .mBreakpointListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mBreakpointListResize(&self, vector: *mut mBreakpointList, change: isize) {
        (self
            .mBreakpointListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn mBreakpointListShift(
        &self,
        vector: *mut mBreakpointList,
        location: usize,
        difference: usize,
    ) {
        (self
            .mBreakpointListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn mBreakpointListUnshift(
        &self,
        vector: *mut mBreakpointList,
        location: usize,
        difference: usize,
    ) {
        (self
            .mBreakpointListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn mBreakpointListEnsureCapacity(
        &self,
        vector: *mut mBreakpointList,
        capacity: usize,
    ) {
        (self
            .mBreakpointListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn mBreakpointListSize(&self, vector: *const mBreakpointList) -> usize {
        (self
            .mBreakpointListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mBreakpointListIndex(
        &self,
        vector: *const mBreakpointList,
        member: *const mBreakpoint,
    ) -> usize {
        (self
            .mBreakpointListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn mBreakpointListCopy(
        &self,
        dest: *mut mBreakpointList,
        src: *const mBreakpointList,
    ) {
        (self
            .mBreakpointListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn mWatchpointListInit(&self, vector: *mut mWatchpointList, capacity: usize) {
        (self
            .mWatchpointListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn mWatchpointListDeinit(&self, vector: *mut mWatchpointList) {
        (self
            .mWatchpointListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mWatchpointListGetPointer(
        &self,
        vector: *mut mWatchpointList,
        location: usize,
    ) -> *mut mWatchpoint {
        (self
            .mWatchpointListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn mWatchpointListGetConstPointer(
        &self,
        vector: *const mWatchpointList,
        location: usize,
    ) -> *const mWatchpoint {
        (self
            .mWatchpointListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn mWatchpointListAppend(&self, vector: *mut mWatchpointList) -> *mut mWatchpoint {
        (self
            .mWatchpointListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mWatchpointListClear(&self, vector: *mut mWatchpointList) {
        (self
            .mWatchpointListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mWatchpointListResize(&self, vector: *mut mWatchpointList, change: isize) {
        (self
            .mWatchpointListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn mWatchpointListShift(
        &self,
        vector: *mut mWatchpointList,
        location: usize,
        difference: usize,
    ) {
        (self
            .mWatchpointListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn mWatchpointListUnshift(
        &self,
        vector: *mut mWatchpointList,
        location: usize,
        difference: usize,
    ) {
        (self
            .mWatchpointListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn mWatchpointListEnsureCapacity(
        &self,
        vector: *mut mWatchpointList,
        capacity: usize,
    ) {
        (self
            .mWatchpointListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn mWatchpointListSize(&self, vector: *const mWatchpointList) -> usize {
        (self
            .mWatchpointListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mWatchpointListIndex(
        &self,
        vector: *const mWatchpointList,
        member: *const mWatchpoint,
    ) -> usize {
        (self
            .mWatchpointListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn mWatchpointListCopy(
        &self,
        dest: *mut mWatchpointList,
        src: *const mWatchpointList,
    ) {
        (self
            .mWatchpointListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn mDebuggerModuleListInit(
        &self,
        vector: *mut mDebuggerModuleList,
        capacity: usize,
    ) {
        (self
            .mDebuggerModuleListInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn mDebuggerModuleListDeinit(&self, vector: *mut mDebuggerModuleList) {
        (self
            .mDebuggerModuleListDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mDebuggerModuleListGetPointer(
        &self,
        vector: *mut mDebuggerModuleList,
        location: usize,
    ) -> *mut *mut mDebuggerModule {
        (self
            .mDebuggerModuleListGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn mDebuggerModuleListGetConstPointer(
        &self,
        vector: *const mDebuggerModuleList,
        location: usize,
    ) -> *const *mut mDebuggerModule {
        (self
            .mDebuggerModuleListGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn mDebuggerModuleListAppend(
        &self,
        vector: *mut mDebuggerModuleList,
    ) -> *mut *mut mDebuggerModule {
        (self
            .mDebuggerModuleListAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mDebuggerModuleListClear(&self, vector: *mut mDebuggerModuleList) {
        (self
            .mDebuggerModuleListClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mDebuggerModuleListResize(
        &self,
        vector: *mut mDebuggerModuleList,
        change: isize,
    ) {
        (self
            .mDebuggerModuleListResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn mDebuggerModuleListShift(
        &self,
        vector: *mut mDebuggerModuleList,
        location: usize,
        difference: usize,
    ) {
        (self
            .mDebuggerModuleListShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn mDebuggerModuleListUnshift(
        &self,
        vector: *mut mDebuggerModuleList,
        location: usize,
        difference: usize,
    ) {
        (self
            .mDebuggerModuleListUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn mDebuggerModuleListEnsureCapacity(
        &self,
        vector: *mut mDebuggerModuleList,
        capacity: usize,
    ) {
        (self
            .mDebuggerModuleListEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn mDebuggerModuleListSize(&self, vector: *const mDebuggerModuleList) -> usize {
        (self
            .mDebuggerModuleListSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mDebuggerModuleListIndex(
        &self,
        vector: *const mDebuggerModuleList,
        member: *mut *const mDebuggerModule,
    ) -> usize {
        (self
            .mDebuggerModuleListIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn mDebuggerModuleListCopy(
        &self,
        dest: *mut mDebuggerModuleList,
        src: *const mDebuggerModuleList,
    ) {
        (self
            .mDebuggerModuleListCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn mStackFramesInit(&self, vector: *mut mStackFrames, capacity: usize) {
        (self
            .mStackFramesInit
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn mStackFramesDeinit(&self, vector: *mut mStackFrames) {
        (self
            .mStackFramesDeinit
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mStackFramesGetPointer(
        &self,
        vector: *mut mStackFrames,
        location: usize,
    ) -> *mut mStackFrame {
        (self
            .mStackFramesGetPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn mStackFramesGetConstPointer(
        &self,
        vector: *const mStackFrames,
        location: usize,
    ) -> *const mStackFrame {
        (self
            .mStackFramesGetConstPointer
            .as_ref()
            .expect("Expected function, got error."))(vector, location)
    }
    pub unsafe fn mStackFramesAppend(&self, vector: *mut mStackFrames) -> *mut mStackFrame {
        (self
            .mStackFramesAppend
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mStackFramesClear(&self, vector: *mut mStackFrames) {
        (self
            .mStackFramesClear
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mStackFramesResize(&self, vector: *mut mStackFrames, change: isize) {
        (self
            .mStackFramesResize
            .as_ref()
            .expect("Expected function, got error."))(vector, change)
    }
    pub unsafe fn mStackFramesShift(
        &self,
        vector: *mut mStackFrames,
        location: usize,
        difference: usize,
    ) {
        (self
            .mStackFramesShift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn mStackFramesUnshift(
        &self,
        vector: *mut mStackFrames,
        location: usize,
        difference: usize,
    ) {
        (self
            .mStackFramesUnshift
            .as_ref()
            .expect("Expected function, got error."))(vector, location, difference)
    }
    pub unsafe fn mStackFramesEnsureCapacity(&self, vector: *mut mStackFrames, capacity: usize) {
        (self
            .mStackFramesEnsureCapacity
            .as_ref()
            .expect("Expected function, got error."))(vector, capacity)
    }
    pub unsafe fn mStackFramesSize(&self, vector: *const mStackFrames) -> usize {
        (self
            .mStackFramesSize
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn mStackFramesIndex(
        &self,
        vector: *const mStackFrames,
        member: *const mStackFrame,
    ) -> usize {
        (self
            .mStackFramesIndex
            .as_ref()
            .expect("Expected function, got error."))(vector, member)
    }
    pub unsafe fn mStackFramesCopy(&self, dest: *mut mStackFrames, src: *const mStackFrames) {
        (self
            .mStackFramesCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, src)
    }
    pub unsafe fn mDebuggerInit(&self, arg1: *mut mDebugger) {
        (self
            .mDebuggerInit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mDebuggerDeinit(&self, arg1: *mut mDebugger) {
        (self
            .mDebuggerDeinit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mDebuggerAttach(&self, arg1: *mut mDebugger, arg2: *mut mCore) {
        (self
            .mDebuggerAttach
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn mDebuggerAttachModule(&self, arg1: *mut mDebugger, arg2: *mut mDebuggerModule) {
        (self
            .mDebuggerAttachModule
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn mDebuggerDetachModule(&self, arg1: *mut mDebugger, arg2: *mut mDebuggerModule) {
        (self
            .mDebuggerDetachModule
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn mDebuggerRunTimeout(&self, debugger: *mut mDebugger, timeoutMs: i32) {
        (self
            .mDebuggerRunTimeout
            .as_ref()
            .expect("Expected function, got error."))(debugger, timeoutMs)
    }
    pub unsafe fn mDebuggerRun(&self, arg1: *mut mDebugger) {
        (self
            .mDebuggerRun
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mDebuggerRunFrame(&self, arg1: *mut mDebugger) {
        (self
            .mDebuggerRunFrame
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mDebuggerEnter(
        &self,
        arg1: *mut mDebugger,
        arg2: mDebuggerEntryReason,
        arg3: *mut mDebuggerEntryInfo,
    ) {
        (self
            .mDebuggerEnter
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn mDebuggerInterrupt(&self, arg1: *mut mDebugger) {
        (self
            .mDebuggerInterrupt
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mDebuggerUpdatePaused(&self, arg1: *mut mDebugger) {
        (self
            .mDebuggerUpdatePaused
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mDebuggerShutdown(&self, arg1: *mut mDebugger) {
        (self
            .mDebuggerShutdown
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mDebuggerUpdate(&self, arg1: *mut mDebugger) {
        (self
            .mDebuggerUpdate
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mDebuggerIsShutdown(&self, arg1: *const mDebugger) -> bool {
        (self
            .mDebuggerIsShutdown
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mDebuggerCreateModule(
        &self,
        type_: mDebuggerType,
        arg1: *mut mCore,
    ) -> *mut mDebuggerModule {
        (self
            .mDebuggerCreateModule
            .as_ref()
            .expect("Expected function, got error."))(type_, arg1)
    }
    pub unsafe fn mDebuggerModuleSetNeedsCallback(&self, arg1: *mut mDebuggerModule) {
        (self
            .mDebuggerModuleSetNeedsCallback
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn mDebuggerLookupIdentifier(
        &self,
        debugger: *mut mDebugger,
        name: *const ::std::os::raw::c_char,
        value: *mut i32,
        segment: *mut ::std::os::raw::c_int,
    ) -> bool {
        (self
            .mDebuggerLookupIdentifier
            .as_ref()
            .expect("Expected function, got error."))(debugger, name, value, segment)
    }
    pub unsafe fn usage(
        &self,
        arg0: *const ::std::os::raw::c_char,
        prologue: *const ::std::os::raw::c_char,
        epilogue: *const ::std::os::raw::c_char,
        subparsers: *const mSubParser,
        nSubparsers: ::std::os::raw::c_int,
    ) {
        (self.usage.as_ref().expect("Expected function, got error."))(
            arg0,
            prologue,
            epilogue,
            subparsers,
            nSubparsers,
        )
    }
    pub unsafe fn version(&self, arg0: *const ::std::os::raw::c_char) {
        (self
            .version
            .as_ref()
            .expect("Expected function, got error."))(arg0)
    }
    pub unsafe fn mArgumentsParse(
        &self,
        args: *mut mArguments,
        argc: ::std::os::raw::c_int,
        argv: *const *mut ::std::os::raw::c_char,
        subparsers: *mut mSubParser,
        nSubparsers: ::std::os::raw::c_int,
    ) -> bool {
        (self
            .mArgumentsParse
            .as_ref()
            .expect("Expected function, got error."))(
            args, argc, argv, subparsers, nSubparsers
        )
    }
    pub unsafe fn mArgumentsApply(
        &self,
        args: *const mArguments,
        subparsers: *mut mSubParser,
        nSubparsers: ::std::os::raw::c_int,
        config: *mut mCoreConfig,
    ) {
        (self
            .mArgumentsApply
            .as_ref()
            .expect("Expected function, got error."))(args, subparsers, nSubparsers, config)
    }
    pub unsafe fn mArgumentsApplyDebugger(
        &self,
        arg1: *const mArguments,
        arg2: *mut mCore,
        arg3: *mut mDebugger,
    ) -> bool {
        (self
            .mArgumentsApplyDebugger
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn mArgumentsApplyFileLoads(&self, arg1: *const mArguments, arg2: *mut mCore) {
        (self
            .mArgumentsApplyFileLoads
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn mArgumentsDeinit(&self, args: *mut mArguments) {
        (self
            .mArgumentsDeinit
            .as_ref()
            .expect("Expected function, got error."))(args)
    }
    pub unsafe fn mSubParserGraphicsInit(&self, parser: *mut mSubParser, opts: *mut mGraphicsOpts) {
        (self
            .mSubParserGraphicsInit
            .as_ref()
            .expect("Expected function, got error."))(parser, opts)
    }
    pub unsafe fn __cmsg_nxthdr(&self, __mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr {
        (self
            .__cmsg_nxthdr
            .as_ref()
            .expect("Expected function, got error."))(__mhdr, __cmsg)
    }
    pub unsafe fn socket(
        &self,
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.socket.as_ref().expect("Expected function, got error."))(__domain, __type, __protocol)
    }
    pub unsafe fn socketpair(
        &self,
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .socketpair
            .as_ref()
            .expect("Expected function, got error."))(__domain, __type, __protocol, __fds)
    }
    pub unsafe fn bind(
        &self,
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int {
        (self.bind.as_ref().expect("Expected function, got error."))(__fd, __addr, __len)
    }
    pub unsafe fn getsockname(
        &self,
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int {
        (self
            .getsockname
            .as_ref()
            .expect("Expected function, got error."))(__fd, __addr, __len)
    }
    pub unsafe fn connect(
        &self,
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int {
        (self
            .connect
            .as_ref()
            .expect("Expected function, got error."))(__fd, __addr, __len)
    }
    pub unsafe fn getpeername(
        &self,
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int {
        (self
            .getpeername
            .as_ref()
            .expect("Expected function, got error."))(__fd, __addr, __len)
    }
    pub unsafe fn send(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize {
        (self.send.as_ref().expect("Expected function, got error."))(__fd, __buf, __n, __flags)
    }
    pub unsafe fn recv(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize {
        (self.recv.as_ref().expect("Expected function, got error."))(__fd, __buf, __n, __flags)
    }
    pub unsafe fn sendto(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize {
        (self.sendto.as_ref().expect("Expected function, got error."))(
            __fd, __buf, __n, __flags, __addr, __addr_len,
        )
    }
    pub unsafe fn recvfrom(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize {
        (self
            .recvfrom
            .as_ref()
            .expect("Expected function, got error."))(
            __fd, __buf, __n, __flags, __addr, __addr_len
        )
    }
    pub unsafe fn sendmsg(
        &self,
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize {
        (self
            .sendmsg
            .as_ref()
            .expect("Expected function, got error."))(__fd, __message, __flags)
    }
    pub unsafe fn recvmsg(
        &self,
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize {
        (self
            .recvmsg
            .as_ref()
            .expect("Expected function, got error."))(__fd, __message, __flags)
    }
    pub unsafe fn getsockopt(
        &self,
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int {
        (self
            .getsockopt
            .as_ref()
            .expect("Expected function, got error."))(
            __fd, __level, __optname, __optval, __optlen
        )
    }
    pub unsafe fn setsockopt(
        &self,
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int {
        (self
            .setsockopt
            .as_ref()
            .expect("Expected function, got error."))(
            __fd, __level, __optname, __optval, __optlen
        )
    }
    pub unsafe fn listen(
        &self,
        __fd: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.listen.as_ref().expect("Expected function, got error."))(__fd, __n)
    }
    pub unsafe fn accept(
        &self,
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int {
        (self.accept.as_ref().expect("Expected function, got error."))(__fd, __addr, __addr_len)
    }
    pub unsafe fn shutdown(
        &self,
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .shutdown
            .as_ref()
            .expect("Expected function, got error."))(__fd, __how)
    }
    pub unsafe fn sockatmark(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .sockatmark
            .as_ref()
            .expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn isfdtype(
        &self,
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .isfdtype
            .as_ref()
            .expect("Expected function, got error."))(__fd, __fdtype)
    }
    pub unsafe fn ntohl(&self, __netlong: u32) -> u32 {
        (self.ntohl.as_ref().expect("Expected function, got error."))(__netlong)
    }
    pub unsafe fn ntohs(&self, __netshort: u16) -> u16 {
        (self.ntohs.as_ref().expect("Expected function, got error."))(__netshort)
    }
    pub unsafe fn htonl(&self, __hostlong: u32) -> u32 {
        (self.htonl.as_ref().expect("Expected function, got error."))(__hostlong)
    }
    pub unsafe fn htons(&self, __hostshort: u16) -> u16 {
        (self.htons.as_ref().expect("Expected function, got error."))(__hostshort)
    }
    pub unsafe fn bindresvport(
        &self,
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int {
        (self
            .bindresvport
            .as_ref()
            .expect("Expected function, got error."))(__sockfd, __sock_in)
    }
    pub unsafe fn bindresvport6(
        &self,
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int {
        (self
            .bindresvport6
            .as_ref()
            .expect("Expected function, got error."))(__sockfd, __sock_in)
    }
    pub unsafe fn inet_addr(&self, __cp: *const ::std::os::raw::c_char) -> in_addr_t {
        (self
            .inet_addr
            .as_ref()
            .expect("Expected function, got error."))(__cp)
    }
    pub unsafe fn inet_lnaof(&self, __in: in_addr) -> in_addr_t {
        (self
            .inet_lnaof
            .as_ref()
            .expect("Expected function, got error."))(__in)
    }
    pub unsafe fn inet_makeaddr(&self, __net: in_addr_t, __host: in_addr_t) -> in_addr {
        (self
            .inet_makeaddr
            .as_ref()
            .expect("Expected function, got error."))(__net, __host)
    }
    pub unsafe fn inet_netof(&self, __in: in_addr) -> in_addr_t {
        (self
            .inet_netof
            .as_ref()
            .expect("Expected function, got error."))(__in)
    }
    pub unsafe fn inet_network(&self, __cp: *const ::std::os::raw::c_char) -> in_addr_t {
        (self
            .inet_network
            .as_ref()
            .expect("Expected function, got error."))(__cp)
    }
    pub unsafe fn inet_ntoa(&self, __in: in_addr) -> *mut ::std::os::raw::c_char {
        (self
            .inet_ntoa
            .as_ref()
            .expect("Expected function, got error."))(__in)
    }
    pub unsafe fn inet_pton(
        &self,
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .inet_pton
            .as_ref()
            .expect("Expected function, got error."))(__af, __cp, __buf)
    }
    pub unsafe fn inet_ntop(
        &self,
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __len: socklen_t,
    ) -> *const ::std::os::raw::c_char {
        (self
            .inet_ntop
            .as_ref()
            .expect("Expected function, got error."))(__af, __cp, __buf, __len)
    }
    pub unsafe fn inet_aton(
        &self,
        __cp: *const ::std::os::raw::c_char,
        __inp: *mut in_addr,
    ) -> ::std::os::raw::c_int {
        (self
            .inet_aton
            .as_ref()
            .expect("Expected function, got error."))(__cp, __inp)
    }
    pub unsafe fn inet_neta(
        &self,
        __net: in_addr_t,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .inet_neta
            .as_ref()
            .expect("Expected function, got error."))(__net, __buf, __len)
    }
    pub unsafe fn inet_net_ntop(
        &self,
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __bits: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .inet_net_ntop
            .as_ref()
            .expect("Expected function, got error."))(__af, __cp, __bits, __buf, __len)
    }
    pub unsafe fn inet_net_pton(
        &self,
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .inet_net_pton
            .as_ref()
            .expect("Expected function, got error."))(__af, __cp, __buf, __len)
    }
    pub unsafe fn inet_nsap_addr(
        &self,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_uchar,
        __len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        (self
            .inet_nsap_addr
            .as_ref()
            .expect("Expected function, got error."))(__cp, __buf, __len)
    }
    pub unsafe fn inet_nsap_ntoa(
        &self,
        __len: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_uchar,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .inet_nsap_ntoa
            .as_ref()
            .expect("Expected function, got error."))(__len, __cp, __buf)
    }
    pub unsafe fn setrpcent(&self, __stayopen: ::std::os::raw::c_int) {
        (self
            .setrpcent
            .as_ref()
            .expect("Expected function, got error."))(__stayopen)
    }
    pub unsafe fn endrpcent(&self) {
        (self
            .endrpcent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getrpcbyname(&self, __name: *const ::std::os::raw::c_char) -> *mut rpcent {
        (self
            .getrpcbyname
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn getrpcbynumber(&self, __number: ::std::os::raw::c_int) -> *mut rpcent {
        (self
            .getrpcbynumber
            .as_ref()
            .expect("Expected function, got error."))(__number)
    }
    pub unsafe fn getrpcent(&self) -> *mut rpcent {
        (self
            .getrpcent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getrpcbyname_r(
        &self,
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int {
        (self
            .getrpcbyname_r
            .as_ref()
            .expect("Expected function, got error."))(
            __name,
            __result_buf,
            __buffer,
            __buflen,
            __result,
        )
    }
    pub unsafe fn getrpcbynumber_r(
        &self,
        __number: ::std::os::raw::c_int,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int {
        (self
            .getrpcbynumber_r
            .as_ref()
            .expect("Expected function, got error."))(
            __number,
            __result_buf,
            __buffer,
            __buflen,
            __result,
        )
    }
    pub unsafe fn getrpcent_r(
        &self,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int {
        (self
            .getrpcent_r
            .as_ref()
            .expect("Expected function, got error."))(
            __result_buf, __buffer, __buflen, __result
        )
    }
    pub unsafe fn __h_errno_location(&self) -> *mut ::std::os::raw::c_int {
        (self
            .__h_errno_location
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn herror(&self, __str: *const ::std::os::raw::c_char) {
        (self.herror.as_ref().expect("Expected function, got error."))(__str)
    }
    pub unsafe fn hstrerror(
        &self,
        __err_num: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char {
        (self
            .hstrerror
            .as_ref()
            .expect("Expected function, got error."))(__err_num)
    }
    pub unsafe fn sethostent(&self, __stay_open: ::std::os::raw::c_int) {
        (self
            .sethostent
            .as_ref()
            .expect("Expected function, got error."))(__stay_open)
    }
    pub unsafe fn endhostent(&self) {
        (self
            .endhostent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn gethostent(&self) -> *mut hostent {
        (self
            .gethostent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn gethostbyaddr(
        &self,
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
    ) -> *mut hostent {
        (self
            .gethostbyaddr
            .as_ref()
            .expect("Expected function, got error."))(__addr, __len, __type)
    }
    pub unsafe fn gethostbyname(&self, __name: *const ::std::os::raw::c_char) -> *mut hostent {
        (self
            .gethostbyname
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn gethostbyname2(
        &self,
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
    ) -> *mut hostent {
        (self
            .gethostbyname2
            .as_ref()
            .expect("Expected function, got error."))(__name, __af)
    }
    pub unsafe fn gethostent_r(
        &self,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .gethostent_r
            .as_ref()
            .expect("Expected function, got error."))(
            __result_buf,
            __buf,
            __buflen,
            __result,
            __h_errnop,
        )
    }
    pub unsafe fn gethostbyaddr_r(
        &self,
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .gethostbyaddr_r
            .as_ref()
            .expect("Expected function, got error."))(
            __addr,
            __len,
            __type,
            __result_buf,
            __buf,
            __buflen,
            __result,
            __h_errnop,
        )
    }
    pub unsafe fn gethostbyname_r(
        &self,
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .gethostbyname_r
            .as_ref()
            .expect("Expected function, got error."))(
            __name,
            __result_buf,
            __buf,
            __buflen,
            __result,
            __h_errnop,
        )
    }
    pub unsafe fn gethostbyname2_r(
        &self,
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .gethostbyname2_r
            .as_ref()
            .expect("Expected function, got error."))(
            __name,
            __af,
            __result_buf,
            __buf,
            __buflen,
            __result,
            __h_errnop,
        )
    }
    pub unsafe fn setnetent(&self, __stay_open: ::std::os::raw::c_int) {
        (self
            .setnetent
            .as_ref()
            .expect("Expected function, got error."))(__stay_open)
    }
    pub unsafe fn endnetent(&self) {
        (self
            .endnetent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getnetent(&self) -> *mut netent {
        (self
            .getnetent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getnetbyaddr(&self, __net: u32, __type: ::std::os::raw::c_int) -> *mut netent {
        (self
            .getnetbyaddr
            .as_ref()
            .expect("Expected function, got error."))(__net, __type)
    }
    pub unsafe fn getnetbyname(&self, __name: *const ::std::os::raw::c_char) -> *mut netent {
        (self
            .getnetbyname
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn getnetent_r(
        &self,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .getnetent_r
            .as_ref()
            .expect("Expected function, got error."))(
            __result_buf,
            __buf,
            __buflen,
            __result,
            __h_errnop,
        )
    }
    pub unsafe fn getnetbyaddr_r(
        &self,
        __net: u32,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .getnetbyaddr_r
            .as_ref()
            .expect("Expected function, got error."))(
            __net,
            __type,
            __result_buf,
            __buf,
            __buflen,
            __result,
            __h_errnop,
        )
    }
    pub unsafe fn getnetbyname_r(
        &self,
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .getnetbyname_r
            .as_ref()
            .expect("Expected function, got error."))(
            __name,
            __result_buf,
            __buf,
            __buflen,
            __result,
            __h_errnop,
        )
    }
    pub unsafe fn setservent(&self, __stay_open: ::std::os::raw::c_int) {
        (self
            .setservent
            .as_ref()
            .expect("Expected function, got error."))(__stay_open)
    }
    pub unsafe fn endservent(&self) {
        (self
            .endservent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getservent(&self) -> *mut servent {
        (self
            .getservent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getservbyname(
        &self,
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent {
        (self
            .getservbyname
            .as_ref()
            .expect("Expected function, got error."))(__name, __proto)
    }
    pub unsafe fn getservbyport(
        &self,
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent {
        (self
            .getservbyport
            .as_ref()
            .expect("Expected function, got error."))(__port, __proto)
    }
    pub unsafe fn getservent_r(
        &self,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int {
        (self
            .getservent_r
            .as_ref()
            .expect("Expected function, got error."))(
            __result_buf, __buf, __buflen, __result
        )
    }
    pub unsafe fn getservbyname_r(
        &self,
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int {
        (self
            .getservbyname_r
            .as_ref()
            .expect("Expected function, got error."))(
            __name,
            __proto,
            __result_buf,
            __buf,
            __buflen,
            __result,
        )
    }
    pub unsafe fn getservbyport_r(
        &self,
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int {
        (self
            .getservbyport_r
            .as_ref()
            .expect("Expected function, got error."))(
            __port,
            __proto,
            __result_buf,
            __buf,
            __buflen,
            __result,
        )
    }
    pub unsafe fn setprotoent(&self, __stay_open: ::std::os::raw::c_int) {
        (self
            .setprotoent
            .as_ref()
            .expect("Expected function, got error."))(__stay_open)
    }
    pub unsafe fn endprotoent(&self) {
        (self
            .endprotoent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getprotoent(&self) -> *mut protoent {
        (self
            .getprotoent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getprotobyname(&self, __name: *const ::std::os::raw::c_char) -> *mut protoent {
        (self
            .getprotobyname
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn getprotobynumber(&self, __proto: ::std::os::raw::c_int) -> *mut protoent {
        (self
            .getprotobynumber
            .as_ref()
            .expect("Expected function, got error."))(__proto)
    }
    pub unsafe fn getprotoent_r(
        &self,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int {
        (self
            .getprotoent_r
            .as_ref()
            .expect("Expected function, got error."))(
            __result_buf, __buf, __buflen, __result
        )
    }
    pub unsafe fn getprotobyname_r(
        &self,
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int {
        (self
            .getprotobyname_r
            .as_ref()
            .expect("Expected function, got error."))(
            __name,
            __result_buf,
            __buf,
            __buflen,
            __result,
        )
    }
    pub unsafe fn getprotobynumber_r(
        &self,
        __proto: ::std::os::raw::c_int,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int {
        (self
            .getprotobynumber_r
            .as_ref()
            .expect("Expected function, got error."))(
            __proto,
            __result_buf,
            __buf,
            __buflen,
            __result,
        )
    }
    pub unsafe fn setnetgrent(
        &self,
        __netgroup: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .setnetgrent
            .as_ref()
            .expect("Expected function, got error."))(__netgroup)
    }
    pub unsafe fn endnetgrent(&self) {
        (self
            .endnetgrent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getnetgrent(
        &self,
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .getnetgrent
            .as_ref()
            .expect("Expected function, got error."))(__hostp, __userp, __domainp)
    }
    pub unsafe fn innetgr(
        &self,
        __netgroup: *const ::std::os::raw::c_char,
        __host: *const ::std::os::raw::c_char,
        __user: *const ::std::os::raw::c_char,
        __domain: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .innetgr
            .as_ref()
            .expect("Expected function, got error."))(__netgroup, __host, __user, __domain)
    }
    pub unsafe fn getnetgrent_r(
        &self,
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .getnetgrent_r
            .as_ref()
            .expect("Expected function, got error."))(
            __hostp, __userp, __domainp, __buffer, __buflen,
        )
    }
    pub unsafe fn rcmd(
        &self,
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.rcmd.as_ref().expect("Expected function, got error."))(
            __ahost, __rport, __locuser, __remuser, __cmd, __fd2p,
        )
    }
    pub unsafe fn rcmd_af(
        &self,
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int {
        (self
            .rcmd_af
            .as_ref()
            .expect("Expected function, got error."))(
            __ahost, __rport, __locuser, __remuser, __cmd, __fd2p, __af,
        )
    }
    pub unsafe fn rexec(
        &self,
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.rexec.as_ref().expect("Expected function, got error."))(
            __ahost, __rport, __name, __pass, __cmd, __fd2p,
        )
    }
    pub unsafe fn rexec_af(
        &self,
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int {
        (self
            .rexec_af
            .as_ref()
            .expect("Expected function, got error."))(
            __ahost, __rport, __name, __pass, __cmd, __fd2p, __af,
        )
    }
    pub unsafe fn ruserok(
        &self,
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .ruserok
            .as_ref()
            .expect("Expected function, got error."))(__rhost, __suser, __remuser, __locuser)
    }
    pub unsafe fn ruserok_af(
        &self,
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int {
        (self
            .ruserok_af
            .as_ref()
            .expect("Expected function, got error."))(
            __rhost, __suser, __remuser, __locuser, __af
        )
    }
    pub unsafe fn iruserok(
        &self,
        __raddr: u32,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .iruserok
            .as_ref()
            .expect("Expected function, got error."))(__raddr, __suser, __remuser, __locuser)
    }
    pub unsafe fn iruserok_af(
        &self,
        __raddr: *const ::std::os::raw::c_void,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int {
        (self
            .iruserok_af
            .as_ref()
            .expect("Expected function, got error."))(
            __raddr, __suser, __remuser, __locuser, __af
        )
    }
    pub unsafe fn rresvport(&self, __alport: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .rresvport
            .as_ref()
            .expect("Expected function, got error."))(__alport)
    }
    pub unsafe fn rresvport_af(
        &self,
        __alport: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int {
        (self
            .rresvport_af
            .as_ref()
            .expect("Expected function, got error."))(__alport, __af)
    }
    pub unsafe fn getaddrinfo(
        &self,
        __name: *const ::std::os::raw::c_char,
        __service: *const ::std::os::raw::c_char,
        __req: *const addrinfo,
        __pai: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int {
        (self
            .getaddrinfo
            .as_ref()
            .expect("Expected function, got error."))(__name, __service, __req, __pai)
    }
    pub unsafe fn freeaddrinfo(&self, __ai: *mut addrinfo) {
        (self
            .freeaddrinfo
            .as_ref()
            .expect("Expected function, got error."))(__ai)
    }
    pub unsafe fn gai_strerror(
        &self,
        __ecode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char {
        (self
            .gai_strerror
            .as_ref()
            .expect("Expected function, got error."))(__ecode)
    }
    pub unsafe fn getnameinfo(
        &self,
        __sa: *const sockaddr,
        __salen: socklen_t,
        __host: *mut ::std::os::raw::c_char,
        __hostlen: socklen_t,
        __serv: *mut ::std::os::raw::c_char,
        __servlen: socklen_t,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .getnameinfo
            .as_ref()
            .expect("Expected function, got error."))(
            __sa, __salen, __host, __hostlen, __serv, __servlen, __flags,
        )
    }
    pub unsafe fn __errno_location(&self) -> *mut ::std::os::raw::c_int {
        (self
            .__errno_location
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn VFileOpen(
        &self,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *mut VFile {
        (self
            .VFileOpen
            .as_ref()
            .expect("Expected function, got error."))(path, flags)
    }
    pub unsafe fn VFileOpenFD(
        &self,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *mut VFile {
        (self
            .VFileOpenFD
            .as_ref()
            .expect("Expected function, got error."))(path, flags)
    }
    pub unsafe fn VFileFromFD(&self, fd: ::std::os::raw::c_int) -> *mut VFile {
        (self
            .VFileFromFD
            .as_ref()
            .expect("Expected function, got error."))(fd)
    }
    pub unsafe fn VFileFromMemory(
        &self,
        mem: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut VFile {
        (self
            .VFileFromMemory
            .as_ref()
            .expect("Expected function, got error."))(mem, size)
    }
    pub unsafe fn VFileFromConstMemory(
        &self,
        mem: *const ::std::os::raw::c_void,
        size: usize,
    ) -> *mut VFile {
        (self
            .VFileFromConstMemory
            .as_ref()
            .expect("Expected function, got error."))(mem, size)
    }
    pub unsafe fn VFileMemChunk(
        &self,
        mem: *const ::std::os::raw::c_void,
        size: usize,
    ) -> *mut VFile {
        (self
            .VFileMemChunk
            .as_ref()
            .expect("Expected function, got error."))(mem, size)
    }
    pub unsafe fn VFileFIFO(&self, backing: *mut CircleBuffer) -> *mut VFile {
        (self
            .VFileFIFO
            .as_ref()
            .expect("Expected function, got error."))(backing)
    }
    pub unsafe fn VDirOpen(&self, path: *const ::std::os::raw::c_char) -> *mut VDir {
        (self
            .VDirOpen
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn VDirOpenArchive(&self, path: *const ::std::os::raw::c_char) -> *mut VDir {
        (self
            .VDirOpenArchive
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn VDirCreate(&self, path: *const ::std::os::raw::c_char) -> bool {
        (self
            .VDirCreate
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn separatePath(
        &self,
        path: *const ::std::os::raw::c_char,
        dirname: *mut ::std::os::raw::c_char,
        basename: *mut ::std::os::raw::c_char,
        extension: *mut ::std::os::raw::c_char,
    ) {
        (self
            .separatePath
            .as_ref()
            .expect("Expected function, got error."))(path, dirname, basename, extension)
    }
    pub unsafe fn isAbsolute(&self, path: *const ::std::os::raw::c_char) -> bool {
        (self
            .isAbsolute
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn makeAbsolute(
        &self,
        path: *const ::std::os::raw::c_char,
        base: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_char,
    ) {
        (self
            .makeAbsolute
            .as_ref()
            .expect("Expected function, got error."))(path, base, out)
    }
    pub unsafe fn VDirFindFirst(
        &self,
        dir: *mut VDir,
        filter: ::std::option::Option<unsafe extern "C" fn(arg1: *mut VFile) -> bool>,
    ) -> *mut VFile {
        (self
            .VDirFindFirst
            .as_ref()
            .expect("Expected function, got error."))(dir, filter)
    }
    pub unsafe fn VDirFindNextAvailable(
        &self,
        arg1: *mut VDir,
        basename: *const ::std::os::raw::c_char,
        infix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> *mut VFile {
        (self
            .VDirFindNextAvailable
            .as_ref()
            .expect("Expected function, got error."))(arg1, basename, infix, suffix, mode)
    }
    pub unsafe fn VFileReadline(
        &self,
        vf: *mut VFile,
        buffer: *mut ::std::os::raw::c_char,
        size: usize,
    ) -> isize {
        (self
            .VFileReadline
            .as_ref()
            .expect("Expected function, got error."))(vf, buffer, size)
    }
    pub unsafe fn VFileWrite32LE(&self, vf: *mut VFile, word: i32) -> isize {
        (self
            .VFileWrite32LE
            .as_ref()
            .expect("Expected function, got error."))(vf, word)
    }
    pub unsafe fn VFileWrite16LE(&self, vf: *mut VFile, hword: i16) -> isize {
        (self
            .VFileWrite16LE
            .as_ref()
            .expect("Expected function, got error."))(vf, hword)
    }
    pub unsafe fn VFileRead32LE(&self, vf: *mut VFile, word: *mut ::std::os::raw::c_void) -> isize {
        (self
            .VFileRead32LE
            .as_ref()
            .expect("Expected function, got error."))(vf, word)
    }
    pub unsafe fn VFileRead16LE(
        &self,
        vf: *mut VFile,
        hword: *mut ::std::os::raw::c_void,
    ) -> isize {
        (self
            .VFileRead16LE
            .as_ref()
            .expect("Expected function, got error."))(vf, hword)
    }
}
